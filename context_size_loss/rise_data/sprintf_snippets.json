{
  "metadata": {
    "repository": "https://github.com/aravindkrishnaswamy/RISE",
    "commit": "297d0339a7f7acd1418e322a30a21f44c7dbbb1d",
    "extraction_date": "Tue Sep 30 08:58:01 MDT 2025",
    "total_snippets": 268,
    "description": "Code snippets containing sprintf calls from RISE repository"
  },
  "snippets": [
    {
      "file_path": "extlib/libpng/CHANGES",
      "sprintf_line": 695,
      "context_lines": [
        "extlib/libpng/CHANGES-696-  Added data_length parameter to png_decompress_chunk() function",
        "extlib/libpng/CHANGES-697-  Revised documentation to remove reference to abandoned png_free_chnk functions",
        "extlib/libpng/CHANGES-698-  Fixed an error in png_rgb_to_gray_fixed()",
        "extlib/libpng/CHANGES-699-  Revised example.c, usage of png_destroy_write_struct().",
        "extlib/libpng/CHANGES-700-  Renamed makefile.ibmvac3 to makefile.ibmc, added libpng.icc IBM project file",
        "extlib/libpng/CHANGES-701-  Added a check for info_ptr->free_me&PNG_FREE_TEXT when freeing text in png.c",
        "extlib/libpng/CHANGES-702-  Simplify png_sig_bytes() function to remove use of non-ISO-C strdup().",
        "extlib/libpng/CHANGES-703-version 1.0.6e [April 9, 2000]",
        "extlib/libpng/CHANGES-704-  Added png_data_freer() function.",
        "extlib/libpng/CHANGES-705-  In the code that checks for over-length tRNS chunks, added check of",
        "extlib/libpng/png.c-631-",
        "extlib/libpng/png.c-632-   if (png_ptr->time_buffer == NULL)",
        "extlib/libpng/png.c-633-   {",
        "extlib/libpng/png.c-634-      png_ptr->time_buffer = (png_charp)png_malloc(png_ptr, (png_uint_32)(29*",
        "extlib/libpng/png.c-635-         png_sizeof(char)));",
        "extlib/libpng/png.c-636-   }",
        "extlib/libpng/png.c-637-",
        "extlib/libpng/png.c-638-#if defined(_WIN32_WCE)",
        "extlib/libpng/png.c-639-   {",
        "extlib/libpng/png.c-640-      wchar_t time_buf[29];"
      ],
      "raw_content": "extlib/libpng/CHANGES:695:  Changed sprintf() to strcpy() in png_write_sCAL_s() to work without STDIO\nextlib/libpng/CHANGES-696-  Added data_length parameter to png_decompress_chunk() function\nextlib/libpng/CHANGES-697-  Revised documentation to remove reference to abandoned png_free_chnk functions\nextlib/libpng/CHANGES-698-  Fixed an error in png_rgb_to_gray_fixed()\nextlib/libpng/CHANGES-699-  Revised example.c, usage of png_destroy_write_struct().\nextlib/libpng/CHANGES-700-  Renamed makefile.ibmvac3 to makefile.ibmc, added libpng.icc IBM project file\nextlib/libpng/CHANGES-701-  Added a check for info_ptr->free_me&PNG_FREE_TEXT when freeing text in png.c\nextlib/libpng/CHANGES-702-  Simplify png_sig_bytes() function to remove use of non-ISO-C strdup().\nextlib/libpng/CHANGES-703-version 1.0.6e [April 9, 2000]\nextlib/libpng/CHANGES-704-  Added png_data_freer() function.\nextlib/libpng/CHANGES-705-  In the code that checks for over-length tRNS chunks, added check of\nextlib/libpng/png.c-631-\nextlib/libpng/png.c-632-   if (png_ptr->time_buffer == NULL)\nextlib/libpng/png.c-633-   {\nextlib/libpng/png.c-634-      png_ptr->time_buffer = (png_charp)png_malloc(png_ptr, (png_uint_32)(29*\nextlib/libpng/png.c-635-         png_sizeof(char)));\nextlib/libpng/png.c-636-   }\nextlib/libpng/png.c-637-\nextlib/libpng/png.c-638-#if defined(_WIN32_WCE)\nextlib/libpng/png.c-639-   {\nextlib/libpng/png.c-640-      wchar_t time_buf[29];"
    },
    {
      "file_path": "extlib/libpng/png.c",
      "sprintf_line": 641,
      "context_lines": [
        "extlib/libpng/png.c-642-          ptime->day % 32, short_months[(ptime->month - 1) % 12],",
        "extlib/libpng/png.c-643-        ptime->year, ptime->hour % 24, ptime->minute % 60,",
        "extlib/libpng/png.c-644-          ptime->second % 61);",
        "extlib/libpng/png.c-645-      WideCharToMultiByte(CP_ACP, 0, time_buf, -1, png_ptr->time_buffer, 29,",
        "extlib/libpng/png.c-646-          NULL, NULL);",
        "extlib/libpng/png.c-647-   }",
        "extlib/libpng/png.c-648-#else",
        "extlib/libpng/png.c-649-#ifdef USE_FAR_KEYWORD",
        "extlib/libpng/png.c-650-   {",
        "extlib/libpng/png.c-651-      char near_time_buf[29];"
      ],
      "raw_content": "extlib/libpng/png.c:641:      wsprintf(time_buf, TEXT(\"%d %S %d %02d:%02d:%02d +0000\"),\nextlib/libpng/png.c-642-          ptime->day % 32, short_months[(ptime->month - 1) % 12],\nextlib/libpng/png.c-643-        ptime->year, ptime->hour % 24, ptime->minute % 60,\nextlib/libpng/png.c-644-          ptime->second % 61);\nextlib/libpng/png.c-645-      WideCharToMultiByte(CP_ACP, 0, time_buf, -1, png_ptr->time_buffer, 29,\nextlib/libpng/png.c-646-          NULL, NULL);\nextlib/libpng/png.c-647-   }\nextlib/libpng/png.c-648-#else\nextlib/libpng/png.c-649-#ifdef USE_FAR_KEYWORD\nextlib/libpng/png.c-650-   {\nextlib/libpng/png.c-651-      char near_time_buf[29];"
    },
    {
      "file_path": "extlib/libpng/png.c",
      "sprintf_line": 652,
      "context_lines": [
        "extlib/libpng/png.c-653-          ptime->day % 32, short_months[(ptime->month - 1) % 12],",
        "extlib/libpng/png.c-654-          ptime->year, ptime->hour % 24, ptime->minute % 60,",
        "extlib/libpng/png.c-655-          ptime->second % 61);",
        "extlib/libpng/png.c-656-      png_memcpy(png_ptr->time_buffer, near_time_buf,",
        "extlib/libpng/png.c-657-          29*png_sizeof(char));",
        "extlib/libpng/png.c-658-   }",
        "extlib/libpng/png.c-659-#else"
      ],
      "raw_content": "extlib/libpng/png.c:652:      sprintf(near_time_buf, \"%d %s %d %02d:%02d:%02d +0000\",\nextlib/libpng/png.c-653-          ptime->day % 32, short_months[(ptime->month - 1) % 12],\nextlib/libpng/png.c-654-          ptime->year, ptime->hour % 24, ptime->minute % 60,\nextlib/libpng/png.c-655-          ptime->second % 61);\nextlib/libpng/png.c-656-      png_memcpy(png_ptr->time_buffer, near_time_buf,\nextlib/libpng/png.c-657-          29*png_sizeof(char));\nextlib/libpng/png.c-658-   }\nextlib/libpng/png.c-659-#else"
    },
    {
      "file_path": "extlib/libpng/png.c",
      "sprintf_line": 660,
      "context_lines": [
        "extlib/libpng/png.c-661-       ptime->day % 32, short_months[(ptime->month - 1) % 12],",
        "extlib/libpng/png.c-662-       ptime->year, ptime->hour % 24, ptime->minute % 60,",
        "extlib/libpng/png.c-663-       ptime->second % 61);",
        "extlib/libpng/png.c-664-#endif",
        "extlib/libpng/png.c-665-#endif /* _WIN32_WCE */",
        "extlib/libpng/png.c-666-   return ((png_charp)png_ptr->time_buffer);",
        "extlib/libpng/png.c-667-}",
        "extlib/libpng/png.c-668-#endif /* PNG_TIME_RFC1123_SUPPORTED */",
        "extlib/libpng/png.c-669-",
        "extlib/libpng/png.c-670-#if 0",
        "extlib/libpng/pnggccrd.c-5090-       png_warning(png_ptr, \"asm_flags may not have been initialized\");",
        "extlib/libpng/pnggccrd.c-5091-#endif",
        "extlib/libpng/pnggccrd.c-5092-       png_mmx_support();",
        "extlib/libpng/pnggccrd.c-5093-   }",
        "extlib/libpng/pnggccrd.c-5094-#endif /* PNG_ASSEMBLER_CODE_SUPPORTED */",
        "extlib/libpng/pnggccrd.c-5095-",
        "extlib/libpng/pnggccrd.c-5096-#ifdef PNG_DEBUG",
        "extlib/libpng/pnggccrd.c-5097-   png_debug(1, \"in png_read_filter_row (pnggccrd.c)\\n\");",
        "extlib/libpng/pnggccrd.c-5098-   switch (filter)",
        "extlib/libpng/pnggccrd.c-5099-   {"
      ],
      "raw_content": "extlib/libpng/png.c:660:   sprintf(png_ptr->time_buffer, \"%d %s %d %02d:%02d:%02d +0000\",\nextlib/libpng/png.c-661-       ptime->day % 32, short_months[(ptime->month - 1) % 12],\nextlib/libpng/png.c-662-       ptime->year, ptime->hour % 24, ptime->minute % 60,\nextlib/libpng/png.c-663-       ptime->second % 61);\nextlib/libpng/png.c-664-#endif\nextlib/libpng/png.c-665-#endif /* _WIN32_WCE */\nextlib/libpng/png.c-666-   return ((png_charp)png_ptr->time_buffer);\nextlib/libpng/png.c-667-}\nextlib/libpng/png.c-668-#endif /* PNG_TIME_RFC1123_SUPPORTED */\nextlib/libpng/png.c-669-\nextlib/libpng/png.c-670-#if 0\nextlib/libpng/pnggccrd.c-5090-       png_warning(png_ptr, \"asm_flags may not have been initialized\");\nextlib/libpng/pnggccrd.c-5091-#endif\nextlib/libpng/pnggccrd.c-5092-       png_mmx_support();\nextlib/libpng/pnggccrd.c-5093-   }\nextlib/libpng/pnggccrd.c-5094-#endif /* PNG_ASSEMBLER_CODE_SUPPORTED */\nextlib/libpng/pnggccrd.c-5095-\nextlib/libpng/pnggccrd.c-5096-#ifdef PNG_DEBUG\nextlib/libpng/pnggccrd.c-5097-   png_debug(1, \"in png_read_filter_row (pnggccrd.c)\\n\");\nextlib/libpng/pnggccrd.c-5098-   switch (filter)\nextlib/libpng/pnggccrd.c-5099-   {"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c",
      "sprintf_line": 5100,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5101-         break;"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c:5100:      case 0: sprintf(filnm, \"none\");\nextlib/libpng/pnggccrd.c-5101-         break;"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c",
      "sprintf_line": 5102,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5103-#if defined(PNG_ASSEMBLER_CODE_SUPPORTED) && defined(PNG_THREAD_UNSAFE_OK)",
        "extlib/libpng/pnggccrd.c-5104-#if !defined(PNG_1_0_X)"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c:5102:      case 1: sprintf(filnm, \"sub-%s\",\nextlib/libpng/pnggccrd.c-5103-#if defined(PNG_ASSEMBLER_CODE_SUPPORTED) && defined(PNG_THREAD_UNSAFE_OK)\nextlib/libpng/pnggccrd.c-5104-#if !defined(PNG_1_0_X)"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c-5105-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_SUB)? \"MMX\" ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5106-#endif",
        "extlib/libpng/pnggccrd.c-5107-#endif",
        "extlib/libpng/pnggccrd.c-5108-\"x86\");",
        "extlib/libpng/pnggccrd.c-5109-         break;"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c-5105-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_SUB)? \"MMX\" : \nextlib/libpng/pnggccrd.c-5106-#endif\nextlib/libpng/pnggccrd.c-5107-#endif\nextlib/libpng/pnggccrd.c-5108-\"x86\");\nextlib/libpng/pnggccrd.c-5109-         break;"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c",
      "sprintf_line": 5110,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5111-#ifdef PNG_ASSEMBLER_CODE_SUPPORTED",
        "extlib/libpng/pnggccrd.c-5112-#if !defined(PNG_1_0_X)"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c:5110:      case 2: sprintf(filnm, \"up-%s\",\nextlib/libpng/pnggccrd.c-5111-#ifdef PNG_ASSEMBLER_CODE_SUPPORTED\nextlib/libpng/pnggccrd.c-5112-#if !defined(PNG_1_0_X)"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c-5113-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_UP)? \"MMX\" ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5114-#endif",
        "extlib/libpng/pnggccrd.c-5115-#endif",
        "extlib/libpng/pnggccrd.c-5116- \"x86\");",
        "extlib/libpng/pnggccrd.c-5117-         break;"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c-5113-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_UP)? \"MMX\" :\nextlib/libpng/pnggccrd.c-5114-#endif\nextlib/libpng/pnggccrd.c-5115-#endif\nextlib/libpng/pnggccrd.c-5116- \"x86\");\nextlib/libpng/pnggccrd.c-5117-         break;"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c",
      "sprintf_line": 5118,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5119-#if defined(PNG_ASSEMBLER_CODE_SUPPORTED) && defined(PNG_THREAD_UNSAFE_OK)",
        "extlib/libpng/pnggccrd.c-5120-#if !defined(PNG_1_0_X)"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c:5118:      case 3: sprintf(filnm, \"avg-%s\",\nextlib/libpng/pnggccrd.c-5119-#if defined(PNG_ASSEMBLER_CODE_SUPPORTED) && defined(PNG_THREAD_UNSAFE_OK)\nextlib/libpng/pnggccrd.c-5120-#if !defined(PNG_1_0_X)"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c-5121-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_AVG)? \"MMX\" ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5122-#endif",
        "extlib/libpng/pnggccrd.c-5123-#endif",
        "extlib/libpng/pnggccrd.c-5124- \"x86\");",
        "extlib/libpng/pnggccrd.c-5125-         break;"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c-5121-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_AVG)? \"MMX\" :\nextlib/libpng/pnggccrd.c-5122-#endif\nextlib/libpng/pnggccrd.c-5123-#endif\nextlib/libpng/pnggccrd.c-5124- \"x86\");\nextlib/libpng/pnggccrd.c-5125-         break;"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c",
      "sprintf_line": 5126,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5127-#if defined(PNG_ASSEMBLER_CODE_SUPPORTED) && defined(PNG_THREAD_UNSAFE_OK)",
        "extlib/libpng/pnggccrd.c-5128-#if !defined(PNG_1_0_X)"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c:5126:      case 4: sprintf(filnm, \"Paeth-%s\",\nextlib/libpng/pnggccrd.c-5127-#if defined(PNG_ASSEMBLER_CODE_SUPPORTED) && defined(PNG_THREAD_UNSAFE_OK)\nextlib/libpng/pnggccrd.c-5128-#if !defined(PNG_1_0_X)"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c-5129-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_PAETH)? \"MMX\"",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5130-#endif",
        "extlib/libpng/pnggccrd.c-5131-#endif",
        "extlib/libpng/pnggccrd.c-5132-\"x86\");",
        "extlib/libpng/pnggccrd.c-5133-         break;"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c-5129-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_PAETH)? \"MMX\":\nextlib/libpng/pnggccrd.c-5130-#endif\nextlib/libpng/pnggccrd.c-5131-#endif\nextlib/libpng/pnggccrd.c-5132-\"x86\");\nextlib/libpng/pnggccrd.c-5133-         break;"
    },
    {
      "file_path": "extlib/libpng/pnggccrd.c",
      "sprintf_line": 5134,
      "context_lines": [
        "extlib/libpng/pnggccrd.c-5135-         break;",
        "extlib/libpng/pnggccrd.c-5136-   }",
        "extlib/libpng/pnggccrd.c-5137-   png_debug2(0, \"row_number=%5ld, %5s, \", png_ptr->row_number, filnm);",
        "extlib/libpng/pnggccrd.c-5138-   png_debug1(0, \"row=0x%08lx, \", (unsigned long)row);",
        "extlib/libpng/pnggccrd.c-5139-   png_debug2(0, \"pixdepth=%2d, bytes=%d, \", (int)row_info->pixel_depth,",
        "extlib/libpng/pnggccrd.c-5140-      (int)((row_info->pixel_depth + 7) >> 3));",
        "extlib/libpng/pnggccrd.c-5141-   png_debug1(0,\"rowbytes=%8ld\\n\", row_info->rowbytes);",
        "extlib/libpng/pnggccrd.c-5142-#endif /* PNG_DEBUG */",
        "extlib/libpng/pnggccrd.c-5143-",
        "extlib/libpng/pnggccrd.c-5144-   switch (filter)",
        "extlib/libpng/pngread.c-108-      * only check the first digit.",
        "extlib/libpng/pngread.c-109-      */",
        "extlib/libpng/pngread.c-110-     if (user_png_ver == NULL || user_png_ver[0] != png_libpng_ver[0] ||",
        "extlib/libpng/pngread.c-111-         (user_png_ver[0] == '1' && user_png_ver[2] != png_libpng_ver[2]) ||",
        "extlib/libpng/pngread.c-112-         (user_png_ver[0] == '0' && user_png_ver[2] < '9'))",
        "extlib/libpng/pngread.c-113-     {",
        "extlib/libpng/pngread.c-114-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngread.c-115-        char msg[80];",
        "extlib/libpng/pngread.c-116-        if (user_png_ver)",
        "extlib/libpng/pngread.c-117-        {"
      ],
      "raw_content": "extlib/libpng/pnggccrd.c:5134:      default: sprintf(filnm, \"unknw\");\nextlib/libpng/pnggccrd.c-5135-         break;\nextlib/libpng/pnggccrd.c-5136-   }\nextlib/libpng/pnggccrd.c-5137-   png_debug2(0, \"row_number=%5ld, %5s, \", png_ptr->row_number, filnm);\nextlib/libpng/pnggccrd.c-5138-   png_debug1(0, \"row=0x%08lx, \", (unsigned long)row);\nextlib/libpng/pnggccrd.c-5139-   png_debug2(0, \"pixdepth=%2d, bytes=%d, \", (int)row_info->pixel_depth,\nextlib/libpng/pnggccrd.c-5140-      (int)((row_info->pixel_depth + 7) >> 3));\nextlib/libpng/pnggccrd.c-5141-   png_debug1(0,\"rowbytes=%8ld\\n\", row_info->rowbytes);\nextlib/libpng/pnggccrd.c-5142-#endif /* PNG_DEBUG */\nextlib/libpng/pnggccrd.c-5143-\nextlib/libpng/pnggccrd.c-5144-   switch (filter)\nextlib/libpng/pngread.c-108-      * only check the first digit.\nextlib/libpng/pngread.c-109-      */\nextlib/libpng/pngread.c-110-     if (user_png_ver == NULL || user_png_ver[0] != png_libpng_ver[0] ||\nextlib/libpng/pngread.c-111-         (user_png_ver[0] == '1' && user_png_ver[2] != png_libpng_ver[2]) ||\nextlib/libpng/pngread.c-112-         (user_png_ver[0] == '0' && user_png_ver[2] < '9'))\nextlib/libpng/pngread.c-113-     {\nextlib/libpng/pngread.c-114-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngread.c-115-        char msg[80];\nextlib/libpng/pngread.c-116-        if (user_png_ver)\nextlib/libpng/pngread.c-117-        {"
    },
    {
      "file_path": "extlib/libpng/pngread.c",
      "sprintf_line": 118,
      "context_lines": [
        "extlib/libpng/pngread.c-119-             user_png_ver);",
        "extlib/libpng/pngread.c-120-          png_warning(png_ptr, msg);",
        "extlib/libpng/pngread.c-121-        }"
      ],
      "raw_content": "extlib/libpng/pngread.c:118:          sprintf(msg, \"Application was compiled with png.h from libpng-%.20s\",\nextlib/libpng/pngread.c-119-             user_png_ver);\nextlib/libpng/pngread.c-120-          png_warning(png_ptr, msg);\nextlib/libpng/pngread.c-121-        }"
    },
    {
      "file_path": "extlib/libpng/pngread.c",
      "sprintf_line": 122,
      "context_lines": [
        "extlib/libpng/pngread.c-123-           png_libpng_ver);",
        "extlib/libpng/pngread.c-124-        png_warning(png_ptr, msg);",
        "extlib/libpng/pngread.c-125-#endif",
        "extlib/libpng/pngread.c-126-#ifdef PNG_ERROR_NUMBERS_SUPPORTED",
        "extlib/libpng/pngread.c-127-        png_ptr->flags=0;",
        "extlib/libpng/pngread.c-128-#endif",
        "extlib/libpng/pngread.c-129-        png_error(png_ptr,",
        "extlib/libpng/pngread.c-130-           \"Incompatible libpng version in application and library\");",
        "extlib/libpng/pngread.c-131-     }",
        "extlib/libpng/pngread.c-132-   }",
        "extlib/libpng/pngread.c-188-{",
        "extlib/libpng/pngread.c-189-   /* We only come here via pre-1.0.12-compiled applications */",
        "extlib/libpng/pngread.c-190-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngread.c-191-   if(png_sizeof(png_struct) > png_struct_size || ",
        "extlib/libpng/pngread.c-192-      png_sizeof(png_info) > png_info_size)",
        "extlib/libpng/pngread.c-193-   {",
        "extlib/libpng/pngread.c-194-      char msg[80];",
        "extlib/libpng/pngread.c-195-      png_ptr->warning_fn=NULL;",
        "extlib/libpng/pngread.c-196-      if (user_png_ver)",
        "extlib/libpng/pngread.c-197-      {"
      ],
      "raw_content": "extlib/libpng/pngread.c:122:        sprintf(msg, \"Application  is  running with png.c from libpng-%.20s\",\nextlib/libpng/pngread.c-123-           png_libpng_ver);\nextlib/libpng/pngread.c-124-        png_warning(png_ptr, msg);\nextlib/libpng/pngread.c-125-#endif\nextlib/libpng/pngread.c-126-#ifdef PNG_ERROR_NUMBERS_SUPPORTED\nextlib/libpng/pngread.c-127-        png_ptr->flags=0;\nextlib/libpng/pngread.c-128-#endif\nextlib/libpng/pngread.c-129-        png_error(png_ptr,\nextlib/libpng/pngread.c-130-           \"Incompatible libpng version in application and library\");\nextlib/libpng/pngread.c-131-     }\nextlib/libpng/pngread.c-132-   }\nextlib/libpng/pngread.c-188-{\nextlib/libpng/pngread.c-189-   /* We only come here via pre-1.0.12-compiled applications */\nextlib/libpng/pngread.c-190-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngread.c-191-   if(png_sizeof(png_struct) > png_struct_size || \nextlib/libpng/pngread.c-192-      png_sizeof(png_info) > png_info_size)\nextlib/libpng/pngread.c-193-   {\nextlib/libpng/pngread.c-194-      char msg[80];\nextlib/libpng/pngread.c-195-      png_ptr->warning_fn=NULL;\nextlib/libpng/pngread.c-196-      if (user_png_ver)\nextlib/libpng/pngread.c-197-      {"
    },
    {
      "file_path": "extlib/libpng/pngread.c",
      "sprintf_line": 198,
      "context_lines": [
        "extlib/libpng/pngread.c-199-           user_png_ver);",
        "extlib/libpng/pngread.c-200-        png_warning(png_ptr, msg);",
        "extlib/libpng/pngread.c-201-      }"
      ],
      "raw_content": "extlib/libpng/pngread.c:198:        sprintf(msg, \"Application was compiled with png.h from libpng-%.20s\",\nextlib/libpng/pngread.c-199-           user_png_ver);\nextlib/libpng/pngread.c-200-        png_warning(png_ptr, msg);\nextlib/libpng/pngread.c-201-      }"
    },
    {
      "file_path": "extlib/libpng/pngread.c",
      "sprintf_line": 202,
      "context_lines": [
        "extlib/libpng/pngread.c-203-         png_libpng_ver);",
        "extlib/libpng/pngread.c-204-      png_warning(png_ptr, msg);",
        "extlib/libpng/pngread.c-205-   }",
        "extlib/libpng/pngread.c-206-#endif",
        "extlib/libpng/pngread.c-207-   if(png_sizeof(png_struct) > png_struct_size)",
        "extlib/libpng/pngread.c-208-     {",
        "extlib/libpng/pngread.c-209-       png_ptr->error_fn=NULL;",
        "extlib/libpng/pngread.c-210-#ifdef PNG_ERROR_NUMBERS_SUPPORTED",
        "extlib/libpng/pngread.c-211-       png_ptr->flags=0;",
        "extlib/libpng/pngread.c-212-#endif",
        "extlib/libpng/pngrtran.c-1172-void /* PRIVATE */",
        "extlib/libpng/pngrtran.c-1173-png_do_read_transformations(png_structp png_ptr)",
        "extlib/libpng/pngrtran.c-1174-{",
        "extlib/libpng/pngrtran.c-1175-   png_debug(1, \"in png_do_read_transformations\\n\");",
        "extlib/libpng/pngrtran.c-1176-#if !defined(PNG_USELESS_TESTS_SUPPORTED)",
        "extlib/libpng/pngrtran.c-1177-   if (png_ptr->row_buf == NULL)",
        "extlib/libpng/pngrtran.c-1178-   {",
        "extlib/libpng/pngrtran.c-1179-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngrtran.c-1180-      char msg[50];",
        "extlib/libpng/pngrtran.c-1181-"
      ],
      "raw_content": "extlib/libpng/pngread.c:202:      sprintf(msg, \"Application  is  running with png.c from libpng-%.20s\",\nextlib/libpng/pngread.c-203-         png_libpng_ver);\nextlib/libpng/pngread.c-204-      png_warning(png_ptr, msg);\nextlib/libpng/pngread.c-205-   }\nextlib/libpng/pngread.c-206-#endif\nextlib/libpng/pngread.c-207-   if(png_sizeof(png_struct) > png_struct_size)\nextlib/libpng/pngread.c-208-     {\nextlib/libpng/pngread.c-209-       png_ptr->error_fn=NULL;\nextlib/libpng/pngread.c-210-#ifdef PNG_ERROR_NUMBERS_SUPPORTED\nextlib/libpng/pngread.c-211-       png_ptr->flags=0;\nextlib/libpng/pngread.c-212-#endif\nextlib/libpng/pngrtran.c-1172-void /* PRIVATE */\nextlib/libpng/pngrtran.c-1173-png_do_read_transformations(png_structp png_ptr)\nextlib/libpng/pngrtran.c-1174-{\nextlib/libpng/pngrtran.c-1175-   png_debug(1, \"in png_do_read_transformations\\n\");\nextlib/libpng/pngrtran.c-1176-#if !defined(PNG_USELESS_TESTS_SUPPORTED)\nextlib/libpng/pngrtran.c-1177-   if (png_ptr->row_buf == NULL)\nextlib/libpng/pngrtran.c-1178-   {\nextlib/libpng/pngrtran.c-1179-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngrtran.c-1180-      char msg[50];\nextlib/libpng/pngrtran.c-1181-"
    },
    {
      "file_path": "extlib/libpng/pngrtran.c",
      "sprintf_line": 1182,
      "context_lines": [
        "extlib/libpng/pngrtran.c-1183-         png_ptr->pass);",
        "extlib/libpng/pngrtran.c-1184-      png_error(png_ptr, msg);",
        "extlib/libpng/pngrtran.c-1185-#else",
        "extlib/libpng/pngrtran.c-1186-      png_error(png_ptr, \"NULL row buffer\");",
        "extlib/libpng/pngrtran.c-1187-#endif",
        "extlib/libpng/pngrtran.c-1188-   }",
        "extlib/libpng/pngrtran.c-1189-#endif",
        "extlib/libpng/pngrtran.c-1190-",
        "extlib/libpng/pngrtran.c-1191-#if defined(PNG_READ_EXPAND_SUPPORTED)",
        "extlib/libpng/pngrtran.c-1192-   if (png_ptr->transformations & PNG_EXPAND)",
        "extlib/libpng/pngrutil.c-271-               png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;",
        "extlib/libpng/pngrutil.c-272-            }",
        "extlib/libpng/pngrutil.c-273-         }",
        "extlib/libpng/pngrutil.c-274-      }",
        "extlib/libpng/pngrutil.c-275-      if (ret != Z_STREAM_END)",
        "extlib/libpng/pngrutil.c-276-      {",
        "extlib/libpng/pngrutil.c-277-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngrutil.c-278-         char umsg[50];",
        "extlib/libpng/pngrutil.c-279-",
        "extlib/libpng/pngrutil.c-280-         if (ret == Z_BUF_ERROR)"
      ],
      "raw_content": "extlib/libpng/pngrtran.c:1182:      sprintf(msg, \"NULL row buffer for row %ld, pass %d\", png_ptr->row_number,\nextlib/libpng/pngrtran.c-1183-         png_ptr->pass);\nextlib/libpng/pngrtran.c-1184-      png_error(png_ptr, msg);\nextlib/libpng/pngrtran.c-1185-#else\nextlib/libpng/pngrtran.c-1186-      png_error(png_ptr, \"NULL row buffer\");\nextlib/libpng/pngrtran.c-1187-#endif\nextlib/libpng/pngrtran.c-1188-   }\nextlib/libpng/pngrtran.c-1189-#endif\nextlib/libpng/pngrtran.c-1190-\nextlib/libpng/pngrtran.c-1191-#if defined(PNG_READ_EXPAND_SUPPORTED)\nextlib/libpng/pngrtran.c-1192-   if (png_ptr->transformations & PNG_EXPAND)\nextlib/libpng/pngrutil.c-271-               png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;\nextlib/libpng/pngrutil.c-272-            }\nextlib/libpng/pngrutil.c-273-         }\nextlib/libpng/pngrutil.c-274-      }\nextlib/libpng/pngrutil.c-275-      if (ret != Z_STREAM_END)\nextlib/libpng/pngrutil.c-276-      {\nextlib/libpng/pngrutil.c-277-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngrutil.c-278-         char umsg[50];\nextlib/libpng/pngrutil.c-279-\nextlib/libpng/pngrutil.c-280-         if (ret == Z_BUF_ERROR)"
    },
    {
      "file_path": "extlib/libpng/pngrutil.c",
      "sprintf_line": 281,
      "context_lines": [
        "extlib/libpng/pngrutil.c-282-                png_ptr->chunk_name);",
        "extlib/libpng/pngrutil.c-283-         else if (ret == Z_DATA_ERROR)"
      ],
      "raw_content": "extlib/libpng/pngrutil.c:281:            sprintf(umsg,\"Buffer error in compressed datastream in %s chunk\",\nextlib/libpng/pngrutil.c-282-                png_ptr->chunk_name);\nextlib/libpng/pngrutil.c-283-         else if (ret == Z_DATA_ERROR)"
    },
    {
      "file_path": "extlib/libpng/pngrutil.c",
      "sprintf_line": 284,
      "context_lines": [
        "extlib/libpng/pngrutil.c-285-                png_ptr->chunk_name);",
        "extlib/libpng/pngrutil.c-286-         else"
      ],
      "raw_content": "extlib/libpng/pngrutil.c:284:            sprintf(umsg,\"Data error in compressed datastream in %s chunk\",\nextlib/libpng/pngrutil.c-285-                png_ptr->chunk_name);\nextlib/libpng/pngrutil.c-286-         else"
    },
    {
      "file_path": "extlib/libpng/pngrutil.c",
      "sprintf_line": 287,
      "context_lines": [
        "extlib/libpng/pngrutil.c-288-                png_ptr->chunk_name);",
        "extlib/libpng/pngrutil.c-289-         png_warning(png_ptr, umsg);",
        "extlib/libpng/pngrutil.c-290-#else",
        "extlib/libpng/pngrutil.c-291-         png_warning(png_ptr,",
        "extlib/libpng/pngrutil.c-292-            \"Incomplete compressed datastream in chunk other than IDAT\");",
        "extlib/libpng/pngrutil.c-293-#endif",
        "extlib/libpng/pngrutil.c-294-         text_size=prefix_size;",
        "extlib/libpng/pngrutil.c-295-         if (text ==  NULL)",
        "extlib/libpng/pngrutil.c-296-         {",
        "extlib/libpng/pngrutil.c-297-            text = (png_charp)png_malloc_warn(png_ptr, text_size+1);",
        "extlib/libpng/pngrutil.c-310-",
        "extlib/libpng/pngrutil.c-311-      png_free(png_ptr, chunkdata);",
        "extlib/libpng/pngrutil.c-312-      chunkdata = text;",
        "extlib/libpng/pngrutil.c-313-      *newlength=text_size;",
        "extlib/libpng/pngrutil.c-314-   }",
        "extlib/libpng/pngrutil.c-315-   else /* if (comp_type != PNG_COMPRESSION_TYPE_BASE) */",
        "extlib/libpng/pngrutil.c-316-   {",
        "extlib/libpng/pngrutil.c-317-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngrutil.c-318-      char umsg[50];",
        "extlib/libpng/pngrutil.c-319-"
      ],
      "raw_content": "extlib/libpng/pngrutil.c:287:            sprintf(umsg,\"Incomplete compressed datastream in %s chunk\",\nextlib/libpng/pngrutil.c-288-                png_ptr->chunk_name);\nextlib/libpng/pngrutil.c-289-         png_warning(png_ptr, umsg);\nextlib/libpng/pngrutil.c-290-#else\nextlib/libpng/pngrutil.c-291-         png_warning(png_ptr,\nextlib/libpng/pngrutil.c-292-            \"Incomplete compressed datastream in chunk other than IDAT\");\nextlib/libpng/pngrutil.c-293-#endif\nextlib/libpng/pngrutil.c-294-         text_size=prefix_size;\nextlib/libpng/pngrutil.c-295-         if (text ==  NULL)\nextlib/libpng/pngrutil.c-296-         {\nextlib/libpng/pngrutil.c-297-            text = (png_charp)png_malloc_warn(png_ptr, text_size+1);\nextlib/libpng/pngrutil.c-310-\nextlib/libpng/pngrutil.c-311-      png_free(png_ptr, chunkdata);\nextlib/libpng/pngrutil.c-312-      chunkdata = text;\nextlib/libpng/pngrutil.c-313-      *newlength=text_size;\nextlib/libpng/pngrutil.c-314-   }\nextlib/libpng/pngrutil.c-315-   else /* if (comp_type != PNG_COMPRESSION_TYPE_BASE) */\nextlib/libpng/pngrutil.c-316-   {\nextlib/libpng/pngrutil.c-317-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngrutil.c-318-      char umsg[50];\nextlib/libpng/pngrutil.c-319-"
    },
    {
      "file_path": "extlib/libpng/pngrutil.c",
      "sprintf_line": 320,
      "context_lines": [
        "extlib/libpng/pngrutil.c-321-      png_warning(png_ptr, umsg);",
        "extlib/libpng/pngrutil.c-322-#else",
        "extlib/libpng/pngrutil.c-323-      png_warning(png_ptr, \"Unknown zTXt compression type\");",
        "extlib/libpng/pngrutil.c-324-#endif",
        "extlib/libpng/pngrutil.c-325-",
        "extlib/libpng/pngrutil.c-326-      *(chunkdata + prefix_size) = 0x00;",
        "extlib/libpng/pngrutil.c-327-      *newlength=prefix_size;",
        "extlib/libpng/pngrutil.c-328-   }",
        "extlib/libpng/pngrutil.c-329-",
        "extlib/libpng/pngrutil.c-330-   return chunkdata;",
        "extlib/libpng/pngvcrd.c-3685-       /* this should have happened in png_init_mmx_flags() already */",
        "extlib/libpng/pngvcrd.c-3686-       png_warning(png_ptr, \"asm_flags may not have been initialized\");",
        "extlib/libpng/pngvcrd.c-3687-#endif",
        "extlib/libpng/pngvcrd.c-3688-       png_mmx_support();",
        "extlib/libpng/pngvcrd.c-3689-   }",
        "extlib/libpng/pngvcrd.c-3690-",
        "extlib/libpng/pngvcrd.c-3691-#ifdef PNG_DEBUG",
        "extlib/libpng/pngvcrd.c-3692-   png_debug(1, \"in png_read_filter_row\\n\");",
        "extlib/libpng/pngvcrd.c-3693-   switch (filter)",
        "extlib/libpng/pngvcrd.c-3694-   {"
      ],
      "raw_content": "extlib/libpng/pngrutil.c:320:      sprintf(umsg, \"Unknown zTXt compression type %d\", comp_type);\nextlib/libpng/pngrutil.c-321-      png_warning(png_ptr, umsg);\nextlib/libpng/pngrutil.c-322-#else\nextlib/libpng/pngrutil.c-323-      png_warning(png_ptr, \"Unknown zTXt compression type\");\nextlib/libpng/pngrutil.c-324-#endif\nextlib/libpng/pngrutil.c-325-\nextlib/libpng/pngrutil.c-326-      *(chunkdata + prefix_size) = 0x00;\nextlib/libpng/pngrutil.c-327-      *newlength=prefix_size;\nextlib/libpng/pngrutil.c-328-   }\nextlib/libpng/pngrutil.c-329-\nextlib/libpng/pngrutil.c-330-   return chunkdata;\nextlib/libpng/pngvcrd.c-3685-       /* this should have happened in png_init_mmx_flags() already */\nextlib/libpng/pngvcrd.c-3686-       png_warning(png_ptr, \"asm_flags may not have been initialized\");\nextlib/libpng/pngvcrd.c-3687-#endif\nextlib/libpng/pngvcrd.c-3688-       png_mmx_support();\nextlib/libpng/pngvcrd.c-3689-   }\nextlib/libpng/pngvcrd.c-3690-\nextlib/libpng/pngvcrd.c-3691-#ifdef PNG_DEBUG\nextlib/libpng/pngvcrd.c-3692-   png_debug(1, \"in png_read_filter_row\\n\");\nextlib/libpng/pngvcrd.c-3693-   switch (filter)\nextlib/libpng/pngvcrd.c-3694-   {"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3695,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3696-         break;",
        "extlib/libpng/pngvcrd.c-3697-#if !defined(PNG_1_0_X)"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c:3695:      case 0: sprintf(filnm, \"none\");\nextlib/libpng/pngvcrd.c-3696-         break;\nextlib/libpng/pngvcrd.c-3697-#if !defined(PNG_1_0_X)"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3698,
      "context_lines": [],
      "raw_content": "extlib/libpng/pngvcrd.c:3698:      case 1: sprintf(filnm, \"sub-%s\","
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c-3699-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_SUB)? \"MMX\" ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3700-         break;"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c-3699-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_SUB)? \"MMX\" : \"x86\");\nextlib/libpng/pngvcrd.c-3700-         break;"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3701,
      "context_lines": [],
      "raw_content": "extlib/libpng/pngvcrd.c:3701:      case 2: sprintf(filnm, \"up-%s\","
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c-3702-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_UP)? \"MMX\" ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3703-         break;"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c-3702-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_UP)? \"MMX\" : \"x86\");\nextlib/libpng/pngvcrd.c-3703-         break;"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3704,
      "context_lines": [],
      "raw_content": "extlib/libpng/pngvcrd.c:3704:      case 3: sprintf(filnm, \"avg-%s\","
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c-3705-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_AVG)? \"MMX\" ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3706-         break;"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c-3705-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_AVG)? \"MMX\" : \"x86\");\nextlib/libpng/pngvcrd.c-3706-         break;"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3707,
      "context_lines": [],
      "raw_content": "extlib/libpng/pngvcrd.c:3707:      case 4: sprintf(filnm, \"Paeth-%s\","
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c-3708-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_PAETH)? \"MMX\"",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3709-         break;",
        "extlib/libpng/pngvcrd.c-3710-#else"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c-3708-        (png_ptr->asm_flags & PNG_ASM_FLAG_MMX_READ_FILTER_PAETH)? \"MMX\":\"x86\");\nextlib/libpng/pngvcrd.c-3709-         break;\nextlib/libpng/pngvcrd.c-3710-#else"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3711,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3712-         break;"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c:3711:      case 1: sprintf(filnm, \"sub\");\nextlib/libpng/pngvcrd.c-3712-         break;"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3713,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3714-         break;"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c:3713:      case 2: sprintf(filnm, \"up\");\nextlib/libpng/pngvcrd.c-3714-         break;"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3715,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3716-         break;"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c:3715:      case 3: sprintf(filnm, \"avg\");\nextlib/libpng/pngvcrd.c-3716-         break;"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3717,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3718-         break;",
        "extlib/libpng/pngvcrd.c-3719-#endif"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c:3717:      case 4: sprintf(filnm, \"Paeth\");\nextlib/libpng/pngvcrd.c-3718-         break;\nextlib/libpng/pngvcrd.c-3719-#endif"
    },
    {
      "file_path": "extlib/libpng/pngvcrd.c",
      "sprintf_line": 3720,
      "context_lines": [
        "extlib/libpng/pngvcrd.c-3721-         break;",
        "extlib/libpng/pngvcrd.c-3722-   }",
        "extlib/libpng/pngvcrd.c-3723-   png_debug2(0,\"row=%5d, %s, \", png_ptr->row_number, filnm);",
        "extlib/libpng/pngvcrd.c-3724-   png_debug2(0, \"pd=%2d, b=%d, \", (int)row_info->pixel_depth,",
        "extlib/libpng/pngvcrd.c-3725-      (int)((row_info->pixel_depth + 7) >> 3));",
        "extlib/libpng/pngvcrd.c-3726-   png_debug1(0,\"len=%8d, \", row_info->rowbytes);",
        "extlib/libpng/pngvcrd.c-3727-#endif /* PNG_DEBUG */",
        "extlib/libpng/pngvcrd.c-3728-",
        "extlib/libpng/pngvcrd.c-3729-   switch (filter)",
        "extlib/libpng/pngvcrd.c-3730-   {",
        "extlib/libpng/pngwrite.c-501-      * only check the first digit.",
        "extlib/libpng/pngwrite.c-502-      */",
        "extlib/libpng/pngwrite.c-503-     if (user_png_ver == NULL || user_png_ver[0] != png_libpng_ver[0] ||",
        "extlib/libpng/pngwrite.c-504-         (user_png_ver[0] == '1' && user_png_ver[2] != png_libpng_ver[2]) ||",
        "extlib/libpng/pngwrite.c-505-         (user_png_ver[0] == '0' && user_png_ver[2] < '9'))",
        "extlib/libpng/pngwrite.c-506-     {",
        "extlib/libpng/pngwrite.c-507-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngwrite.c-508-        char msg[80];",
        "extlib/libpng/pngwrite.c-509-        if (user_png_ver)",
        "extlib/libpng/pngwrite.c-510-        {"
      ],
      "raw_content": "extlib/libpng/pngvcrd.c:3720:      default: sprintf(filnm, \"unknw\");\nextlib/libpng/pngvcrd.c-3721-         break;\nextlib/libpng/pngvcrd.c-3722-   }\nextlib/libpng/pngvcrd.c-3723-   png_debug2(0,\"row=%5d, %s, \", png_ptr->row_number, filnm);\nextlib/libpng/pngvcrd.c-3724-   png_debug2(0, \"pd=%2d, b=%d, \", (int)row_info->pixel_depth,\nextlib/libpng/pngvcrd.c-3725-      (int)((row_info->pixel_depth + 7) >> 3));\nextlib/libpng/pngvcrd.c-3726-   png_debug1(0,\"len=%8d, \", row_info->rowbytes);\nextlib/libpng/pngvcrd.c-3727-#endif /* PNG_DEBUG */\nextlib/libpng/pngvcrd.c-3728-\nextlib/libpng/pngvcrd.c-3729-   switch (filter)\nextlib/libpng/pngvcrd.c-3730-   {\nextlib/libpng/pngwrite.c-501-      * only check the first digit.\nextlib/libpng/pngwrite.c-502-      */\nextlib/libpng/pngwrite.c-503-     if (user_png_ver == NULL || user_png_ver[0] != png_libpng_ver[0] ||\nextlib/libpng/pngwrite.c-504-         (user_png_ver[0] == '1' && user_png_ver[2] != png_libpng_ver[2]) ||\nextlib/libpng/pngwrite.c-505-         (user_png_ver[0] == '0' && user_png_ver[2] < '9'))\nextlib/libpng/pngwrite.c-506-     {\nextlib/libpng/pngwrite.c-507-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngwrite.c-508-        char msg[80];\nextlib/libpng/pngwrite.c-509-        if (user_png_ver)\nextlib/libpng/pngwrite.c-510-        {"
    },
    {
      "file_path": "extlib/libpng/pngwrite.c",
      "sprintf_line": 511,
      "context_lines": [
        "extlib/libpng/pngwrite.c-512-             user_png_ver);",
        "extlib/libpng/pngwrite.c-513-          png_warning(png_ptr, msg);",
        "extlib/libpng/pngwrite.c-514-        }"
      ],
      "raw_content": "extlib/libpng/pngwrite.c:511:          sprintf(msg, \"Application was compiled with png.h from libpng-%.20s\",\nextlib/libpng/pngwrite.c-512-             user_png_ver);\nextlib/libpng/pngwrite.c-513-          png_warning(png_ptr, msg);\nextlib/libpng/pngwrite.c-514-        }"
    },
    {
      "file_path": "extlib/libpng/pngwrite.c",
      "sprintf_line": 515,
      "context_lines": [
        "extlib/libpng/pngwrite.c-516-           png_libpng_ver);",
        "extlib/libpng/pngwrite.c-517-        png_warning(png_ptr, msg);",
        "extlib/libpng/pngwrite.c-518-#endif",
        "extlib/libpng/pngwrite.c-519-#ifdef PNG_ERROR_NUMBERS_SUPPORTED",
        "extlib/libpng/pngwrite.c-520-        png_ptr->flags=0;",
        "extlib/libpng/pngwrite.c-521-#endif",
        "extlib/libpng/pngwrite.c-522-        png_error(png_ptr,",
        "extlib/libpng/pngwrite.c-523-           \"Incompatible libpng version in application and library\");",
        "extlib/libpng/pngwrite.c-524-     }",
        "extlib/libpng/pngwrite.c-525-   }",
        "extlib/libpng/pngwrite.c-568-{",
        "extlib/libpng/pngwrite.c-569-   /* We only come here via pre-1.0.12-compiled applications */",
        "extlib/libpng/pngwrite.c-570-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngwrite.c-571-   if(png_sizeof(png_struct) > png_struct_size ||",
        "extlib/libpng/pngwrite.c-572-      png_sizeof(png_info) > png_info_size)",
        "extlib/libpng/pngwrite.c-573-   {",
        "extlib/libpng/pngwrite.c-574-      char msg[80];",
        "extlib/libpng/pngwrite.c-575-      png_ptr->warning_fn=NULL;",
        "extlib/libpng/pngwrite.c-576-      if (user_png_ver)",
        "extlib/libpng/pngwrite.c-577-      {"
      ],
      "raw_content": "extlib/libpng/pngwrite.c:515:        sprintf(msg, \"Application  is  running with png.c from libpng-%.20s\",\nextlib/libpng/pngwrite.c-516-           png_libpng_ver);\nextlib/libpng/pngwrite.c-517-        png_warning(png_ptr, msg);\nextlib/libpng/pngwrite.c-518-#endif\nextlib/libpng/pngwrite.c-519-#ifdef PNG_ERROR_NUMBERS_SUPPORTED\nextlib/libpng/pngwrite.c-520-        png_ptr->flags=0;\nextlib/libpng/pngwrite.c-521-#endif\nextlib/libpng/pngwrite.c-522-        png_error(png_ptr,\nextlib/libpng/pngwrite.c-523-           \"Incompatible libpng version in application and library\");\nextlib/libpng/pngwrite.c-524-     }\nextlib/libpng/pngwrite.c-525-   }\nextlib/libpng/pngwrite.c-568-{\nextlib/libpng/pngwrite.c-569-   /* We only come here via pre-1.0.12-compiled applications */\nextlib/libpng/pngwrite.c-570-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngwrite.c-571-   if(png_sizeof(png_struct) > png_struct_size ||\nextlib/libpng/pngwrite.c-572-      png_sizeof(png_info) > png_info_size)\nextlib/libpng/pngwrite.c-573-   {\nextlib/libpng/pngwrite.c-574-      char msg[80];\nextlib/libpng/pngwrite.c-575-      png_ptr->warning_fn=NULL;\nextlib/libpng/pngwrite.c-576-      if (user_png_ver)\nextlib/libpng/pngwrite.c-577-      {"
    },
    {
      "file_path": "extlib/libpng/pngwrite.c",
      "sprintf_line": 578,
      "context_lines": [
        "extlib/libpng/pngwrite.c-579-           user_png_ver);",
        "extlib/libpng/pngwrite.c-580-        png_warning(png_ptr, msg);",
        "extlib/libpng/pngwrite.c-581-      }"
      ],
      "raw_content": "extlib/libpng/pngwrite.c:578:        sprintf(msg, \"Application was compiled with png.h from libpng-%.20s\",\nextlib/libpng/pngwrite.c-579-           user_png_ver);\nextlib/libpng/pngwrite.c-580-        png_warning(png_ptr, msg);\nextlib/libpng/pngwrite.c-581-      }"
    },
    {
      "file_path": "extlib/libpng/pngwrite.c",
      "sprintf_line": 582,
      "context_lines": [
        "extlib/libpng/pngwrite.c-583-         png_libpng_ver);",
        "extlib/libpng/pngwrite.c-584-      png_warning(png_ptr, msg);",
        "extlib/libpng/pngwrite.c-585-   }",
        "extlib/libpng/pngwrite.c-586-#endif",
        "extlib/libpng/pngwrite.c-587-   if(png_sizeof(png_struct) > png_struct_size)",
        "extlib/libpng/pngwrite.c-588-     {",
        "extlib/libpng/pngwrite.c-589-       png_ptr->error_fn=NULL;",
        "extlib/libpng/pngwrite.c-590-#ifdef PNG_ERROR_NUMBERS_SUPPORTED",
        "extlib/libpng/pngwrite.c-591-       png_ptr->flags=0;",
        "extlib/libpng/pngwrite.c-592-#endif",
        "extlib/libpng/pngwutil.c-170-   {",
        "extlib/libpng/pngwutil.c-171-       comp->input = text;",
        "extlib/libpng/pngwutil.c-172-       comp->input_len = text_len;",
        "extlib/libpng/pngwutil.c-173-       return((int)text_len);",
        "extlib/libpng/pngwutil.c-174-   }",
        "extlib/libpng/pngwutil.c-175-",
        "extlib/libpng/pngwutil.c-176-   if (compression >= PNG_TEXT_COMPRESSION_LAST)",
        "extlib/libpng/pngwutil.c-177-   {",
        "extlib/libpng/pngwutil.c-178-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngwutil.c-179-      char msg[50];"
      ],
      "raw_content": "extlib/libpng/pngwrite.c:582:      sprintf(msg, \"Application  is  running with png.c from libpng-%.20s\",\nextlib/libpng/pngwrite.c-583-         png_libpng_ver);\nextlib/libpng/pngwrite.c-584-      png_warning(png_ptr, msg);\nextlib/libpng/pngwrite.c-585-   }\nextlib/libpng/pngwrite.c-586-#endif\nextlib/libpng/pngwrite.c-587-   if(png_sizeof(png_struct) > png_struct_size)\nextlib/libpng/pngwrite.c-588-     {\nextlib/libpng/pngwrite.c-589-       png_ptr->error_fn=NULL;\nextlib/libpng/pngwrite.c-590-#ifdef PNG_ERROR_NUMBERS_SUPPORTED\nextlib/libpng/pngwrite.c-591-       png_ptr->flags=0;\nextlib/libpng/pngwrite.c-592-#endif\nextlib/libpng/pngwutil.c-170-   {\nextlib/libpng/pngwutil.c-171-       comp->input = text;\nextlib/libpng/pngwutil.c-172-       comp->input_len = text_len;\nextlib/libpng/pngwutil.c-173-       return((int)text_len);\nextlib/libpng/pngwutil.c-174-   }\nextlib/libpng/pngwutil.c-175-\nextlib/libpng/pngwutil.c-176-   if (compression >= PNG_TEXT_COMPRESSION_LAST)\nextlib/libpng/pngwutil.c-177-   {\nextlib/libpng/pngwutil.c-178-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngwutil.c-179-      char msg[50];"
    },
    {
      "file_path": "extlib/libpng/pngwutil.c",
      "sprintf_line": 180,
      "context_lines": [
        "extlib/libpng/pngwutil.c-181-      png_warning(png_ptr, msg);",
        "extlib/libpng/pngwutil.c-182-#else",
        "extlib/libpng/pngwutil.c-183-      png_warning(png_ptr, \"Unknown compression type\");",
        "extlib/libpng/pngwutil.c-184-#endif",
        "extlib/libpng/pngwutil.c-185-   }",
        "extlib/libpng/pngwutil.c-186-",
        "extlib/libpng/pngwutil.c-187-   /* We can't write the chunk until we find out how much data we have,",
        "extlib/libpng/pngwutil.c-188-    * which means we need to run the compressor first and save the",
        "extlib/libpng/pngwutil.c-189-    * output.  This shouldn't be a problem, as the vast majority of",
        "extlib/libpng/pngwutil.c-190-    * comments should be reasonable, but we will set up an array of",
        "extlib/libpng/pngwutil.c-1197-   }",
        "extlib/libpng/pngwutil.c-1198-",
        "extlib/libpng/pngwutil.c-1199-   /* Replace non-printing characters with a blank and print a warning */",
        "extlib/libpng/pngwutil.c-1200-   for (kp = key, dp = *new_key; *kp != '\\0'; kp++, dp++)",
        "extlib/libpng/pngwutil.c-1201-   {",
        "extlib/libpng/pngwutil.c-1202-      if (*kp < 0x20 || (*kp > 0x7E && (png_byte)*kp < 0xA1))",
        "extlib/libpng/pngwutil.c-1203-      {",
        "extlib/libpng/pngwutil.c-1204-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)",
        "extlib/libpng/pngwutil.c-1205-         char msg[40];",
        "extlib/libpng/pngwutil.c-1206-"
      ],
      "raw_content": "extlib/libpng/pngwutil.c:180:      sprintf(msg, \"Unknown compression type %d\", compression);\nextlib/libpng/pngwutil.c-181-      png_warning(png_ptr, msg);\nextlib/libpng/pngwutil.c-182-#else\nextlib/libpng/pngwutil.c-183-      png_warning(png_ptr, \"Unknown compression type\");\nextlib/libpng/pngwutil.c-184-#endif\nextlib/libpng/pngwutil.c-185-   }\nextlib/libpng/pngwutil.c-186-\nextlib/libpng/pngwutil.c-187-   /* We can't write the chunk until we find out how much data we have,\nextlib/libpng/pngwutil.c-188-    * which means we need to run the compressor first and save the\nextlib/libpng/pngwutil.c-189-    * output.  This shouldn't be a problem, as the vast majority of\nextlib/libpng/pngwutil.c-190-    * comments should be reasonable, but we will set up an array of\nextlib/libpng/pngwutil.c-1197-   }\nextlib/libpng/pngwutil.c-1198-\nextlib/libpng/pngwutil.c-1199-   /* Replace non-printing characters with a blank and print a warning */\nextlib/libpng/pngwutil.c-1200-   for (kp = key, dp = *new_key; *kp != '\\0'; kp++, dp++)\nextlib/libpng/pngwutil.c-1201-   {\nextlib/libpng/pngwutil.c-1202-      if (*kp < 0x20 || (*kp > 0x7E && (png_byte)*kp < 0xA1))\nextlib/libpng/pngwutil.c-1203-      {\nextlib/libpng/pngwutil.c-1204-#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)\nextlib/libpng/pngwutil.c-1205-         char msg[40];\nextlib/libpng/pngwutil.c-1206-"
    },
    {
      "file_path": "extlib/libpng/pngwutil.c",
      "sprintf_line": 1207,
      "context_lines": [
        "extlib/libpng/pngwutil.c-1208-         png_warning(png_ptr, msg);",
        "extlib/libpng/pngwutil.c-1209-#else",
        "extlib/libpng/pngwutil.c-1210-         png_warning(png_ptr, \"invalid character in keyword\");",
        "extlib/libpng/pngwutil.c-1211-#endif",
        "extlib/libpng/pngwutil.c-1212-         *dp = ' ';",
        "extlib/libpng/pngwutil.c-1213-      }",
        "extlib/libpng/pngwutil.c-1214-      else",
        "extlib/libpng/pngwutil.c-1215-      {",
        "extlib/libpng/pngwutil.c-1216-         *dp = *kp;",
        "extlib/libpng/pngwutil.c-1217-      }",
        "extlib/libpng/pngwutil.c-1557-#ifdef PNG_USE_LOCAL_ARRAYS",
        "extlib/libpng/pngwutil.c-1558-   PNG_sCAL;",
        "extlib/libpng/pngwutil.c-1559-#endif",
        "extlib/libpng/pngwutil.c-1560-   png_size_t total_len;",
        "extlib/libpng/pngwutil.c-1561-   char wbuf[32], hbuf[32];",
        "extlib/libpng/pngwutil.c-1562-   png_byte bunit = unit;",
        "extlib/libpng/pngwutil.c-1563-",
        "extlib/libpng/pngwutil.c-1564-   png_debug(1, \"in png_write_sCAL\\n\");",
        "extlib/libpng/pngwutil.c-1565-",
        "extlib/libpng/pngwutil.c-1566-#if defined(_WIN32_WCE)"
      ],
      "raw_content": "extlib/libpng/pngwutil.c:1207:         sprintf(msg, \"invalid keyword character 0x%02X\", *kp);\nextlib/libpng/pngwutil.c-1208-         png_warning(png_ptr, msg);\nextlib/libpng/pngwutil.c-1209-#else\nextlib/libpng/pngwutil.c-1210-         png_warning(png_ptr, \"invalid character in keyword\");\nextlib/libpng/pngwutil.c-1211-#endif\nextlib/libpng/pngwutil.c-1212-         *dp = ' ';\nextlib/libpng/pngwutil.c-1213-      }\nextlib/libpng/pngwutil.c-1214-      else\nextlib/libpng/pngwutil.c-1215-      {\nextlib/libpng/pngwutil.c-1216-         *dp = *kp;\nextlib/libpng/pngwutil.c-1217-      }\nextlib/libpng/pngwutil.c-1557-#ifdef PNG_USE_LOCAL_ARRAYS\nextlib/libpng/pngwutil.c-1558-   PNG_sCAL;\nextlib/libpng/pngwutil.c-1559-#endif\nextlib/libpng/pngwutil.c-1560-   png_size_t total_len;\nextlib/libpng/pngwutil.c-1561-   char wbuf[32], hbuf[32];\nextlib/libpng/pngwutil.c-1562-   png_byte bunit = unit;\nextlib/libpng/pngwutil.c-1563-\nextlib/libpng/pngwutil.c-1564-   png_debug(1, \"in png_write_sCAL\\n\");\nextlib/libpng/pngwutil.c-1565-\nextlib/libpng/pngwutil.c-1566-#if defined(_WIN32_WCE)"
    },
    {
      "file_path": "extlib/libpng/pngwutil.c",
      "sprintf_line": 1567,
      "context_lines": [
        "extlib/libpng/pngwutil.c-1568-   {",
        "extlib/libpng/pngwutil.c-1569-      wchar_t wc_buf[32];",
        "extlib/libpng/pngwutil.c-1570-      swprintf(wc_buf, TEXT(\"%12.12e\"), width);",
        "extlib/libpng/pngwutil.c-1571-      WideCharToMultiByte(CP_ACP, 0, wc_buf, -1, wbuf, 32, NULL, NULL);",
        "extlib/libpng/pngwutil.c-1572-      swprintf(wc_buf, TEXT(\"%12.12e\"), height);",
        "extlib/libpng/pngwutil.c-1573-      WideCharToMultiByte(CP_ACP, 0, wc_buf, -1, hbuf, 32, NULL, NULL);",
        "extlib/libpng/pngwutil.c-1574-   }",
        "extlib/libpng/pngwutil.c-1575-#else"
      ],
      "raw_content": "extlib/libpng/pngwutil.c:1567:/* sprintf() function is not supported on WindowsCE */\nextlib/libpng/pngwutil.c-1568-   {\nextlib/libpng/pngwutil.c-1569-      wchar_t wc_buf[32];\nextlib/libpng/pngwutil.c-1570-      swprintf(wc_buf, TEXT(\"%12.12e\"), width);\nextlib/libpng/pngwutil.c-1571-      WideCharToMultiByte(CP_ACP, 0, wc_buf, -1, wbuf, 32, NULL, NULL);\nextlib/libpng/pngwutil.c-1572-      swprintf(wc_buf, TEXT(\"%12.12e\"), height);\nextlib/libpng/pngwutil.c-1573-      WideCharToMultiByte(CP_ACP, 0, wc_buf, -1, hbuf, 32, NULL, NULL);\nextlib/libpng/pngwutil.c-1574-   }\nextlib/libpng/pngwutil.c-1575-#else"
    },
    {
      "file_path": "extlib/libpng/pngwutil.c",
      "sprintf_line": 1576,
      "context_lines": [],
      "raw_content": "extlib/libpng/pngwutil.c:1576:   sprintf(wbuf, \"%12.12e\", width);"
    },
    {
      "file_path": "extlib/libpng/pngwutil.c",
      "sprintf_line": 1577,
      "context_lines": [
        "extlib/libpng/pngwutil.c-1578-#endif",
        "extlib/libpng/pngwutil.c-1579-   total_len = 1 + png_strlen(wbuf)+1 + png_strlen(hbuf);",
        "extlib/libpng/pngwutil.c-1580-",
        "extlib/libpng/pngwutil.c-1581-   png_debug1(3, \"sCAL total length = %d\\n\", (int)total_len);",
        "extlib/libpng/pngwutil.c-1582-   png_write_chunk_start(png_ptr, (png_bytep)png_sCAL, (png_uint_32)total_len);",
        "extlib/libpng/pngwutil.c-1583-   png_write_chunk_data(png_ptr, (png_bytep)&bunit, 1);",
        "extlib/libpng/pngwutil.c-1584-   png_write_chunk_data(png_ptr, (png_bytep)wbuf, png_strlen(wbuf)+1);",
        "extlib/libpng/pngwutil.c-1585-   png_write_chunk_data(png_ptr, (png_bytep)hbuf, png_strlen(hbuf));",
        "extlib/libpng/pngwutil.c-1586-",
        "extlib/libpng/pngwutil.c-1587-   png_write_chunk_end(png_ptr);",
        "extlib/libtiff/tif_dirinfo.c-831-\tfld->field_passcount = TRUE;",
        "extlib/libtiff/tif_dirinfo.c-832-\tfld->field_name = (char *) _TIFFmalloc(32);",
        "extlib/libtiff/tif_dirinfo.c-833-\tif (fld->field_name == NULL) {",
        "extlib/libtiff/tif_dirinfo.c-834-\t    _TIFFfree(fld);",
        "extlib/libtiff/tif_dirinfo.c-835-\t    return NULL;",
        "extlib/libtiff/tif_dirinfo.c-836-\t}",
        "extlib/libtiff/tif_dirinfo.c-837-",
        "extlib/libtiff/tif_dirinfo.c-838-\t/* note that this name is a special sign to TIFFClose() and",
        "extlib/libtiff/tif_dirinfo.c-839-\t * _TIFFSetupFieldInfo() to free the field",
        "extlib/libtiff/tif_dirinfo.c-840-\t */"
      ],
      "raw_content": "extlib/libpng/pngwutil.c:1577:   sprintf(hbuf, \"%12.12e\", height);\nextlib/libpng/pngwutil.c-1578-#endif\nextlib/libpng/pngwutil.c-1579-   total_len = 1 + png_strlen(wbuf)+1 + png_strlen(hbuf);\nextlib/libpng/pngwutil.c-1580-\nextlib/libpng/pngwutil.c-1581-   png_debug1(3, \"sCAL total length = %d\\n\", (int)total_len);\nextlib/libpng/pngwutil.c-1582-   png_write_chunk_start(png_ptr, (png_bytep)png_sCAL, (png_uint_32)total_len);\nextlib/libpng/pngwutil.c-1583-   png_write_chunk_data(png_ptr, (png_bytep)&bunit, 1);\nextlib/libpng/pngwutil.c-1584-   png_write_chunk_data(png_ptr, (png_bytep)wbuf, png_strlen(wbuf)+1);\nextlib/libpng/pngwutil.c-1585-   png_write_chunk_data(png_ptr, (png_bytep)hbuf, png_strlen(hbuf));\nextlib/libpng/pngwutil.c-1586-\nextlib/libpng/pngwutil.c-1587-   png_write_chunk_end(png_ptr);\nextlib/libtiff/tif_dirinfo.c-831-\tfld->field_passcount = TRUE;\nextlib/libtiff/tif_dirinfo.c-832-\tfld->field_name = (char *) _TIFFmalloc(32);\nextlib/libtiff/tif_dirinfo.c-833-\tif (fld->field_name == NULL) {\nextlib/libtiff/tif_dirinfo.c-834-\t    _TIFFfree(fld);\nextlib/libtiff/tif_dirinfo.c-835-\t    return NULL;\nextlib/libtiff/tif_dirinfo.c-836-\t}\nextlib/libtiff/tif_dirinfo.c-837-\nextlib/libtiff/tif_dirinfo.c-838-\t/* note that this name is a special sign to TIFFClose() and\nextlib/libtiff/tif_dirinfo.c-839-\t * _TIFFSetupFieldInfo() to free the field\nextlib/libtiff/tif_dirinfo.c-840-\t */"
    },
    {
      "file_path": "extlib/libtiff/tif_dirinfo.c",
      "sprintf_line": 841,
      "context_lines": [
        "extlib/libtiff/tif_dirinfo.c-842-",
        "extlib/libtiff/tif_dirinfo.c-843-\treturn fld;    ",
        "extlib/libtiff/tif_dirinfo.c-844-}",
        "extlib/libtiff/tif_dirinfo.c-845-"
      ],
      "raw_content": "extlib/libtiff/tif_dirinfo.c:841:\tsprintf(fld->field_name, \"Tag %d\", (int) tag);\nextlib/libtiff/tif_dirinfo.c-842-\nextlib/libtiff/tif_dirinfo.c-843-\treturn fld;    \nextlib/libtiff/tif_dirinfo.c-844-}\nextlib/libtiff/tif_dirinfo.c-845-"
    },
    {
      "file_path": "extlib/libtiff/tif_dirinfo.c-846-/* vim",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-70- * why it is being rejected.",
        "extlib/libtiff/tif_getimage.c-71- */",
        "extlib/libtiff/tif_getimage.c-72-int",
        "extlib/libtiff/tif_getimage.c-73-TIFFRGBAImageOK(TIFF* tif, char emsg[1024])",
        "extlib/libtiff/tif_getimage.c-74-{",
        "extlib/libtiff/tif_getimage.c-75-    TIFFDirectory* td = &tif->tif_dir;",
        "extlib/libtiff/tif_getimage.c-76-    uint16 photometric;",
        "extlib/libtiff/tif_getimage.c-77-    int colorchannels;",
        "extlib/libtiff/tif_getimage.c-78-",
        "extlib/libtiff/tif_getimage.c-79-    if (!tif->tif_decodestatus) {"
      ],
      "raw_content": "extlib/libtiff/tif_dirinfo.c-846-/* vim: set ts=8 sts=8 sw=8 noet: */\nextlib/libtiff/tif_getimage.c-70- * why it is being rejected.\nextlib/libtiff/tif_getimage.c-71- */\nextlib/libtiff/tif_getimage.c-72-int\nextlib/libtiff/tif_getimage.c-73-TIFFRGBAImageOK(TIFF* tif, char emsg[1024])\nextlib/libtiff/tif_getimage.c-74-{\nextlib/libtiff/tif_getimage.c-75-    TIFFDirectory* td = &tif->tif_dir;\nextlib/libtiff/tif_getimage.c-76-    uint16 photometric;\nextlib/libtiff/tif_getimage.c-77-    int colorchannels;\nextlib/libtiff/tif_getimage.c-78-\nextlib/libtiff/tif_getimage.c-79-    if (!tif->tif_decodestatus) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 80,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-81-\treturn (0);",
        "extlib/libtiff/tif_getimage.c-82-    }",
        "extlib/libtiff/tif_getimage.c-83-    switch (td->td_bitspersample) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:80:\tsprintf(emsg, \"Sorry, requested compression method is not configured\");\nextlib/libtiff/tif_getimage.c-81-\treturn (0);\nextlib/libtiff/tif_getimage.c-82-    }\nextlib/libtiff/tif_getimage.c-83-    switch (td->td_bitspersample) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-84-    case 1",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-84-    case 1: case 2: case 4:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-85-    case 8",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-86-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-85-    case 8: case 16:\nextlib/libtiff/tif_getimage.c-86-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-87-    default",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-87-    default:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 88,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-89-\t    td->td_bitspersample);",
        "extlib/libtiff/tif_getimage.c-90-\treturn (0);",
        "extlib/libtiff/tif_getimage.c-91-    }",
        "extlib/libtiff/tif_getimage.c-92-    colorchannels = td->td_samplesperpixel - td->td_extrasamples;",
        "extlib/libtiff/tif_getimage.c-93-    if (!TIFFGetField(tif, TIFFTAG_PHOTOMETRIC, &photometric)) {",
        "extlib/libtiff/tif_getimage.c-94-\tswitch (colorchannels) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:88:\tsprintf(emsg, \"Sorry, can not handle images with %d-bit samples\",\nextlib/libtiff/tif_getimage.c-89-\t    td->td_bitspersample);\nextlib/libtiff/tif_getimage.c-90-\treturn (0);\nextlib/libtiff/tif_getimage.c-91-    }\nextlib/libtiff/tif_getimage.c-92-    colorchannels = td->td_samplesperpixel - td->td_extrasamples;\nextlib/libtiff/tif_getimage.c-93-    if (!TIFFGetField(tif, TIFFTAG_PHOTOMETRIC, &photometric)) {\nextlib/libtiff/tif_getimage.c-94-\tswitch (colorchannels) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-95-\tcase 1",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-96-\t    photometric = PHOTOMETRIC_MINISBLACK;",
        "extlib/libtiff/tif_getimage.c-97-\t    break;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-95-\tcase 1:\nextlib/libtiff/tif_getimage.c-96-\t    photometric = PHOTOMETRIC_MINISBLACK;\nextlib/libtiff/tif_getimage.c-97-\t    break;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-98-\tcase 3",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-99-\t    photometric = PHOTOMETRIC_RGB;",
        "extlib/libtiff/tif_getimage.c-100-\t    break;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-98-\tcase 3:\nextlib/libtiff/tif_getimage.c-99-\t    photometric = PHOTOMETRIC_RGB;\nextlib/libtiff/tif_getimage.c-100-\t    break;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-101-\tdefault",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-101-\tdefault:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 102,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-103-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-104-\t}",
        "extlib/libtiff/tif_getimage.c-105-    }",
        "extlib/libtiff/tif_getimage.c-106-    switch (photometric) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:102:\t    sprintf(emsg, \"Missing needed %s tag\", photoTag);\nextlib/libtiff/tif_getimage.c-103-\t    return (0);\nextlib/libtiff/tif_getimage.c-104-\t}\nextlib/libtiff/tif_getimage.c-105-    }\nextlib/libtiff/tif_getimage.c-106-    switch (photometric) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-107-    case PHOTOMETRIC_MINISWHITE",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-107-    case PHOTOMETRIC_MINISWHITE:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-108-    case PHOTOMETRIC_MINISBLACK",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-108-    case PHOTOMETRIC_MINISBLACK:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-109-    case PHOTOMETRIC_PALETTE",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-110-\tif (td->td_planarconfig == PLANARCONFIG_CONTIG ",
        "extlib/libtiff/tif_getimage.c-111-            && td->td_samplesperpixel != 1",
        "extlib/libtiff/tif_getimage.c-112-            && td->td_bitspersample < 8 ) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-109-    case PHOTOMETRIC_PALETTE:\nextlib/libtiff/tif_getimage.c-110-\tif (td->td_planarconfig == PLANARCONFIG_CONTIG \nextlib/libtiff/tif_getimage.c-111-            && td->td_samplesperpixel != 1\nextlib/libtiff/tif_getimage.c-112-            && td->td_bitspersample < 8 ) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 113,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-114-                    \"Sorry, can not handle contiguous data with %s=%d, \"",
        "extlib/libtiff/tif_getimage.c-115-                    \"and %s=%d and Bits/Sample=%d\",",
        "extlib/libtiff/tif_getimage.c-116-                    photoTag, photometric,",
        "extlib/libtiff/tif_getimage.c-117-                    \"Samples/pixel\", td->td_samplesperpixel,",
        "extlib/libtiff/tif_getimage.c-118-                    td->td_bitspersample);",
        "extlib/libtiff/tif_getimage.c-119-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-120-\t}",
        "extlib/libtiff/tif_getimage.c-121-        /*",
        "extlib/libtiff/tif_getimage.c-122-        ** We should likely validate that any extra samples are either",
        "extlib/libtiff/tif_getimage.c-123-        ** to be ignored, or are alpha, and if alpha we should try to use",
        "extlib/libtiff/tif_getimage.c-124-        ** them.  But for now we won't bother with this. ",
        "extlib/libtiff/tif_getimage.c-125-        */",
        "extlib/libtiff/tif_getimage.c-126-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:113:\t    sprintf(emsg,\nextlib/libtiff/tif_getimage.c-114-                    \"Sorry, can not handle contiguous data with %s=%d, \"\nextlib/libtiff/tif_getimage.c-115-                    \"and %s=%d and Bits/Sample=%d\",\nextlib/libtiff/tif_getimage.c-116-                    photoTag, photometric,\nextlib/libtiff/tif_getimage.c-117-                    \"Samples/pixel\", td->td_samplesperpixel,\nextlib/libtiff/tif_getimage.c-118-                    td->td_bitspersample);\nextlib/libtiff/tif_getimage.c-119-\t    return (0);\nextlib/libtiff/tif_getimage.c-120-\t}\nextlib/libtiff/tif_getimage.c-121-        /*\nextlib/libtiff/tif_getimage.c-122-        ** We should likely validate that any extra samples are either\nextlib/libtiff/tif_getimage.c-123-        ** to be ignored, or are alpha, and if alpha we should try to use\nextlib/libtiff/tif_getimage.c-124-        ** them.  But for now we won't bother with this. \nextlib/libtiff/tif_getimage.c-125-        */\nextlib/libtiff/tif_getimage.c-126-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-127-    case PHOTOMETRIC_YCBCR",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-128-\tif (td->td_planarconfig != PLANARCONFIG_CONTIG) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-127-    case PHOTOMETRIC_YCBCR:\nextlib/libtiff/tif_getimage.c-128-\tif (td->td_planarconfig != PLANARCONFIG_CONTIG) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 129,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-130-\t\t\"Planarconfiguration\", td->td_planarconfig);",
        "extlib/libtiff/tif_getimage.c-131-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-132-\t}",
        "extlib/libtiff/tif_getimage.c-133-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:129:\t    sprintf(emsg, \"Sorry, can not handle YCbCr images with %s=%d\",\nextlib/libtiff/tif_getimage.c-130-\t\t\"Planarconfiguration\", td->td_planarconfig);\nextlib/libtiff/tif_getimage.c-131-\t    return (0);\nextlib/libtiff/tif_getimage.c-132-\t}\nextlib/libtiff/tif_getimage.c-133-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-134-    case PHOTOMETRIC_RGB",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-135-\tif (colorchannels < 3) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-134-    case PHOTOMETRIC_RGB: \nextlib/libtiff/tif_getimage.c-135-\tif (colorchannels < 3) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 136,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-137-\t\t\"Color channels\", colorchannels);",
        "extlib/libtiff/tif_getimage.c-138-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-139-\t}",
        "extlib/libtiff/tif_getimage.c-140-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:136:\t    sprintf(emsg, \"Sorry, can not handle RGB image with %s=%d\",\nextlib/libtiff/tif_getimage.c-137-\t\t\"Color channels\", colorchannels);\nextlib/libtiff/tif_getimage.c-138-\t    return (0);\nextlib/libtiff/tif_getimage.c-139-\t}\nextlib/libtiff/tif_getimage.c-140-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-141-    case PHOTOMETRIC_SEPARATED",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-142-\t{",
        "extlib/libtiff/tif_getimage.c-143-\t\tuint16 inkset;",
        "extlib/libtiff/tif_getimage.c-144-\t\tTIFFGetFieldDefaulted(tif, TIFFTAG_INKSET, &inkset);",
        "extlib/libtiff/tif_getimage.c-145-\t\tif (inkset != INKSET_CMYK) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-141-    case PHOTOMETRIC_SEPARATED:\nextlib/libtiff/tif_getimage.c-142-\t{\nextlib/libtiff/tif_getimage.c-143-\t\tuint16 inkset;\nextlib/libtiff/tif_getimage.c-144-\t\tTIFFGetFieldDefaulted(tif, TIFFTAG_INKSET, &inkset);\nextlib/libtiff/tif_getimage.c-145-\t\tif (inkset != INKSET_CMYK) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 146,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-147-\t\t\t    \"Sorry, can not handle separated image with %s=%d\",",
        "extlib/libtiff/tif_getimage.c-148-\t\t\t    \"InkSet\", inkset);",
        "extlib/libtiff/tif_getimage.c-149-\t\t    return 0;",
        "extlib/libtiff/tif_getimage.c-150-\t\t}",
        "extlib/libtiff/tif_getimage.c-151-\t\tif (td->td_samplesperpixel < 4) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:146:\t\t    sprintf(emsg,\nextlib/libtiff/tif_getimage.c-147-\t\t\t    \"Sorry, can not handle separated image with %s=%d\",\nextlib/libtiff/tif_getimage.c-148-\t\t\t    \"InkSet\", inkset);\nextlib/libtiff/tif_getimage.c-149-\t\t    return 0;\nextlib/libtiff/tif_getimage.c-150-\t\t}\nextlib/libtiff/tif_getimage.c-151-\t\tif (td->td_samplesperpixel < 4) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 152,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-153-\t\t\t    \"Sorry, can not handle separated image with %s=%d\",",
        "extlib/libtiff/tif_getimage.c-154-\t\t\t    \"Samples/pixel\", td->td_samplesperpixel);",
        "extlib/libtiff/tif_getimage.c-155-\t\t    return 0;",
        "extlib/libtiff/tif_getimage.c-156-\t\t}",
        "extlib/libtiff/tif_getimage.c-157-\t\tbreak;",
        "extlib/libtiff/tif_getimage.c-158-\t}"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:152:\t\t    sprintf(emsg,\nextlib/libtiff/tif_getimage.c-153-\t\t\t    \"Sorry, can not handle separated image with %s=%d\",\nextlib/libtiff/tif_getimage.c-154-\t\t\t    \"Samples/pixel\", td->td_samplesperpixel);\nextlib/libtiff/tif_getimage.c-155-\t\t    return 0;\nextlib/libtiff/tif_getimage.c-156-\t\t}\nextlib/libtiff/tif_getimage.c-157-\t\tbreak;\nextlib/libtiff/tif_getimage.c-158-\t}"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-159-    case PHOTOMETRIC_LOGL",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-160-\tif (td->td_compression != COMPRESSION_SGILOG) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-159-    case PHOTOMETRIC_LOGL:\nextlib/libtiff/tif_getimage.c-160-\tif (td->td_compression != COMPRESSION_SGILOG) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 161,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-162-\t\t\"Compression\", COMPRESSION_SGILOG);",
        "extlib/libtiff/tif_getimage.c-163-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-164-\t}",
        "extlib/libtiff/tif_getimage.c-165-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:161:\t    sprintf(emsg, \"Sorry, LogL data must have %s=%d\",\nextlib/libtiff/tif_getimage.c-162-\t\t\"Compression\", COMPRESSION_SGILOG);\nextlib/libtiff/tif_getimage.c-163-\t    return (0);\nextlib/libtiff/tif_getimage.c-164-\t}\nextlib/libtiff/tif_getimage.c-165-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-166-    case PHOTOMETRIC_LOGLUV",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-167-\tif (td->td_compression != COMPRESSION_SGILOG &&",
        "extlib/libtiff/tif_getimage.c-168-\t\ttd->td_compression != COMPRESSION_SGILOG24) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-166-    case PHOTOMETRIC_LOGLUV:\nextlib/libtiff/tif_getimage.c-167-\tif (td->td_compression != COMPRESSION_SGILOG &&\nextlib/libtiff/tif_getimage.c-168-\t\ttd->td_compression != COMPRESSION_SGILOG24) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 169,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-170-\t\t\"Compression\", COMPRESSION_SGILOG, COMPRESSION_SGILOG24);",
        "extlib/libtiff/tif_getimage.c-171-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-172-\t}",
        "extlib/libtiff/tif_getimage.c-173-\tif (td->td_planarconfig != PLANARCONFIG_CONTIG) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:169:\t    sprintf(emsg, \"Sorry, LogLuv data must have %s=%d or %d\",\nextlib/libtiff/tif_getimage.c-170-\t\t\"Compression\", COMPRESSION_SGILOG, COMPRESSION_SGILOG24);\nextlib/libtiff/tif_getimage.c-171-\t    return (0);\nextlib/libtiff/tif_getimage.c-172-\t}\nextlib/libtiff/tif_getimage.c-173-\tif (td->td_planarconfig != PLANARCONFIG_CONTIG) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 174,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-175-\t\t\"Planarconfiguration\", td->td_planarconfig);",
        "extlib/libtiff/tif_getimage.c-176-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-177-\t}",
        "extlib/libtiff/tif_getimage.c-178-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:174:\t    sprintf(emsg, \"Sorry, can not handle LogLuv images with %s=%d\",\nextlib/libtiff/tif_getimage.c-175-\t\t\"Planarconfiguration\", td->td_planarconfig);\nextlib/libtiff/tif_getimage.c-176-\t    return (0);\nextlib/libtiff/tif_getimage.c-177-\t}\nextlib/libtiff/tif_getimage.c-178-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-179-    case PHOTOMETRIC_CIELAB",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-180-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-179-    case PHOTOMETRIC_CIELAB:\nextlib/libtiff/tif_getimage.c-180-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-181-    default",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-181-    default:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 182,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-183-\t    photoTag, photometric);",
        "extlib/libtiff/tif_getimage.c-184-\treturn (0);",
        "extlib/libtiff/tif_getimage.c-185-    }",
        "extlib/libtiff/tif_getimage.c-186-    return (1);",
        "extlib/libtiff/tif_getimage.c-187-}",
        "extlib/libtiff/tif_getimage.c-188-",
        "extlib/libtiff/tif_getimage.c-189-void",
        "extlib/libtiff/tif_getimage.c-190-TIFFRGBAImageEnd(TIFFRGBAImage* img)",
        "extlib/libtiff/tif_getimage.c-191-{",
        "extlib/libtiff/tif_getimage.c-192-\tif (img->Map)",
        "extlib/libtiff/tif_getimage.c-238-    img->req_orientation = ORIENTATION_BOTLEFT;\t    /* It is the default */",
        "extlib/libtiff/tif_getimage.c-239-    ",
        "extlib/libtiff/tif_getimage.c-240-    img->tif = tif;",
        "extlib/libtiff/tif_getimage.c-241-    img->stoponerr = stop;",
        "extlib/libtiff/tif_getimage.c-242-    TIFFGetFieldDefaulted(tif, TIFFTAG_BITSPERSAMPLE, &img->bitspersample);",
        "extlib/libtiff/tif_getimage.c-243-    switch (img->bitspersample) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:182:\tsprintf(emsg, \"Sorry, can not handle image with %s=%d\",\nextlib/libtiff/tif_getimage.c-183-\t    photoTag, photometric);\nextlib/libtiff/tif_getimage.c-184-\treturn (0);\nextlib/libtiff/tif_getimage.c-185-    }\nextlib/libtiff/tif_getimage.c-186-    return (1);\nextlib/libtiff/tif_getimage.c-187-}\nextlib/libtiff/tif_getimage.c-188-\nextlib/libtiff/tif_getimage.c-189-void\nextlib/libtiff/tif_getimage.c-190-TIFFRGBAImageEnd(TIFFRGBAImage* img)\nextlib/libtiff/tif_getimage.c-191-{\nextlib/libtiff/tif_getimage.c-192-\tif (img->Map)\nextlib/libtiff/tif_getimage.c-238-    img->req_orientation = ORIENTATION_BOTLEFT;\t    /* It is the default */\nextlib/libtiff/tif_getimage.c-239-    \nextlib/libtiff/tif_getimage.c-240-    img->tif = tif;\nextlib/libtiff/tif_getimage.c-241-    img->stoponerr = stop;\nextlib/libtiff/tif_getimage.c-242-    TIFFGetFieldDefaulted(tif, TIFFTAG_BITSPERSAMPLE, &img->bitspersample);\nextlib/libtiff/tif_getimage.c-243-    switch (img->bitspersample) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-244-    case 1",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-244-    case 1: case 2: case 4:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-245-    case 8",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-246-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-245-    case 8: case 16:\nextlib/libtiff/tif_getimage.c-246-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-247-    default",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-247-    default:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 248,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-249-\t    img->bitspersample);",
        "extlib/libtiff/tif_getimage.c-250-\treturn (0);",
        "extlib/libtiff/tif_getimage.c-251-    }",
        "extlib/libtiff/tif_getimage.c-252-    img->alpha = 0;",
        "extlib/libtiff/tif_getimage.c-253-    TIFFGetFieldDefaulted(tif, TIFFTAG_SAMPLESPERPIXEL, &img->samplesperpixel);",
        "extlib/libtiff/tif_getimage.c-254-    TIFFGetFieldDefaulted(tif, TIFFTAG_EXTRASAMPLES,",
        "extlib/libtiff/tif_getimage.c-255-\t&extrasamples, &sampleinfo);",
        "extlib/libtiff/tif_getimage.c-256-    if (extrasamples >= 1)",
        "extlib/libtiff/tif_getimage.c-257-    {",
        "extlib/libtiff/tif_getimage.c-258-\tswitch (sampleinfo[0]) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:248:\tsprintf(emsg, \"Sorry, can not handle images with %d-bit samples\",\nextlib/libtiff/tif_getimage.c-249-\t    img->bitspersample);\nextlib/libtiff/tif_getimage.c-250-\treturn (0);\nextlib/libtiff/tif_getimage.c-251-    }\nextlib/libtiff/tif_getimage.c-252-    img->alpha = 0;\nextlib/libtiff/tif_getimage.c-253-    TIFFGetFieldDefaulted(tif, TIFFTAG_SAMPLESPERPIXEL, &img->samplesperpixel);\nextlib/libtiff/tif_getimage.c-254-    TIFFGetFieldDefaulted(tif, TIFFTAG_EXTRASAMPLES,\nextlib/libtiff/tif_getimage.c-255-\t&extrasamples, &sampleinfo);\nextlib/libtiff/tif_getimage.c-256-    if (extrasamples >= 1)\nextlib/libtiff/tif_getimage.c-257-    {\nextlib/libtiff/tif_getimage.c-258-\tswitch (sampleinfo[0]) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-288-\tcase 1",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-289-\t    if (isCCITTCompression(tif))",
        "extlib/libtiff/tif_getimage.c-290-\t\timg->photometric = PHOTOMETRIC_MINISWHITE;",
        "extlib/libtiff/tif_getimage.c-291-\t    else",
        "extlib/libtiff/tif_getimage.c-292-\t\timg->photometric = PHOTOMETRIC_MINISBLACK;",
        "extlib/libtiff/tif_getimage.c-293-\t    break;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-288-\tcase 1:\nextlib/libtiff/tif_getimage.c-289-\t    if (isCCITTCompression(tif))\nextlib/libtiff/tif_getimage.c-290-\t\timg->photometric = PHOTOMETRIC_MINISWHITE;\nextlib/libtiff/tif_getimage.c-291-\t    else\nextlib/libtiff/tif_getimage.c-292-\t\timg->photometric = PHOTOMETRIC_MINISBLACK;\nextlib/libtiff/tif_getimage.c-293-\t    break;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-294-\tcase 3",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-295-\t    img->photometric = PHOTOMETRIC_RGB;",
        "extlib/libtiff/tif_getimage.c-296-\t    break;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-294-\tcase 3:\nextlib/libtiff/tif_getimage.c-295-\t    img->photometric = PHOTOMETRIC_RGB;\nextlib/libtiff/tif_getimage.c-296-\t    break;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-297-\tdefault",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-297-\tdefault:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 298,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-299-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-300-\t}",
        "extlib/libtiff/tif_getimage.c-301-    }",
        "extlib/libtiff/tif_getimage.c-302-    switch (img->photometric) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:298:\t    sprintf(emsg, \"Missing needed %s tag\", photoTag);\nextlib/libtiff/tif_getimage.c-299-\t    return (0);\nextlib/libtiff/tif_getimage.c-300-\t}\nextlib/libtiff/tif_getimage.c-301-    }\nextlib/libtiff/tif_getimage.c-302-    switch (img->photometric) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-303-    case PHOTOMETRIC_PALETTE",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-304-\tif (!TIFFGetField(tif, TIFFTAG_COLORMAP,",
        "extlib/libtiff/tif_getimage.c-305-\t    &red_orig, &green_orig, &blue_orig)) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-303-    case PHOTOMETRIC_PALETTE:\nextlib/libtiff/tif_getimage.c-304-\tif (!TIFFGetField(tif, TIFFTAG_COLORMAP,\nextlib/libtiff/tif_getimage.c-305-\t    &red_orig, &green_orig, &blue_orig)) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 306,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-307-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-308-\t}",
        "extlib/libtiff/tif_getimage.c-309-",
        "extlib/libtiff/tif_getimage.c-310-        /* copy the colormaps so we can modify them */",
        "extlib/libtiff/tif_getimage.c-311-        n_color = (1L << img->bitspersample);",
        "extlib/libtiff/tif_getimage.c-312-        img->redcmap = (uint16 *) _TIFFmalloc(sizeof(uint16)*n_color);",
        "extlib/libtiff/tif_getimage.c-313-        img->greencmap = (uint16 *) _TIFFmalloc(sizeof(uint16)*n_color);",
        "extlib/libtiff/tif_getimage.c-314-        img->bluecmap = (uint16 *) _TIFFmalloc(sizeof(uint16)*n_color);",
        "extlib/libtiff/tif_getimage.c-315-        if( !img->redcmap || !img->greencmap || !img->bluecmap ) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:306:\t    sprintf(emsg, \"Missing required \\\"Colormap\\\" tag\");\nextlib/libtiff/tif_getimage.c-307-\t    return (0);\nextlib/libtiff/tif_getimage.c-308-\t}\nextlib/libtiff/tif_getimage.c-309-\nextlib/libtiff/tif_getimage.c-310-        /* copy the colormaps so we can modify them */\nextlib/libtiff/tif_getimage.c-311-        n_color = (1L << img->bitspersample);\nextlib/libtiff/tif_getimage.c-312-        img->redcmap = (uint16 *) _TIFFmalloc(sizeof(uint16)*n_color);\nextlib/libtiff/tif_getimage.c-313-        img->greencmap = (uint16 *) _TIFFmalloc(sizeof(uint16)*n_color);\nextlib/libtiff/tif_getimage.c-314-        img->bluecmap = (uint16 *) _TIFFmalloc(sizeof(uint16)*n_color);\nextlib/libtiff/tif_getimage.c-315-        if( !img->redcmap || !img->greencmap || !img->bluecmap ) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 316,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-317-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-318-        }",
        "extlib/libtiff/tif_getimage.c-319-",
        "extlib/libtiff/tif_getimage.c-320-        _TIFFmemcpy( img->redcmap, red_orig, n_color * 2 );",
        "extlib/libtiff/tif_getimage.c-321-        _TIFFmemcpy( img->greencmap, green_orig, n_color * 2 );",
        "extlib/libtiff/tif_getimage.c-322-        _TIFFmemcpy( img->bluecmap, blue_orig, n_color * 2 );",
        "extlib/libtiff/tif_getimage.c-323-        ",
        "extlib/libtiff/tif_getimage.c-324-\t/* fall thru... */"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:316:\t    sprintf(emsg, \"Out of memory for colormap copy\");\nextlib/libtiff/tif_getimage.c-317-\t    return (0);\nextlib/libtiff/tif_getimage.c-318-        }\nextlib/libtiff/tif_getimage.c-319-\nextlib/libtiff/tif_getimage.c-320-        _TIFFmemcpy( img->redcmap, red_orig, n_color * 2 );\nextlib/libtiff/tif_getimage.c-321-        _TIFFmemcpy( img->greencmap, green_orig, n_color * 2 );\nextlib/libtiff/tif_getimage.c-322-        _TIFFmemcpy( img->bluecmap, blue_orig, n_color * 2 );\nextlib/libtiff/tif_getimage.c-323-        \nextlib/libtiff/tif_getimage.c-324-\t/* fall thru... */"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-325-    case PHOTOMETRIC_MINISWHITE",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-325-    case PHOTOMETRIC_MINISWHITE:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-326-    case PHOTOMETRIC_MINISBLACK",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-327-\tif (planarconfig == PLANARCONFIG_CONTIG ",
        "extlib/libtiff/tif_getimage.c-328-            && img->samplesperpixel != 1",
        "extlib/libtiff/tif_getimage.c-329-            && img->bitspersample < 8 ) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-326-    case PHOTOMETRIC_MINISBLACK:\nextlib/libtiff/tif_getimage.c-327-\tif (planarconfig == PLANARCONFIG_CONTIG \nextlib/libtiff/tif_getimage.c-328-            && img->samplesperpixel != 1\nextlib/libtiff/tif_getimage.c-329-            && img->bitspersample < 8 ) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 330,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-331-                    \"Sorry, can not handle contiguous data with %s=%d, \"",
        "extlib/libtiff/tif_getimage.c-332-                    \"and %s=%d and Bits/Sample=%d\",",
        "extlib/libtiff/tif_getimage.c-333-                    photoTag, img->photometric,",
        "extlib/libtiff/tif_getimage.c-334-                    \"Samples/pixel\", img->samplesperpixel,",
        "extlib/libtiff/tif_getimage.c-335-                    img->bitspersample);",
        "extlib/libtiff/tif_getimage.c-336-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-337-\t}",
        "extlib/libtiff/tif_getimage.c-338-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:330:\t    sprintf(emsg,\nextlib/libtiff/tif_getimage.c-331-                    \"Sorry, can not handle contiguous data with %s=%d, \"\nextlib/libtiff/tif_getimage.c-332-                    \"and %s=%d and Bits/Sample=%d\",\nextlib/libtiff/tif_getimage.c-333-                    photoTag, img->photometric,\nextlib/libtiff/tif_getimage.c-334-                    \"Samples/pixel\", img->samplesperpixel,\nextlib/libtiff/tif_getimage.c-335-                    img->bitspersample);\nextlib/libtiff/tif_getimage.c-336-\t    return (0);\nextlib/libtiff/tif_getimage.c-337-\t}\nextlib/libtiff/tif_getimage.c-338-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-339-    case PHOTOMETRIC_YCBCR",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-340-\tif (planarconfig != PLANARCONFIG_CONTIG) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-339-    case PHOTOMETRIC_YCBCR:\nextlib/libtiff/tif_getimage.c-340-\tif (planarconfig != PLANARCONFIG_CONTIG) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 341,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-342-\t\t\"Planarconfiguration\", planarconfig);",
        "extlib/libtiff/tif_getimage.c-343-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-344-\t}",
        "extlib/libtiff/tif_getimage.c-345-\t/* It would probably be nice to have a reality check here. */",
        "extlib/libtiff/tif_getimage.c-346-\tif (planarconfig == PLANARCONFIG_CONTIG)",
        "extlib/libtiff/tif_getimage.c-347-\t    /* can rely on libjpeg to convert to RGB */",
        "extlib/libtiff/tif_getimage.c-348-\t    /* XXX should restore current state on exit */",
        "extlib/libtiff/tif_getimage.c-349-\t    switch (compress) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:341:\t    sprintf(emsg, \"Sorry, can not handle YCbCr images with %s=%d\",\nextlib/libtiff/tif_getimage.c-342-\t\t\"Planarconfiguration\", planarconfig);\nextlib/libtiff/tif_getimage.c-343-\t    return (0);\nextlib/libtiff/tif_getimage.c-344-\t}\nextlib/libtiff/tif_getimage.c-345-\t/* It would probably be nice to have a reality check here. */\nextlib/libtiff/tif_getimage.c-346-\tif (planarconfig == PLANARCONFIG_CONTIG)\nextlib/libtiff/tif_getimage.c-347-\t    /* can rely on libjpeg to convert to RGB */\nextlib/libtiff/tif_getimage.c-348-\t    /* XXX should restore current state on exit */\nextlib/libtiff/tif_getimage.c-349-\t    switch (compress) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-350-\t\tcase COMPRESSION_OJPEG",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-350-\t\tcase COMPRESSION_OJPEG:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-351-\t\tcase COMPRESSION_JPEG",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-353-\t\t    img->photometric = PHOTOMETRIC_RGB;",
        "extlib/libtiff/tif_getimage.c-354-                    break;",
        "extlib/libtiff/tif_getimage.c-355-"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-351-\t\tcase COMPRESSION_JPEG:\nextlib/libtiff/tif_getimage.c-353-\t\t    img->photometric = PHOTOMETRIC_RGB;\nextlib/libtiff/tif_getimage.c-354-                    break;\nextlib/libtiff/tif_getimage.c-355-"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-356-                default",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-357-                    /* do nothing */;",
        "extlib/libtiff/tif_getimage.c-358-                    break;",
        "extlib/libtiff/tif_getimage.c-359-\t    }",
        "extlib/libtiff/tif_getimage.c-360-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-356-                default:\nextlib/libtiff/tif_getimage.c-357-                    /* do nothing */;\nextlib/libtiff/tif_getimage.c-358-                    break;\nextlib/libtiff/tif_getimage.c-359-\t    }\nextlib/libtiff/tif_getimage.c-360-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-361-    case PHOTOMETRIC_RGB",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-362-\tif (colorchannels < 3) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-361-    case PHOTOMETRIC_RGB: \nextlib/libtiff/tif_getimage.c-362-\tif (colorchannels < 3) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 363,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-364-\t\t\"Color channels\", colorchannels);",
        "extlib/libtiff/tif_getimage.c-365-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-366-\t}",
        "extlib/libtiff/tif_getimage.c-367-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:363:\t    sprintf(emsg, \"Sorry, can not handle RGB image with %s=%d\",\nextlib/libtiff/tif_getimage.c-364-\t\t\"Color channels\", colorchannels);\nextlib/libtiff/tif_getimage.c-365-\t    return (0);\nextlib/libtiff/tif_getimage.c-366-\t}\nextlib/libtiff/tif_getimage.c-367-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-368-    case PHOTOMETRIC_SEPARATED",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-369-\tuint16 inkset;",
        "extlib/libtiff/tif_getimage.c-370-\tTIFFGetFieldDefaulted(tif, TIFFTAG_INKSET, &inkset);",
        "extlib/libtiff/tif_getimage.c-371-\tif (inkset != INKSET_CMYK) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-368-    case PHOTOMETRIC_SEPARATED: {\nextlib/libtiff/tif_getimage.c-369-\tuint16 inkset;\nextlib/libtiff/tif_getimage.c-370-\tTIFFGetFieldDefaulted(tif, TIFFTAG_INKSET, &inkset);\nextlib/libtiff/tif_getimage.c-371-\tif (inkset != INKSET_CMYK) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 372,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-373-\t\t\"InkSet\", inkset);",
        "extlib/libtiff/tif_getimage.c-374-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-375-\t}",
        "extlib/libtiff/tif_getimage.c-376-\tif (img->samplesperpixel < 4) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:372:\t    sprintf(emsg, \"Sorry, can not handle separated image with %s=%d\",\nextlib/libtiff/tif_getimage.c-373-\t\t\"InkSet\", inkset);\nextlib/libtiff/tif_getimage.c-374-\t    return (0);\nextlib/libtiff/tif_getimage.c-375-\t}\nextlib/libtiff/tif_getimage.c-376-\tif (img->samplesperpixel < 4) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 377,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-378-\t\t\"Samples/pixel\", img->samplesperpixel);",
        "extlib/libtiff/tif_getimage.c-379-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-380-\t}",
        "extlib/libtiff/tif_getimage.c-381-\tbreak;",
        "extlib/libtiff/tif_getimage.c-382-    }"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:377:\t    sprintf(emsg, \"Sorry, can not handle separated image with %s=%d\",\nextlib/libtiff/tif_getimage.c-378-\t\t\"Samples/pixel\", img->samplesperpixel);\nextlib/libtiff/tif_getimage.c-379-\t    return (0);\nextlib/libtiff/tif_getimage.c-380-\t}\nextlib/libtiff/tif_getimage.c-381-\tbreak;\nextlib/libtiff/tif_getimage.c-382-    }"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-383-    case PHOTOMETRIC_LOGL",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-384-\tif (compress != COMPRESSION_SGILOG) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-383-    case PHOTOMETRIC_LOGL:\nextlib/libtiff/tif_getimage.c-384-\tif (compress != COMPRESSION_SGILOG) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 385,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-386-\t\t\"Compression\", COMPRESSION_SGILOG);",
        "extlib/libtiff/tif_getimage.c-387-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-388-\t}",
        "extlib/libtiff/tif_getimage.c-389-\tTIFFSetField(tif, TIFFTAG_SGILOGDATAFMT, SGILOGDATAFMT_8BIT);",
        "extlib/libtiff/tif_getimage.c-390-\timg->photometric = PHOTOMETRIC_MINISBLACK;\t/* little white lie */",
        "extlib/libtiff/tif_getimage.c-391-\timg->bitspersample = 8;",
        "extlib/libtiff/tif_getimage.c-392-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:385:\t    sprintf(emsg, \"Sorry, LogL data must have %s=%d\",\nextlib/libtiff/tif_getimage.c-386-\t\t\"Compression\", COMPRESSION_SGILOG);\nextlib/libtiff/tif_getimage.c-387-\t    return (0);\nextlib/libtiff/tif_getimage.c-388-\t}\nextlib/libtiff/tif_getimage.c-389-\tTIFFSetField(tif, TIFFTAG_SGILOGDATAFMT, SGILOGDATAFMT_8BIT);\nextlib/libtiff/tif_getimage.c-390-\timg->photometric = PHOTOMETRIC_MINISBLACK;\t/* little white lie */\nextlib/libtiff/tif_getimage.c-391-\timg->bitspersample = 8;\nextlib/libtiff/tif_getimage.c-392-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-393-    case PHOTOMETRIC_LOGLUV",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-394-\tif (compress != COMPRESSION_SGILOG && compress != COMPRESSION_SGILOG24) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-393-    case PHOTOMETRIC_LOGLUV:\nextlib/libtiff/tif_getimage.c-394-\tif (compress != COMPRESSION_SGILOG && compress != COMPRESSION_SGILOG24) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 395,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-396-\t\t\"Compression\", COMPRESSION_SGILOG, COMPRESSION_SGILOG24);",
        "extlib/libtiff/tif_getimage.c-397-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-398-\t}",
        "extlib/libtiff/tif_getimage.c-399-\tif (planarconfig != PLANARCONFIG_CONTIG) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:395:\t    sprintf(emsg, \"Sorry, LogLuv data must have %s=%d or %d\",\nextlib/libtiff/tif_getimage.c-396-\t\t\"Compression\", COMPRESSION_SGILOG, COMPRESSION_SGILOG24);\nextlib/libtiff/tif_getimage.c-397-\t    return (0);\nextlib/libtiff/tif_getimage.c-398-\t}\nextlib/libtiff/tif_getimage.c-399-\tif (planarconfig != PLANARCONFIG_CONTIG) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 400,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-401-\t\t\"Planarconfiguration\", planarconfig);",
        "extlib/libtiff/tif_getimage.c-402-\t    return (0);",
        "extlib/libtiff/tif_getimage.c-403-\t}",
        "extlib/libtiff/tif_getimage.c-404-\tTIFFSetField(tif, TIFFTAG_SGILOGDATAFMT, SGILOGDATAFMT_8BIT);",
        "extlib/libtiff/tif_getimage.c-405-\timg->photometric = PHOTOMETRIC_RGB;\t\t/* little white lie */",
        "extlib/libtiff/tif_getimage.c-406-\timg->bitspersample = 8;",
        "extlib/libtiff/tif_getimage.c-407-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:400:\t    sprintf(emsg, \"Sorry, can not handle LogLuv images with %s=%d\",\nextlib/libtiff/tif_getimage.c-401-\t\t\"Planarconfiguration\", planarconfig);\nextlib/libtiff/tif_getimage.c-402-\t    return (0);\nextlib/libtiff/tif_getimage.c-403-\t}\nextlib/libtiff/tif_getimage.c-404-\tTIFFSetField(tif, TIFFTAG_SGILOGDATAFMT, SGILOGDATAFMT_8BIT);\nextlib/libtiff/tif_getimage.c-405-\timg->photometric = PHOTOMETRIC_RGB;\t\t/* little white lie */\nextlib/libtiff/tif_getimage.c-406-\timg->bitspersample = 8;\nextlib/libtiff/tif_getimage.c-407-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-408-    case PHOTOMETRIC_CIELAB",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-409-\tbreak;"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-408-    case PHOTOMETRIC_CIELAB:\nextlib/libtiff/tif_getimage.c-409-\tbreak;"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-410-    default",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_getimage.c-410-    default:"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 411,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-412-\t    photoTag, img->photometric);",
        "extlib/libtiff/tif_getimage.c-413-\treturn (0);",
        "extlib/libtiff/tif_getimage.c-414-    }",
        "extlib/libtiff/tif_getimage.c-415-    img->Map = NULL;",
        "extlib/libtiff/tif_getimage.c-416-    img->BWmap = NULL;",
        "extlib/libtiff/tif_getimage.c-417-    img->PALmap = NULL;",
        "extlib/libtiff/tif_getimage.c-418-    img->ycbcr = NULL;",
        "extlib/libtiff/tif_getimage.c-419-    img->cielab = NULL;",
        "extlib/libtiff/tif_getimage.c-420-    TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &img->width);",
        "extlib/libtiff/tif_getimage.c-421-    TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &img->height);",
        "extlib/libtiff/tif_getimage.c-422-    TIFFGetFieldDefaulted(tif, TIFFTAG_ORIENTATION, &img->orientation);",
        "extlib/libtiff/tif_getimage.c-423-    img->isContig =",
        "extlib/libtiff/tif_getimage.c-424-\t!(planarconfig == PLANARCONFIG_SEPARATE && colorchannels > 1);",
        "extlib/libtiff/tif_getimage.c-425-    if (img->isContig) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:411:\tsprintf(emsg, \"Sorry, can not handle image with %s=%d\",\nextlib/libtiff/tif_getimage.c-412-\t    photoTag, img->photometric);\nextlib/libtiff/tif_getimage.c-413-\treturn (0);\nextlib/libtiff/tif_getimage.c-414-    }\nextlib/libtiff/tif_getimage.c-415-    img->Map = NULL;\nextlib/libtiff/tif_getimage.c-416-    img->BWmap = NULL;\nextlib/libtiff/tif_getimage.c-417-    img->PALmap = NULL;\nextlib/libtiff/tif_getimage.c-418-    img->ycbcr = NULL;\nextlib/libtiff/tif_getimage.c-419-    img->cielab = NULL;\nextlib/libtiff/tif_getimage.c-420-    TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &img->width);\nextlib/libtiff/tif_getimage.c-421-    TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &img->height);\nextlib/libtiff/tif_getimage.c-422-    TIFFGetFieldDefaulted(tif, TIFFTAG_ORIENTATION, &img->orientation);\nextlib/libtiff/tif_getimage.c-423-    img->isContig =\nextlib/libtiff/tif_getimage.c-424-\t!(planarconfig == PLANARCONFIG_SEPARATE && colorchannels > 1);\nextlib/libtiff/tif_getimage.c-425-    if (img->isContig) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-426-\timg->get = TIFFIsTiled(tif) ? gtTileContig ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-427-\tif (!pickTileContigCase(img)) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-426-\timg->get = TIFFIsTiled(tif) ? gtTileContig : gtStripContig;\nextlib/libtiff/tif_getimage.c-427-\tif (!pickTileContigCase(img)) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 428,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-429-\t\treturn 0;",
        "extlib/libtiff/tif_getimage.c-430-\t}",
        "extlib/libtiff/tif_getimage.c-431-    } else {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:428:\t\tsprintf(emsg, \"Sorry, can not handle image\");\nextlib/libtiff/tif_getimage.c-429-\t\treturn 0;\nextlib/libtiff/tif_getimage.c-430-\t}\nextlib/libtiff/tif_getimage.c-431-    } else {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c-432-\timg->get = TIFFIsTiled(tif) ? gtTileSeparate ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-433-\tif (!pickTileSeparateCase(img)) {"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c-432-\timg->get = TIFFIsTiled(tif) ? gtTileSeparate : gtStripSeparate;\nextlib/libtiff/tif_getimage.c-433-\tif (!pickTileSeparateCase(img)) {"
    },
    {
      "file_path": "extlib/libtiff/tif_getimage.c",
      "sprintf_line": 434,
      "context_lines": [
        "extlib/libtiff/tif_getimage.c-435-\t\treturn 0;",
        "extlib/libtiff/tif_getimage.c-436-\t}",
        "extlib/libtiff/tif_getimage.c-437-    }",
        "extlib/libtiff/tif_getimage.c-438-    return 1;",
        "extlib/libtiff/tif_getimage.c-439-}",
        "extlib/libtiff/tif_getimage.c-440-",
        "extlib/libtiff/tif_getimage.c-441-int",
        "extlib/libtiff/tif_getimage.c-442-TIFFRGBAImageGet(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)",
        "extlib/libtiff/tif_getimage.c-443-{",
        "extlib/libtiff/tif_getimage.c-444-    if (img->get == NULL) {",
        "extlib/libtiff/tif_win3.c-198-\t}",
        "extlib/libtiff/tif_win3.c-199-\treturn (0);",
        "extlib/libtiff/tif_win3.c-200-}",
        "extlib/libtiff/tif_win3.c-201-",
        "extlib/libtiff/tif_win3.c-202-static void",
        "extlib/libtiff/tif_win3.c-203-win3WarningHandler(const char* module, const char* fmt, va_list ap)",
        "extlib/libtiff/tif_win3.c-204-{",
        "extlib/libtiff/tif_win3.c-205-\tchar e[512] = { '\\0' };",
        "extlib/libtiff/tif_win3.c-206-\tif (module != NULL)"
      ],
      "raw_content": "extlib/libtiff/tif_getimage.c:434:\t\tsprintf(emsg, \"Sorry, can not handle image\");\nextlib/libtiff/tif_getimage.c-435-\t\treturn 0;\nextlib/libtiff/tif_getimage.c-436-\t}\nextlib/libtiff/tif_getimage.c-437-    }\nextlib/libtiff/tif_getimage.c-438-    return 1;\nextlib/libtiff/tif_getimage.c-439-}\nextlib/libtiff/tif_getimage.c-440-\nextlib/libtiff/tif_getimage.c-441-int\nextlib/libtiff/tif_getimage.c-442-TIFFRGBAImageGet(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)\nextlib/libtiff/tif_getimage.c-443-{\nextlib/libtiff/tif_getimage.c-444-    if (img->get == NULL) {\nextlib/libtiff/tif_win3.c-198-\t}\nextlib/libtiff/tif_win3.c-199-\treturn (0);\nextlib/libtiff/tif_win3.c-200-}\nextlib/libtiff/tif_win3.c-201-\nextlib/libtiff/tif_win3.c-202-static void\nextlib/libtiff/tif_win3.c-203-win3WarningHandler(const char* module, const char* fmt, va_list ap)\nextlib/libtiff/tif_win3.c-204-{\nextlib/libtiff/tif_win3.c-205-\tchar e[512] = { '\\0' };\nextlib/libtiff/tif_win3.c-206-\tif (module != NULL)"
    },
    {
      "file_path": "extlib/libtiff/tif_win3.c-207-\t\tstrcat(strcpy(e, module), \"",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_win3.c-207-\t\tstrcat(strcpy(e, module), \":\");"
    },
    {
      "file_path": "extlib/libtiff/tif_win3.c",
      "sprintf_line": 208,
      "context_lines": [
        "extlib/libtiff/tif_win3.c-209-\tstrcat(e, \".\");",
        "extlib/libtiff/tif_win3.c-210-\tMessageBox(GetActiveWindow(), e, \"LibTIFF Warning\",",
        "extlib/libtiff/tif_win3.c-211-\t    MB_OK|MB_ICONEXCLAMATION);",
        "extlib/libtiff/tif_win3.c-212-}",
        "extlib/libtiff/tif_win3.c-213-TIFFErrorHandler _TIFFwarningHandler = win3WarningHandler;",
        "extlib/libtiff/tif_win3.c-214-",
        "extlib/libtiff/tif_win3.c-215-static void",
        "extlib/libtiff/tif_win3.c-216-win3ErrorHandler(const char* module, const char* fmt, va_list ap)",
        "extlib/libtiff/tif_win3.c-217-{",
        "extlib/libtiff/tif_win3.c-218-\tchar e[512] = { '\\0' };",
        "extlib/libtiff/tif_win3.c-219-\tif (module != NULL)"
      ],
      "raw_content": "extlib/libtiff/tif_win3.c:208:\tvsprintf(e+strlen(e), fmt, ap);\nextlib/libtiff/tif_win3.c-209-\tstrcat(e, \".\");\nextlib/libtiff/tif_win3.c-210-\tMessageBox(GetActiveWindow(), e, \"LibTIFF Warning\",\nextlib/libtiff/tif_win3.c-211-\t    MB_OK|MB_ICONEXCLAMATION);\nextlib/libtiff/tif_win3.c-212-}\nextlib/libtiff/tif_win3.c-213-TIFFErrorHandler _TIFFwarningHandler = win3WarningHandler;\nextlib/libtiff/tif_win3.c-214-\nextlib/libtiff/tif_win3.c-215-static void\nextlib/libtiff/tif_win3.c-216-win3ErrorHandler(const char* module, const char* fmt, va_list ap)\nextlib/libtiff/tif_win3.c-217-{\nextlib/libtiff/tif_win3.c-218-\tchar e[512] = { '\\0' };\nextlib/libtiff/tif_win3.c-219-\tif (module != NULL)"
    },
    {
      "file_path": "extlib/libtiff/tif_win3.c-220-\t\tstrcat(strcpy(e, module), \"",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/libtiff/tif_win3.c-220-\t\tstrcat(strcpy(e, module), \":\");"
    },
    {
      "file_path": "extlib/libtiff/tif_win3.c",
      "sprintf_line": 221,
      "context_lines": [
        "extlib/libtiff/tif_win3.c-222-\tstrcat(e, \".\");",
        "extlib/libtiff/tif_win3.c-223-\tMessageBox(GetActiveWindow(), e, \"LibTIFF Error\", MB_OK|MB_ICONSTOP);",
        "extlib/libtiff/tif_win3.c-224-}",
        "extlib/libtiff/tif_win3.c-225-TIFFErrorHandler _TIFFerrorHandler = win3ErrorHandler;",
        "extlib/libtiff/tif_win32.c-339-{",
        "extlib/libtiff/tif_win32.c-340-#ifndef TIF_PLATFORM_CONSOLE",
        "extlib/libtiff/tif_win32.c-341-\tLPTSTR szTitle;",
        "extlib/libtiff/tif_win32.c-342-\tLPTSTR szTmp;",
        "extlib/libtiff/tif_win32.c-343-\tLPCTSTR szTitleText = \"%s Warning\";",
        "extlib/libtiff/tif_win32.c-344-\tLPCTSTR szDefaultModule = \"LIBTIFF\";"
      ],
      "raw_content": "extlib/libtiff/tif_win3.c:221:\tvsprintf(e+strlen(e), fmt, ap);\nextlib/libtiff/tif_win3.c-222-\tstrcat(e, \".\");\nextlib/libtiff/tif_win3.c-223-\tMessageBox(GetActiveWindow(), e, \"LibTIFF Error\", MB_OK|MB_ICONSTOP);\nextlib/libtiff/tif_win3.c-224-}\nextlib/libtiff/tif_win3.c-225-TIFFErrorHandler _TIFFerrorHandler = win3ErrorHandler;\nextlib/libtiff/tif_win32.c-339-{\nextlib/libtiff/tif_win32.c-340-#ifndef TIF_PLATFORM_CONSOLE\nextlib/libtiff/tif_win32.c-341-\tLPTSTR szTitle;\nextlib/libtiff/tif_win32.c-342-\tLPTSTR szTmp;\nextlib/libtiff/tif_win32.c-343-\tLPCTSTR szTitleText = \"%s Warning\";\nextlib/libtiff/tif_win32.c-344-\tLPCTSTR szDefaultModule = \"LIBTIFF\";"
    },
    {
      "file_path": "extlib/libtiff/tif_win32.c-345-\tLPCTSTR szTmpModule = (module == NULL) ? szDefaultModule ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_win32.c-346-\tif ((szTitle = (LPTSTR)LocalAlloc(LMEM_FIXED, (strlen(szTmpModule) +",
        "extlib/libtiff/tif_win32.c-347-\t\tstrlen(szTitleText) + strlen(fmt) + 128)*sizeof(char))) == NULL)",
        "extlib/libtiff/tif_win32.c-348-\t\treturn;"
      ],
      "raw_content": "extlib/libtiff/tif_win32.c-345-\tLPCTSTR szTmpModule = (module == NULL) ? szDefaultModule : module;\nextlib/libtiff/tif_win32.c-346-\tif ((szTitle = (LPTSTR)LocalAlloc(LMEM_FIXED, (strlen(szTmpModule) +\nextlib/libtiff/tif_win32.c-347-\t\tstrlen(szTitleText) + strlen(fmt) + 128)*sizeof(char))) == NULL)\nextlib/libtiff/tif_win32.c-348-\t\treturn;"
    },
    {
      "file_path": "extlib/libtiff/tif_win32.c",
      "sprintf_line": 349,
      "context_lines": [
        "extlib/libtiff/tif_win32.c-350-\tszTmp = szTitle + (strlen(szTitle)+2)*sizeof(char);"
      ],
      "raw_content": "extlib/libtiff/tif_win32.c:349:\tsprintf(szTitle, szTitleText, szTmpModule);\nextlib/libtiff/tif_win32.c-350-\tszTmp = szTitle + (strlen(szTitle)+2)*sizeof(char);"
    },
    {
      "file_path": "extlib/libtiff/tif_win32.c",
      "sprintf_line": 351,
      "context_lines": [
        "extlib/libtiff/tif_win32.c-352-\tMessageBoxA(GetFocus(), szTmp, szTitle, MB_OK | MB_ICONINFORMATION);",
        "extlib/libtiff/tif_win32.c-353-\tLocalFree(szTitle);",
        "extlib/libtiff/tif_win32.c-354-\treturn;",
        "extlib/libtiff/tif_win32.c-355-#else",
        "extlib/libtiff/tif_win32.c-356-\tif (module != NULL)"
      ],
      "raw_content": "extlib/libtiff/tif_win32.c:351:\tvsprintf(szTmp, fmt, ap);\nextlib/libtiff/tif_win32.c-352-\tMessageBoxA(GetFocus(), szTmp, szTitle, MB_OK | MB_ICONINFORMATION);\nextlib/libtiff/tif_win32.c-353-\tLocalFree(szTitle);\nextlib/libtiff/tif_win32.c-354-\treturn;\nextlib/libtiff/tif_win32.c-355-#else\nextlib/libtiff/tif_win32.c-356-\tif (module != NULL)"
    },
    {
      "file_path": "extlib/libtiff/tif_win32.c-357-\t\tfprintf(stderr, \"%s",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_win32.c-358-\tfprintf(stderr, \"Warning, \");",
        "extlib/libtiff/tif_win32.c-359-\tvfprintf(stderr, fmt, ap);",
        "extlib/libtiff/tif_win32.c-360-\tfprintf(stderr, \".\\n\");",
        "extlib/libtiff/tif_win32.c-361-#endif        ",
        "extlib/libtiff/tif_win32.c-367-{",
        "extlib/libtiff/tif_win32.c-368-#ifndef TIF_PLATFORM_CONSOLE",
        "extlib/libtiff/tif_win32.c-369-\tLPTSTR szTitle;",
        "extlib/libtiff/tif_win32.c-370-\tLPTSTR szTmp;",
        "extlib/libtiff/tif_win32.c-371-\tLPCTSTR szTitleText = \"%s Error\";",
        "extlib/libtiff/tif_win32.c-372-\tLPCTSTR szDefaultModule = \"LIBTIFF\";"
      ],
      "raw_content": "extlib/libtiff/tif_win32.c-357-\t\tfprintf(stderr, \"%s: \", module);\nextlib/libtiff/tif_win32.c-358-\tfprintf(stderr, \"Warning, \");\nextlib/libtiff/tif_win32.c-359-\tvfprintf(stderr, fmt, ap);\nextlib/libtiff/tif_win32.c-360-\tfprintf(stderr, \".\\n\");\nextlib/libtiff/tif_win32.c-361-#endif        \nextlib/libtiff/tif_win32.c-367-{\nextlib/libtiff/tif_win32.c-368-#ifndef TIF_PLATFORM_CONSOLE\nextlib/libtiff/tif_win32.c-369-\tLPTSTR szTitle;\nextlib/libtiff/tif_win32.c-370-\tLPTSTR szTmp;\nextlib/libtiff/tif_win32.c-371-\tLPCTSTR szTitleText = \"%s Error\";\nextlib/libtiff/tif_win32.c-372-\tLPCTSTR szDefaultModule = \"LIBTIFF\";"
    },
    {
      "file_path": "extlib/libtiff/tif_win32.c-373-\tLPCTSTR szTmpModule = (module == NULL) ? szDefaultModule ",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_win32.c-374-\tif ((szTitle = (LPTSTR)LocalAlloc(LMEM_FIXED, (strlen(szTmpModule) +",
        "extlib/libtiff/tif_win32.c-375-\t\tstrlen(szTitleText) + strlen(fmt) + 128)*sizeof(char))) == NULL)",
        "extlib/libtiff/tif_win32.c-376-\t\treturn;"
      ],
      "raw_content": "extlib/libtiff/tif_win32.c-373-\tLPCTSTR szTmpModule = (module == NULL) ? szDefaultModule : module;\nextlib/libtiff/tif_win32.c-374-\tif ((szTitle = (LPTSTR)LocalAlloc(LMEM_FIXED, (strlen(szTmpModule) +\nextlib/libtiff/tif_win32.c-375-\t\tstrlen(szTitleText) + strlen(fmt) + 128)*sizeof(char))) == NULL)\nextlib/libtiff/tif_win32.c-376-\t\treturn;"
    },
    {
      "file_path": "extlib/libtiff/tif_win32.c",
      "sprintf_line": 377,
      "context_lines": [
        "extlib/libtiff/tif_win32.c-378-\tszTmp = szTitle + (strlen(szTitle)+2)*sizeof(char);"
      ],
      "raw_content": "extlib/libtiff/tif_win32.c:377:\tsprintf(szTitle, szTitleText, szTmpModule);\nextlib/libtiff/tif_win32.c-378-\tszTmp = szTitle + (strlen(szTitle)+2)*sizeof(char);"
    },
    {
      "file_path": "extlib/libtiff/tif_win32.c",
      "sprintf_line": 379,
      "context_lines": [
        "extlib/libtiff/tif_win32.c-380-\tMessageBoxA(GetFocus(), szTmp, szTitle, MB_OK | MB_ICONEXCLAMATION);",
        "extlib/libtiff/tif_win32.c-381-\tLocalFree(szTitle);",
        "extlib/libtiff/tif_win32.c-382-\treturn;",
        "extlib/libtiff/tif_win32.c-383-#else",
        "extlib/libtiff/tif_win32.c-384-\tif (module != NULL)"
      ],
      "raw_content": "extlib/libtiff/tif_win32.c:379:\tvsprintf(szTmp, fmt, ap);\nextlib/libtiff/tif_win32.c-380-\tMessageBoxA(GetFocus(), szTmp, szTitle, MB_OK | MB_ICONEXCLAMATION);\nextlib/libtiff/tif_win32.c-381-\tLocalFree(szTitle);\nextlib/libtiff/tif_win32.c-382-\treturn;\nextlib/libtiff/tif_win32.c-383-#else\nextlib/libtiff/tif_win32.c-384-\tif (module != NULL)"
    },
    {
      "file_path": "extlib/libtiff/tif_win32.c-385-\t\tfprintf(stderr, \"%s",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/libtiff/tif_win32.c-386-\tvfprintf(stderr, fmt, ap);",
        "extlib/libtiff/tif_win32.c-387-\tfprintf(stderr, \".\\n\");",
        "extlib/libtiff/tif_win32.c-388-#endif        ",
        "extlib/libtiff/tif_win32.c-389-}",
        "extlib/zlib/ChangeLog-47-- Add gzdirect() function to indicate transparent reads",
        "extlib/zlib/ChangeLog-48-- Update contrib/minizip [Vollant]",
        "extlib/zlib/ChangeLog-49-- Fix compilation of deflate.c when both ASMV and FASTEST [Oberhumer]",
        "extlib/zlib/ChangeLog-50-- Add casts in crc32.c to avoid warnings [Oberhumer]",
        "extlib/zlib/ChangeLog-51-- Add contrib/masmx64 [Vollant]",
        "extlib/zlib/ChangeLog-52-- Update contrib/asm586, asm686, masmx86, testzlib, vstudio [Vollant]",
        "extlib/zlib/ChangeLog-53-",
        "extlib/zlib/ChangeLog-54-Changes in 1.2.2.2 (30 December 2004)",
        "extlib/zlib/ChangeLog-55-- Replace structure assignments in deflate.c and inflate.c with zmemcpy to",
        "extlib/zlib/ChangeLog-56-  avoid implicit memcpy calls (portability for no-library compilation)"
      ],
      "raw_content": "extlib/libtiff/tif_win32.c-385-\t\tfprintf(stderr, \"%s: \", module);\nextlib/libtiff/tif_win32.c-386-\tvfprintf(stderr, fmt, ap);\nextlib/libtiff/tif_win32.c-387-\tfprintf(stderr, \".\\n\");\nextlib/libtiff/tif_win32.c-388-#endif        \nextlib/libtiff/tif_win32.c-389-}\nextlib/zlib/ChangeLog-47-- Add gzdirect() function to indicate transparent reads\nextlib/zlib/ChangeLog-48-- Update contrib/minizip [Vollant]\nextlib/zlib/ChangeLog-49-- Fix compilation of deflate.c when both ASMV and FASTEST [Oberhumer]\nextlib/zlib/ChangeLog-50-- Add casts in crc32.c to avoid warnings [Oberhumer]\nextlib/zlib/ChangeLog-51-- Add contrib/masmx64 [Vollant]\nextlib/zlib/ChangeLog-52-- Update contrib/asm586, asm686, masmx86, testzlib, vstudio [Vollant]\nextlib/zlib/ChangeLog-53-\nextlib/zlib/ChangeLog-54-Changes in 1.2.2.2 (30 December 2004)\nextlib/zlib/ChangeLog-55-- Replace structure assignments in deflate.c and inflate.c with zmemcpy to\nextlib/zlib/ChangeLog-56-  avoid implicit memcpy calls (portability for no-library compilation)"
    },
    {
      "file_path": "extlib/zlib/ChangeLog",
      "sprintf_line": 57,
      "context_lines": [
        "extlib/zlib/ChangeLog-58-- Add INFLATE_STRICT to check distances against zlib header",
        "extlib/zlib/ChangeLog-59-- Improve WinCE errno handling and comments [Chang]",
        "extlib/zlib/ChangeLog-60-- Remove comment about no gzip header processing in FAQ",
        "extlib/zlib/ChangeLog-61-- Add Z_FIXED strategy option to deflateInit2() to force fixed trees",
        "extlib/zlib/ChangeLog-62-- Add updated make_vms.com [Coghlan], update README",
        "extlib/zlib/ChangeLog-63-- Create a new \"examples\" directory, move gzappend.c there, add zpipe.c,",
        "extlib/zlib/ChangeLog-64-  fitblk.c, gzlog.[ch], gzjoin.c, and zlib_how.html.",
        "extlib/zlib/ChangeLog-65-- Add FAQ entry and comments in deflate.c on uninitialized memory access",
        "extlib/zlib/ChangeLog-66-- Add Solaris 9 make options in configure [Gilbert]",
        "extlib/zlib/ChangeLog-67-- Allow strerror() usage in gzio.c for STDC",
        "extlib/zlib/ChangeLog-262-- Update contrib/minizip and contrib/vstudio [Vollant]",
        "extlib/zlib/ChangeLog-263-- Fix printf format in example.c",
        "extlib/zlib/ChangeLog-264-- Correct cdecl support in zconf.in.h [Anisimkov]",
        "extlib/zlib/ChangeLog-265-- Minor FAQ updates",
        "extlib/zlib/ChangeLog-266-",
        "extlib/zlib/ChangeLog-267-Changes in 1.2.0.2 (13 July 2003)",
        "extlib/zlib/ChangeLog-268-- Add ZLIB_VERNUM in zlib.h for numerical preprocessor comparisons",
        "extlib/zlib/ChangeLog-269-- Attempt to avoid warnings in crc32.c for pointer-int conversion",
        "extlib/zlib/ChangeLog-270-- Add AIX to configure, remove aix directory [Bakker]",
        "extlib/zlib/ChangeLog-271-- Add some casts to minigzip.c"
      ],
      "raw_content": "extlib/zlib/ChangeLog:57:- Increase sprintf() buffer size in gzdopen() to allow for large numbers\nextlib/zlib/ChangeLog-58-- Add INFLATE_STRICT to check distances against zlib header\nextlib/zlib/ChangeLog-59-- Improve WinCE errno handling and comments [Chang]\nextlib/zlib/ChangeLog-60-- Remove comment about no gzip header processing in FAQ\nextlib/zlib/ChangeLog-61-- Add Z_FIXED strategy option to deflateInit2() to force fixed trees\nextlib/zlib/ChangeLog-62-- Add updated make_vms.com [Coghlan], update README\nextlib/zlib/ChangeLog-63-- Create a new \"examples\" directory, move gzappend.c there, add zpipe.c,\nextlib/zlib/ChangeLog-64-  fitblk.c, gzlog.[ch], gzjoin.c, and zlib_how.html.\nextlib/zlib/ChangeLog-65-- Add FAQ entry and comments in deflate.c on uninitialized memory access\nextlib/zlib/ChangeLog-66-- Add Solaris 9 make options in configure [Gilbert]\nextlib/zlib/ChangeLog-67-- Allow strerror() usage in gzio.c for STDC\nextlib/zlib/ChangeLog-262-- Update contrib/minizip and contrib/vstudio [Vollant]\nextlib/zlib/ChangeLog-263-- Fix printf format in example.c\nextlib/zlib/ChangeLog-264-- Correct cdecl support in zconf.in.h [Anisimkov]\nextlib/zlib/ChangeLog-265-- Minor FAQ updates\nextlib/zlib/ChangeLog-266-\nextlib/zlib/ChangeLog-267-Changes in 1.2.0.2 (13 July 2003)\nextlib/zlib/ChangeLog-268-- Add ZLIB_VERNUM in zlib.h for numerical preprocessor comparisons\nextlib/zlib/ChangeLog-269-- Attempt to avoid warnings in crc32.c for pointer-int conversion\nextlib/zlib/ChangeLog-270-- Add AIX to configure, remove aix directory [Bakker]\nextlib/zlib/ChangeLog-271-- Add some casts to minigzip.c"
    },
    {
      "file_path": "extlib/zlib/ChangeLog",
      "sprintf_line": 272,
      "context_lines": [
        "extlib/zlib/ChangeLog-273-- Remove #elif's from crc32.c",
        "extlib/zlib/ChangeLog-274-- Change leave label to inf_leave in inflate.c and infback.c to avoid",
        "extlib/zlib/ChangeLog-275-  library conflicts",
        "extlib/zlib/ChangeLog-276-- Remove inflate gzip decoding by default--only enable gzip decoding by",
        "extlib/zlib/ChangeLog-277-  special request for stricter backward compatibility",
        "extlib/zlib/ChangeLog-278-- Add zlibCompileFlags() function to return compilation information",
        "extlib/zlib/ChangeLog-279-- More typecasting in deflate.c to avoid warnings",
        "extlib/zlib/ChangeLog-280-- Remove leading underscore from _Capital #defines [Truta]",
        "extlib/zlib/ChangeLog-281-- Fix configure to link shared library when testing",
        "extlib/zlib/ChangeLog-282-- Add some Windows CE target adjustments [Mai]",
        "extlib/zlib/ChangeLog-301-Changes in 1.2.0.1 (17 March 2003)",
        "extlib/zlib/ChangeLog-302-- Add Z_RLE strategy for run-length encoding [Truta]",
        "extlib/zlib/ChangeLog-303-    - When Z_RLE requested, restrict matches to distance one",
        "extlib/zlib/ChangeLog-304-    - Update zlib.h, minigzip.c, gzopen(), gzdopen() for Z_RLE",
        "extlib/zlib/ChangeLog-305-- Correct FASTEST compilation to allow level == 0",
        "extlib/zlib/ChangeLog-306-- Clean up what gets compiled for FASTEST",
        "extlib/zlib/ChangeLog-307-- Incorporate changes to zconf.in.h [Vollant]",
        "extlib/zlib/ChangeLog-308-    - Refine detection of Turbo C need for dummy returns",
        "extlib/zlib/ChangeLog-309-    - Refine ZLIB_DLL compilation",
        "extlib/zlib/ChangeLog-310-    - Include additional header file on VMS for off_t typedef"
      ],
      "raw_content": "extlib/zlib/ChangeLog:272:- Improve checking after insecure sprintf() or vsprintf() calls\nextlib/zlib/ChangeLog-273-- Remove #elif's from crc32.c\nextlib/zlib/ChangeLog-274-- Change leave label to inf_leave in inflate.c and infback.c to avoid\nextlib/zlib/ChangeLog-275-  library conflicts\nextlib/zlib/ChangeLog-276-- Remove inflate gzip decoding by default--only enable gzip decoding by\nextlib/zlib/ChangeLog-277-  special request for stricter backward compatibility\nextlib/zlib/ChangeLog-278-- Add zlibCompileFlags() function to return compilation information\nextlib/zlib/ChangeLog-279-- More typecasting in deflate.c to avoid warnings\nextlib/zlib/ChangeLog-280-- Remove leading underscore from _Capital #defines [Truta]\nextlib/zlib/ChangeLog-281-- Fix configure to link shared library when testing\nextlib/zlib/ChangeLog-282-- Add some Windows CE target adjustments [Mai]\nextlib/zlib/ChangeLog-301-Changes in 1.2.0.1 (17 March 2003)\nextlib/zlib/ChangeLog-302-- Add Z_RLE strategy for run-length encoding [Truta]\nextlib/zlib/ChangeLog-303-    - When Z_RLE requested, restrict matches to distance one\nextlib/zlib/ChangeLog-304-    - Update zlib.h, minigzip.c, gzopen(), gzdopen() for Z_RLE\nextlib/zlib/ChangeLog-305-- Correct FASTEST compilation to allow level == 0\nextlib/zlib/ChangeLog-306-- Clean up what gets compiled for FASTEST\nextlib/zlib/ChangeLog-307-- Incorporate changes to zconf.in.h [Vollant]\nextlib/zlib/ChangeLog-308-    - Refine detection of Turbo C need for dummy returns\nextlib/zlib/ChangeLog-309-    - Refine ZLIB_DLL compilation\nextlib/zlib/ChangeLog-310-    - Include additional header file on VMS for off_t typedef"
    },
    {
      "file_path": "extlib/zlib/ChangeLog",
      "sprintf_line": 311,
      "context_lines": [
        "extlib/zlib/ChangeLog-312-- Add some casts in inffast.c",
        "extlib/zlib/ChangeLog-313-- Enchance comments in zlib.h on what happens if gzprintf() tries to",
        "extlib/zlib/ChangeLog-314-  write more than 4095 bytes before compression",
        "extlib/zlib/ChangeLog-315-- Remove unused state from inflateBackEnd()",
        "extlib/zlib/ChangeLog-316-- Remove exit(0) from minigzip.c, example.c",
        "extlib/zlib/ChangeLog-317-- Get rid of all those darn tabs",
        "extlib/zlib/ChangeLog-318-- Add \"check\" target to Makefile.in that does the same thing as \"test\"",
        "extlib/zlib/ChangeLog-319-- Add \"mostlyclean\" and \"maintainer-clean\" targets to Makefile.in",
        "extlib/zlib/ChangeLog-320-- Update contrib/inflate86 [Anderson]",
        "extlib/zlib/ChangeLog-321-- Update contrib/testzlib, contrib/vstudio, contrib/minizip [Vollant]",
        "extlib/zlib/ChangeLog-468-- increase size of I/O buffers in minigzip.c and gzio.c (not a big gain",
        "extlib/zlib/ChangeLog-469-  on Sun but significant on HP)",
        "extlib/zlib/ChangeLog-470-",
        "extlib/zlib/ChangeLog-471-- add a pointer to experimental unzip library in README (Gilles Vollant)",
        "extlib/zlib/ChangeLog-472-- initialize variable gcc in configure (Chris Herborth)",
        "extlib/zlib/ChangeLog-473-",
        "extlib/zlib/ChangeLog-474-Changes in 1.0.9 (17 Feb 1998)",
        "extlib/zlib/ChangeLog-475-- added gzputs and gzgets functions",
        "extlib/zlib/ChangeLog-476-- do not clear eof flag in gzseek (Mark Diekhans)",
        "extlib/zlib/ChangeLog-477-- fix gzseek for files in transparent mode (Mark Diekhans)"
      ],
      "raw_content": "extlib/zlib/ChangeLog:311:- Try to use _vsnprintf where it supplants vsprintf [Vollant]\nextlib/zlib/ChangeLog-312-- Add some casts in inffast.c\nextlib/zlib/ChangeLog-313-- Enchance comments in zlib.h on what happens if gzprintf() tries to\nextlib/zlib/ChangeLog-314-  write more than 4095 bytes before compression\nextlib/zlib/ChangeLog-315-- Remove unused state from inflateBackEnd()\nextlib/zlib/ChangeLog-316-- Remove exit(0) from minigzip.c, example.c\nextlib/zlib/ChangeLog-317-- Get rid of all those darn tabs\nextlib/zlib/ChangeLog-318-- Add \"check\" target to Makefile.in that does the same thing as \"test\"\nextlib/zlib/ChangeLog-319-- Add \"mostlyclean\" and \"maintainer-clean\" targets to Makefile.in\nextlib/zlib/ChangeLog-320-- Update contrib/inflate86 [Anderson]\nextlib/zlib/ChangeLog-321-- Update contrib/testzlib, contrib/vstudio, contrib/minizip [Vollant]\nextlib/zlib/ChangeLog-468-- increase size of I/O buffers in minigzip.c and gzio.c (not a big gain\nextlib/zlib/ChangeLog-469-  on Sun but significant on HP)\nextlib/zlib/ChangeLog-470-\nextlib/zlib/ChangeLog-471-- add a pointer to experimental unzip library in README (Gilles Vollant)\nextlib/zlib/ChangeLog-472-- initialize variable gcc in configure (Chris Herborth)\nextlib/zlib/ChangeLog-473-\nextlib/zlib/ChangeLog-474-Changes in 1.0.9 (17 Feb 1998)\nextlib/zlib/ChangeLog-475-- added gzputs and gzgets functions\nextlib/zlib/ChangeLog-476-- do not clear eof flag in gzseek (Mark Diekhans)\nextlib/zlib/ChangeLog-477-- fix gzseek for files in transparent mode (Mark Diekhans)"
    },
    {
      "file_path": "extlib/zlib/ChangeLog",
      "sprintf_line": 478,
      "context_lines": [
        "extlib/zlib/ChangeLog-479-- replace EXPORT with ZEXPORT to avoid conflict with other programs",
        "extlib/zlib/ChangeLog-480-- added compress2 in zconf.h, zlib.def, zlib.dnt",
        "extlib/zlib/ChangeLog-481-- new asm code from Gilles Vollant in contrib/asm386"
      ],
      "raw_content": "extlib/zlib/ChangeLog:478:- do not assume that vsprintf returns the number of bytes written (Jens Krinke)\nextlib/zlib/ChangeLog-479-- replace EXPORT with ZEXPORT to avoid conflict with other programs\nextlib/zlib/ChangeLog-480-- added compress2 in zconf.h, zlib.def, zlib.dnt\nextlib/zlib/ChangeLog-481-- new asm code from Gilles Vollant in contrib/asm386"
    },
    {
      "file_path": "extlib/zlib/ChangeLog-482-- simplify the inflate code (Mark)",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/zlib/ChangeLog-483- . Replace ZALLOC's in huft_build() with single ZALLOC in inflate_blocks_new()",
        "extlib/zlib/ChangeLog-484- . ZALLOC the length list in inflate_trees_fixed() instead of using stack",
        "extlib/zlib/ChangeLog-485- . ZALLOC the value area for huft_build() instead of using stack",
        "extlib/zlib/ChangeLog-486- . Simplify Z_FINISH check in inflate()",
        "extlib/zlib/ChangeLog-487-",
        "extlib/zlib/ChangeLog-488-- Avoid gcc 2.8.0 comparison bug a little differently than zlib 1.0.8",
        "extlib/zlib/FAQ-249-    single call. gzseek() and gztell() may be limited to 4 GB depending on how",
        "extlib/zlib/FAQ-250-    zlib is compiled. See the zlibCompileFlags() function in zlib.h.",
        "extlib/zlib/FAQ-251-",
        "extlib/zlib/FAQ-252-    The word \"may\" appears several times above since there is a 4 GB limit",
        "extlib/zlib/FAQ-253-    only if the compiler's \"long\" type is 32 bits. If the compiler's \"long\"",
        "extlib/zlib/FAQ-254-    type is 64 bits, then the limit is 16 exabytes.",
        "extlib/zlib/FAQ-255-",
        "extlib/zlib/FAQ-256-33. Does zlib have any security vulnerabilities?",
        "extlib/zlib/FAQ-257-",
        "extlib/zlib/FAQ-258-    The only one that we are aware of is potentially in gzprintf(). If zlib"
      ],
      "raw_content": "extlib/zlib/ChangeLog-482-- simplify the inflate code (Mark):\nextlib/zlib/ChangeLog-483- . Replace ZALLOC's in huft_build() with single ZALLOC in inflate_blocks_new()\nextlib/zlib/ChangeLog-484- . ZALLOC the length list in inflate_trees_fixed() instead of using stack\nextlib/zlib/ChangeLog-485- . ZALLOC the value area for huft_build() instead of using stack\nextlib/zlib/ChangeLog-486- . Simplify Z_FINISH check in inflate()\nextlib/zlib/ChangeLog-487-\nextlib/zlib/ChangeLog-488-- Avoid gcc 2.8.0 comparison bug a little differently than zlib 1.0.8\nextlib/zlib/FAQ-249-    single call. gzseek() and gztell() may be limited to 4 GB depending on how\nextlib/zlib/FAQ-250-    zlib is compiled. See the zlibCompileFlags() function in zlib.h.\nextlib/zlib/FAQ-251-\nextlib/zlib/FAQ-252-    The word \"may\" appears several times above since there is a 4 GB limit\nextlib/zlib/FAQ-253-    only if the compiler's \"long\" type is 32 bits. If the compiler's \"long\"\nextlib/zlib/FAQ-254-    type is 64 bits, then the limit is 16 exabytes.\nextlib/zlib/FAQ-255-\nextlib/zlib/FAQ-256-33. Does zlib have any security vulnerabilities?\nextlib/zlib/FAQ-257-\nextlib/zlib/FAQ-258-    The only one that we are aware of is potentially in gzprintf(). If zlib"
    },
    {
      "file_path": "extlib/zlib/FAQ",
      "sprintf_line": 259,
      "context_lines": [
        "extlib/zlib/FAQ-260-    against a buffer overflow of a 4K string space, other than the caller of",
        "extlib/zlib/FAQ-261-    gzprintf() assuring that the output will not exceed 4K. On the other",
        "extlib/zlib/FAQ-262-    hand, if zlib is compiled to use snprintf() or vsnprintf(), which should",
        "extlib/zlib/FAQ-263-    normally be the case, then there is no vulnerability. The ./configure"
      ],
      "raw_content": "extlib/zlib/FAQ:259:    is compiled to use sprintf() or vsprintf(), then there is no protection\nextlib/zlib/FAQ-260-    against a buffer overflow of a 4K string space, other than the caller of\nextlib/zlib/FAQ-261-    gzprintf() assuring that the output will not exceed 4K. On the other\nextlib/zlib/FAQ-262-    hand, if zlib is compiled to use snprintf() or vsnprintf(), which should\nextlib/zlib/FAQ-263-    normally be the case, then there is no vulnerability. The ./configure"
    },
    {
      "file_path": "extlib/zlib/FAQ",
      "sprintf_line": 264,
      "context_lines": [
        "extlib/zlib/FAQ-265-    be used by gzprintf(). Also the zlibCompileFlags() function will return"
      ],
      "raw_content": "extlib/zlib/FAQ:264:    script will display warnings if an insecure variation of sprintf() will\nextlib/zlib/FAQ-265-    be used by gzprintf(). Also the zlibCompileFlags() function will return"
    },
    {
      "file_path": "extlib/zlib/FAQ",
      "sprintf_line": 266,
      "context_lines": [
        "extlib/zlib/FAQ-267-",
        "extlib/zlib/FAQ-268-    If you don't have snprintf() or vsnprintf() and would like one, you can"
      ],
      "raw_content": "extlib/zlib/FAQ:266:    information on what variant of sprintf() is used by gzprintf().\nextlib/zlib/FAQ-267-\nextlib/zlib/FAQ-268-    If you don't have snprintf() or vsnprintf() and would like one, you can"
    },
    {
      "file_path": "extlib/zlib/FAQ-269-    find a portable implementation here",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/zlib/FAQ-270-"
      ],
      "raw_content": "extlib/zlib/FAQ-269-    find a portable implementation here:\nextlib/zlib/FAQ-270-"
    },
    {
      "file_path": "extlib/zlib/FAQ-271-        http",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/zlib/FAQ-272-",
        "extlib/zlib/FAQ-273-    Note that you should be using the most recent version of zlib. Versions",
        "extlib/zlib/FAQ-274-    1.1.3 and before were subject to a double-free vulnerability.",
        "extlib/zlib/FAQ-275-",
        "extlib/zlib/FAQ-276-34. Is there a Java version of zlib?",
        "extlib/zlib/gzio.c-216-     Associate a gzFile with the file descriptor fd. fd is not dup'ed here",
        "extlib/zlib/gzio.c-217-   to mimic the behavio(u)r of fdopen.",
        "extlib/zlib/gzio.c-218-*/",
        "extlib/zlib/gzio.c-219-gzFile ZEXPORT gzdopen (fd, mode)",
        "extlib/zlib/gzio.c-220-    int fd;",
        "extlib/zlib/gzio.c-221-    const char *mode;",
        "extlib/zlib/gzio.c-222-{",
        "extlib/zlib/gzio.c-223-    char name[46];      /* allow for up to 128-bit integers */",
        "extlib/zlib/gzio.c-224-",
        "extlib/zlib/gzio.c-225-    if (fd < 0) return (gzFile)Z_NULL;"
      ],
      "raw_content": "extlib/zlib/FAQ-271-        http://www.ijs.si/software/snprintf/\nextlib/zlib/FAQ-272-\nextlib/zlib/FAQ-273-    Note that you should be using the most recent version of zlib. Versions\nextlib/zlib/FAQ-274-    1.1.3 and before were subject to a double-free vulnerability.\nextlib/zlib/FAQ-275-\nextlib/zlib/FAQ-276-34. Is there a Java version of zlib?\nextlib/zlib/gzio.c-216-     Associate a gzFile with the file descriptor fd. fd is not dup'ed here\nextlib/zlib/gzio.c-217-   to mimic the behavio(u)r of fdopen.\nextlib/zlib/gzio.c-218-*/\nextlib/zlib/gzio.c-219-gzFile ZEXPORT gzdopen (fd, mode)\nextlib/zlib/gzio.c-220-    int fd;\nextlib/zlib/gzio.c-221-    const char *mode;\nextlib/zlib/gzio.c-222-{\nextlib/zlib/gzio.c-223-    char name[46];      /* allow for up to 128-bit integers */\nextlib/zlib/gzio.c-224-\nextlib/zlib/gzio.c-225-    if (fd < 0) return (gzFile)Z_NULL;"
    },
    {
      "file_path": "extlib/zlib/gzio.c",
      "sprintf_line": 226,
      "context_lines": [
        "extlib/zlib/gzio.c-227-",
        "extlib/zlib/gzio.c-228-    return gz_open (name, mode, fd);",
        "extlib/zlib/gzio.c-229-}",
        "extlib/zlib/gzio.c-230-",
        "extlib/zlib/gzio.c-231-/* ===========================================================================",
        "extlib/zlib/gzio.c-232- * Update the compression level and strategy",
        "extlib/zlib/gzio.c-233- */",
        "extlib/zlib/gzio.c-234-int ZEXPORT gzsetparams (file, level, strategy)",
        "extlib/zlib/gzio.c-235-    gzFile file;",
        "extlib/zlib/gzio.c-236-    int level;",
        "extlib/zlib/gzio.c-602-",
        "extlib/zlib/gzio.c-603-int ZEXPORTVA gzprintf (gzFile file, const char *format, /* args */ ...)",
        "extlib/zlib/gzio.c-604-{",
        "extlib/zlib/gzio.c-605-    char buf[Z_PRINTF_BUFSIZE];",
        "extlib/zlib/gzio.c-606-    va_list va;",
        "extlib/zlib/gzio.c-607-    int len;",
        "extlib/zlib/gzio.c-608-",
        "extlib/zlib/gzio.c-609-    buf[sizeof(buf) - 1] = 0;",
        "extlib/zlib/gzio.c-610-    va_start(va, format);",
        "extlib/zlib/gzio.c-611-#ifdef NO_vsnprintf"
      ],
      "raw_content": "extlib/zlib/gzio.c:226:    sprintf(name, \"<fd:%d>\", fd); /* for debugging */\nextlib/zlib/gzio.c-227-\nextlib/zlib/gzio.c-228-    return gz_open (name, mode, fd);\nextlib/zlib/gzio.c-229-}\nextlib/zlib/gzio.c-230-\nextlib/zlib/gzio.c-231-/* ===========================================================================\nextlib/zlib/gzio.c-232- * Update the compression level and strategy\nextlib/zlib/gzio.c-233- */\nextlib/zlib/gzio.c-234-int ZEXPORT gzsetparams (file, level, strategy)\nextlib/zlib/gzio.c-235-    gzFile file;\nextlib/zlib/gzio.c-236-    int level;\nextlib/zlib/gzio.c-602-\nextlib/zlib/gzio.c-603-int ZEXPORTVA gzprintf (gzFile file, const char *format, /* args */ ...)\nextlib/zlib/gzio.c-604-{\nextlib/zlib/gzio.c-605-    char buf[Z_PRINTF_BUFSIZE];\nextlib/zlib/gzio.c-606-    va_list va;\nextlib/zlib/gzio.c-607-    int len;\nextlib/zlib/gzio.c-608-\nextlib/zlib/gzio.c-609-    buf[sizeof(buf) - 1] = 0;\nextlib/zlib/gzio.c-610-    va_start(va, format);\nextlib/zlib/gzio.c-611-#ifdef NO_vsnprintf"
    },
    {
      "file_path": "extlib/zlib/gzio.c",
      "sprintf_line": 612,
      "context_lines": [],
      "raw_content": "extlib/zlib/gzio.c:612:#  ifdef HAS_vsprintf_void"
    },
    {
      "file_path": "extlib/zlib/gzio.c",
      "sprintf_line": 613,
      "context_lines": [
        "extlib/zlib/gzio.c-614-    va_end(va);",
        "extlib/zlib/gzio.c-615-    for (len = 0; len < sizeof(buf); len++)",
        "extlib/zlib/gzio.c-616-        if (buf[len] == 0) break;",
        "extlib/zlib/gzio.c-617-#  else"
      ],
      "raw_content": "extlib/zlib/gzio.c:613:    (void)vsprintf(buf, format, va);\nextlib/zlib/gzio.c-614-    va_end(va);\nextlib/zlib/gzio.c-615-    for (len = 0; len < sizeof(buf); len++)\nextlib/zlib/gzio.c-616-        if (buf[len] == 0) break;\nextlib/zlib/gzio.c-617-#  else"
    },
    {
      "file_path": "extlib/zlib/gzio.c",
      "sprintf_line": 618,
      "context_lines": [
        "extlib/zlib/gzio.c-619-    va_end(va);",
        "extlib/zlib/gzio.c-620-#  endif",
        "extlib/zlib/gzio.c-621-#else",
        "extlib/zlib/gzio.c-622-#  ifdef HAS_vsnprintf_void",
        "extlib/zlib/gzio.c-623-    (void)vsnprintf(buf, sizeof(buf), format, va);",
        "extlib/zlib/gzio.c-624-    va_end(va);",
        "extlib/zlib/gzio.c-625-    len = strlen(buf);",
        "extlib/zlib/gzio.c-626-#  else",
        "extlib/zlib/gzio.c-627-    len = vsnprintf(buf, sizeof(buf), format, va);",
        "extlib/zlib/gzio.c-628-    va_end(va);",
        "extlib/zlib/gzio.c-639-    gzFile file;",
        "extlib/zlib/gzio.c-640-    const char *format;",
        "extlib/zlib/gzio.c-641-    int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,",
        "extlib/zlib/gzio.c-642-        a11, a12, a13, a14, a15, a16, a17, a18, a19, a20;",
        "extlib/zlib/gzio.c-643-{",
        "extlib/zlib/gzio.c-644-    char buf[Z_PRINTF_BUFSIZE];",
        "extlib/zlib/gzio.c-645-    int len;",
        "extlib/zlib/gzio.c-646-",
        "extlib/zlib/gzio.c-647-    buf[sizeof(buf) - 1] = 0;",
        "extlib/zlib/gzio.c-648-#ifdef NO_snprintf"
      ],
      "raw_content": "extlib/zlib/gzio.c:618:    len = vsprintf(buf, format, va);\nextlib/zlib/gzio.c-619-    va_end(va);\nextlib/zlib/gzio.c-620-#  endif\nextlib/zlib/gzio.c-621-#else\nextlib/zlib/gzio.c-622-#  ifdef HAS_vsnprintf_void\nextlib/zlib/gzio.c-623-    (void)vsnprintf(buf, sizeof(buf), format, va);\nextlib/zlib/gzio.c-624-    va_end(va);\nextlib/zlib/gzio.c-625-    len = strlen(buf);\nextlib/zlib/gzio.c-626-#  else\nextlib/zlib/gzio.c-627-    len = vsnprintf(buf, sizeof(buf), format, va);\nextlib/zlib/gzio.c-628-    va_end(va);\nextlib/zlib/gzio.c-639-    gzFile file;\nextlib/zlib/gzio.c-640-    const char *format;\nextlib/zlib/gzio.c-641-    int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,\nextlib/zlib/gzio.c-642-        a11, a12, a13, a14, a15, a16, a17, a18, a19, a20;\nextlib/zlib/gzio.c-643-{\nextlib/zlib/gzio.c-644-    char buf[Z_PRINTF_BUFSIZE];\nextlib/zlib/gzio.c-645-    int len;\nextlib/zlib/gzio.c-646-\nextlib/zlib/gzio.c-647-    buf[sizeof(buf) - 1] = 0;\nextlib/zlib/gzio.c-648-#ifdef NO_snprintf"
    },
    {
      "file_path": "extlib/zlib/gzio.c",
      "sprintf_line": 649,
      "context_lines": [],
      "raw_content": "extlib/zlib/gzio.c:649:#  ifdef HAS_sprintf_void"
    },
    {
      "file_path": "extlib/zlib/gzio.c",
      "sprintf_line": 650,
      "context_lines": [
        "extlib/zlib/gzio.c-651-            a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);",
        "extlib/zlib/gzio.c-652-    for (len = 0; len < sizeof(buf); len++)",
        "extlib/zlib/gzio.c-653-        if (buf[len] == 0) break;",
        "extlib/zlib/gzio.c-654-#  else"
      ],
      "raw_content": "extlib/zlib/gzio.c:650:    sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,\nextlib/zlib/gzio.c-651-            a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);\nextlib/zlib/gzio.c-652-    for (len = 0; len < sizeof(buf); len++)\nextlib/zlib/gzio.c-653-        if (buf[len] == 0) break;\nextlib/zlib/gzio.c-654-#  else"
    },
    {
      "file_path": "extlib/zlib/gzio.c",
      "sprintf_line": 655,
      "context_lines": [
        "extlib/zlib/gzio.c-656-                a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);",
        "extlib/zlib/gzio.c-657-#  endif",
        "extlib/zlib/gzio.c-658-#else",
        "extlib/zlib/gzio.c-659-#  ifdef HAS_snprintf_void",
        "extlib/zlib/gzio.c-660-    snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,",
        "extlib/zlib/gzio.c-661-             a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);",
        "extlib/zlib/gzio.c-662-    len = strlen(buf);",
        "extlib/zlib/gzio.c-663-#  else",
        "extlib/zlib/gzio.c-664-    len = snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,",
        "extlib/zlib/gzio.c-665-                 a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);",
        "extlib/zlib/zlib.h-979-                          deflate code when not needed)"
      ],
      "raw_content": "extlib/zlib/gzio.c:655:    len = sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,\nextlib/zlib/gzio.c-656-                a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);\nextlib/zlib/gzio.c-657-#  endif\nextlib/zlib/gzio.c-658-#else\nextlib/zlib/gzio.c-659-#  ifdef HAS_snprintf_void\nextlib/zlib/gzio.c-660-    snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,\nextlib/zlib/gzio.c-661-             a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);\nextlib/zlib/gzio.c-662-    len = strlen(buf);\nextlib/zlib/gzio.c-663-#  else\nextlib/zlib/gzio.c-664-    len = snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,\nextlib/zlib/gzio.c-665-                 a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);\nextlib/zlib/zlib.h-979-                          deflate code when not needed)"
    },
    {
      "file_path": "extlib/zlib/zlib.h-980-     17",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/zlib/zlib.h-981-                    and decode gzip streams (to avoid linking crc code)"
      ],
      "raw_content": "extlib/zlib/zlib.h-980-     17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect\nextlib/zlib/zlib.h-981-                    and decode gzip streams (to avoid linking crc code)"
    },
    {
      "file_path": "extlib/zlib/zlib.h-982-     18-19",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/zlib/zlib.h-983-"
      ],
      "raw_content": "extlib/zlib/zlib.h-982-     18-19: 0 (reserved)\nextlib/zlib/zlib.h-983-"
    },
    {
      "file_path": "extlib/zlib/zlib.h-984-    Operation variations (changes in library functionality)",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/zlib/zlib.h-984-    Operation variations (changes in library functionality):"
    },
    {
      "file_path": "extlib/zlib/zlib.h-985-     20",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/zlib/zlib.h-985-     20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate"
    },
    {
      "file_path": "extlib/zlib/zlib.h-986-     21",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/zlib/zlib.h-986-     21: FASTEST -- deflate algorithm with only one, lowest compression level"
    },
    {
      "file_path": "extlib/zlib/zlib.h-987-     22,23",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/zlib/zlib.h-988-"
      ],
      "raw_content": "extlib/zlib/zlib.h-987-     22,23: 0 (reserved)\nextlib/zlib/zlib.h-988-"
    },
    {
      "file_path": "extlib/zlib/zlib.h",
      "sprintf_line": 989,
      "context_lines": [],
      "raw_content": "extlib/zlib/zlib.h:989:    The sprintf variant used by gzprintf (zero is best):"
    },
    {
      "file_path": "extlib/zlib/zlib.h-990-     24",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/zlib/zlib.h-990-     24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format"
    },
    {
      "file_path": "extlib/zlib/zlib.h-991-     25",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/zlib/zlib.h-991-     25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!"
    },
    {
      "file_path": "extlib/zlib/zlib.h-992-     26",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/zlib/zlib.h-993-"
      ],
      "raw_content": "extlib/zlib/zlib.h-992-     26: 0 = returns value, 1 = void -- 1 means inferred string length returned\nextlib/zlib/zlib.h-993-"
    },
    {
      "file_path": "extlib/zlib/zlib.h-994-    Remainder",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "extlib/zlib/zlib.h-994-    Remainder:"
    },
    {
      "file_path": "extlib/zlib/zlib.h-995-     27-31",
      "sprintf_line": 0,
      "context_lines": [
        "extlib/zlib/zlib.h-996- */",
        "extlib/zlib/zlib.h-997-",
        "extlib/zlib/zlib.h-998-",
        "extlib/zlib/zlib.h-999-                        /* utility functions */",
        "extlib/zlib/zlib.h-1121-",
        "extlib/zlib/zlib.h-1122-ZEXTERN int ZEXPORTVA   gzprintf OF((gzFile file, const char *format, ...));",
        "extlib/zlib/zlib.h-1123-/*",
        "extlib/zlib/zlib.h-1124-     Converts, formats, and writes the args to the compressed file under",
        "extlib/zlib/zlib.h-1125-   control of the format string, as in fprintf. gzprintf returns the number of",
        "extlib/zlib/zlib.h-1126-   uncompressed bytes actually written (0 in case of error).  The number of",
        "extlib/zlib/zlib.h-1127-   uncompressed bytes written is limited to 4095. The caller should assure that",
        "extlib/zlib/zlib.h-1128-   this limit is not exceeded. If it is exceeded, then gzprintf() will return",
        "extlib/zlib/zlib.h-1129-   return an error (0) with nothing written. In this case, there may also be a",
        "extlib/zlib/zlib.h-1130-   buffer overflow with unpredictable consequences, which is possible only if"
      ],
      "raw_content": "extlib/zlib/zlib.h-995-     27-31: 0 (reserved)\nextlib/zlib/zlib.h-996- */\nextlib/zlib/zlib.h-997-\nextlib/zlib/zlib.h-998-\nextlib/zlib/zlib.h-999-                        /* utility functions */\nextlib/zlib/zlib.h-1121-\nextlib/zlib/zlib.h-1122-ZEXTERN int ZEXPORTVA   gzprintf OF((gzFile file, const char *format, ...));\nextlib/zlib/zlib.h-1123-/*\nextlib/zlib/zlib.h-1124-     Converts, formats, and writes the args to the compressed file under\nextlib/zlib/zlib.h-1125-   control of the format string, as in fprintf. gzprintf returns the number of\nextlib/zlib/zlib.h-1126-   uncompressed bytes actually written (0 in case of error).  The number of\nextlib/zlib/zlib.h-1127-   uncompressed bytes written is limited to 4095. The caller should assure that\nextlib/zlib/zlib.h-1128-   this limit is not exceeded. If it is exceeded, then gzprintf() will return\nextlib/zlib/zlib.h-1129-   return an error (0) with nothing written. In this case, there may also be a\nextlib/zlib/zlib.h-1130-   buffer overflow with unpredictable consequences, which is possible only if"
    },
    {
      "file_path": "extlib/zlib/zlib.h",
      "sprintf_line": 1131,
      "context_lines": [
        "extlib/zlib/zlib.h-1132-   because the secure snprintf() or vsnprintf() functions were not available.",
        "extlib/zlib/zlib.h-1133-*/",
        "extlib/zlib/zlib.h-1134-",
        "extlib/zlib/zlib.h-1135-ZEXTERN int ZEXPORT gzputs OF((gzFile file, const char *s));",
        "extlib/zlib/zlib.h-1136-/*",
        "extlib/zlib/zlib.h-1137-      Writes the given null-terminated string to the compressed file, excluding",
        "extlib/zlib/zlib.h-1138-   the terminating null character.",
        "extlib/zlib/zlib.h-1139-      gzputs returns the number of characters written, or -1 in case of error.",
        "extlib/zlib/zlib.h-1140-*/",
        "extlib/zlib/zlib.h-1141-",
        "extlib/zlib/zutil.c-81-#endif",
        "extlib/zlib/zutil.c-82-#ifdef PKZIP_BUG_WORKAROUND",
        "extlib/zlib/zutil.c-83-    flags += 1L << 20;",
        "extlib/zlib/zutil.c-84-#endif",
        "extlib/zlib/zutil.c-85-#ifdef FASTEST",
        "extlib/zlib/zutil.c-86-    flags += 1L << 21;",
        "extlib/zlib/zutil.c-87-#endif",
        "extlib/zlib/zutil.c-88-#ifdef STDC",
        "extlib/zlib/zutil.c-89-#  ifdef NO_vsnprintf",
        "extlib/zlib/zutil.c-90-        flags += 1L << 25;"
      ],
      "raw_content": "extlib/zlib/zlib.h:1131:   zlib was compiled with the insecure functions sprintf() or vsprintf()\nextlib/zlib/zlib.h-1132-   because the secure snprintf() or vsnprintf() functions were not available.\nextlib/zlib/zlib.h-1133-*/\nextlib/zlib/zlib.h-1134-\nextlib/zlib/zlib.h-1135-ZEXTERN int ZEXPORT gzputs OF((gzFile file, const char *s));\nextlib/zlib/zlib.h-1136-/*\nextlib/zlib/zlib.h-1137-      Writes the given null-terminated string to the compressed file, excluding\nextlib/zlib/zlib.h-1138-   the terminating null character.\nextlib/zlib/zlib.h-1139-      gzputs returns the number of characters written, or -1 in case of error.\nextlib/zlib/zlib.h-1140-*/\nextlib/zlib/zlib.h-1141-\nextlib/zlib/zutil.c-81-#endif\nextlib/zlib/zutil.c-82-#ifdef PKZIP_BUG_WORKAROUND\nextlib/zlib/zutil.c-83-    flags += 1L << 20;\nextlib/zlib/zutil.c-84-#endif\nextlib/zlib/zutil.c-85-#ifdef FASTEST\nextlib/zlib/zutil.c-86-    flags += 1L << 21;\nextlib/zlib/zutil.c-87-#endif\nextlib/zlib/zutil.c-88-#ifdef STDC\nextlib/zlib/zutil.c-89-#  ifdef NO_vsnprintf\nextlib/zlib/zutil.c-90-        flags += 1L << 25;"
    },
    {
      "file_path": "extlib/zlib/zutil.c",
      "sprintf_line": 91,
      "context_lines": [
        "extlib/zlib/zutil.c-92-        flags += 1L << 26;",
        "extlib/zlib/zutil.c-93-#    endif",
        "extlib/zlib/zutil.c-94-#  else",
        "extlib/zlib/zutil.c-95-#    ifdef HAS_vsnprintf_void",
        "extlib/zlib/zutil.c-96-        flags += 1L << 26;",
        "extlib/zlib/zutil.c-97-#    endif",
        "extlib/zlib/zutil.c-98-#  endif",
        "extlib/zlib/zutil.c-99-#else",
        "extlib/zlib/zutil.c-100-        flags += 1L << 24;",
        "extlib/zlib/zutil.c-101-#  ifdef NO_snprintf",
        "extlib/zlib/zutil.c-102-        flags += 1L << 25;"
      ],
      "raw_content": "extlib/zlib/zutil.c:91:#    ifdef HAS_vsprintf_void\nextlib/zlib/zutil.c-92-        flags += 1L << 26;\nextlib/zlib/zutil.c-93-#    endif\nextlib/zlib/zutil.c-94-#  else\nextlib/zlib/zutil.c-95-#    ifdef HAS_vsnprintf_void\nextlib/zlib/zutil.c-96-        flags += 1L << 26;\nextlib/zlib/zutil.c-97-#    endif\nextlib/zlib/zutil.c-98-#  endif\nextlib/zlib/zutil.c-99-#else\nextlib/zlib/zutil.c-100-        flags += 1L << 24;\nextlib/zlib/zutil.c-101-#  ifdef NO_snprintf\nextlib/zlib/zutil.c-102-        flags += 1L << 25;"
    },
    {
      "file_path": "extlib/zlib/zutil.c",
      "sprintf_line": 103,
      "context_lines": [
        "extlib/zlib/zutil.c-104-        flags += 1L << 26;",
        "extlib/zlib/zutil.c-105-#    endif",
        "extlib/zlib/zutil.c-106-#  else",
        "extlib/zlib/zutil.c-107-#    ifdef HAS_snprintf_void",
        "extlib/zlib/zutil.c-108-        flags += 1L << 26;",
        "extlib/zlib/zutil.c-109-#    endif",
        "extlib/zlib/zutil.c-110-#  endif",
        "extlib/zlib/zutil.c-111-#endif",
        "extlib/zlib/zutil.c-112-    return flags;",
        "extlib/zlib/zutil.c-113-}",
        "src/3DSMax/RISERenderImage.cpp-123-\tif( !pCamera ) {",
        "src/3DSMax/RISERenderImage.cpp-124-\t\tjob.SetPinholeCamera( loc, lookat, up, fov, width, height, 1.0, 0, 0, 0, o, to );",
        "src/3DSMax/RISERenderImage.cpp-125-\t} else {",
        "src/3DSMax/RISERenderImage.cpp-126-\t\t// Otherwise, modify the existing camera with the MAX camera settings",
        "src/3DSMax/RISERenderImage.cpp-127-        // I know this is a hack, but we can use the IKeyframamble interface to set intermediate values ",
        "src/3DSMax/RISERenderImage.cpp-128-\t\t// to change the existing camera setting's parameters",
        "src/3DSMax/RISERenderImage.cpp-129-\t\tchar val[256] = {0};",
        "src/3DSMax/RISERenderImage.cpp-130-",
        "src/3DSMax/RISERenderImage.cpp-131-\t\t// Location",
        "src/3DSMax/RISERenderImage.cpp-132-\t\t{"
      ],
      "raw_content": "extlib/zlib/zutil.c:103:#    ifdef HAS_sprintf_void\nextlib/zlib/zutil.c-104-        flags += 1L << 26;\nextlib/zlib/zutil.c-105-#    endif\nextlib/zlib/zutil.c-106-#  else\nextlib/zlib/zutil.c-107-#    ifdef HAS_snprintf_void\nextlib/zlib/zutil.c-108-        flags += 1L << 26;\nextlib/zlib/zutil.c-109-#    endif\nextlib/zlib/zutil.c-110-#  endif\nextlib/zlib/zutil.c-111-#endif\nextlib/zlib/zutil.c-112-    return flags;\nextlib/zlib/zutil.c-113-}\nsrc/3DSMax/RISERenderImage.cpp-123-\tif( !pCamera ) {\nsrc/3DSMax/RISERenderImage.cpp-124-\t\tjob.SetPinholeCamera( loc, lookat, up, fov, width, height, 1.0, 0, 0, 0, o, to );\nsrc/3DSMax/RISERenderImage.cpp-125-\t} else {\nsrc/3DSMax/RISERenderImage.cpp-126-\t\t// Otherwise, modify the existing camera with the MAX camera settings\nsrc/3DSMax/RISERenderImage.cpp-127-        // I know this is a hack, but we can use the IKeyframamble interface to set intermediate values \nsrc/3DSMax/RISERenderImage.cpp-128-\t\t// to change the existing camera setting's parameters\nsrc/3DSMax/RISERenderImage.cpp-129-\t\tchar val[256] = {0};\nsrc/3DSMax/RISERenderImage.cpp-130-\nsrc/3DSMax/RISERenderImage.cpp-131-\t\t// Location\nsrc/3DSMax/RISERenderImage.cpp-132-\t\t{"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 133,
      "context_lines": [],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:133:\t\t\tsprintf( val, \"%lf %lf %lf\", loc[0], loc[1], loc[2] );"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-134-\t\t\tRISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-135-\t\t\tif( p ) {",
        "src/3DSMax/RISERenderImage.cpp-136-\t\t\t\tpCamera->SetIntermediateValue( *p );",
        "src/3DSMax/RISERenderImage.cpp-137-\t\t\t\tp->release();",
        "src/3DSMax/RISERenderImage.cpp-138-\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-139-\t\t}",
        "src/3DSMax/RISERenderImage.cpp-140-",
        "src/3DSMax/RISERenderImage.cpp-141-\t\t// Look at",
        "src/3DSMax/RISERenderImage.cpp-142-\t\t{"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-134-\t\t\tRISE::IKeyframeParameter* p = pCamera->KeyframeFromParameters( \"location\", val );\nsrc/3DSMax/RISERenderImage.cpp-135-\t\t\tif( p ) {\nsrc/3DSMax/RISERenderImage.cpp-136-\t\t\t\tpCamera->SetIntermediateValue( *p );\nsrc/3DSMax/RISERenderImage.cpp-137-\t\t\t\tp->release();\nsrc/3DSMax/RISERenderImage.cpp-138-\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-139-\t\t}\nsrc/3DSMax/RISERenderImage.cpp-140-\nsrc/3DSMax/RISERenderImage.cpp-141-\t\t// Look at\nsrc/3DSMax/RISERenderImage.cpp-142-\t\t{"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 143,
      "context_lines": [],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:143:\t\t\tsprintf( val, \"%lf %lf %lf\", lookat[0], lookat[1], lookat[2] );"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-144-\t\t\tRISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-145-\t\t\tif( p ) {",
        "src/3DSMax/RISERenderImage.cpp-146-\t\t\t\tpCamera->SetIntermediateValue( *p );",
        "src/3DSMax/RISERenderImage.cpp-147-\t\t\t\tp->release();",
        "src/3DSMax/RISERenderImage.cpp-148-\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-149-\t\t}",
        "src/3DSMax/RISERenderImage.cpp-150-",
        "src/3DSMax/RISERenderImage.cpp-151-\t\t// Up vector",
        "src/3DSMax/RISERenderImage.cpp-152-\t\t{"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-144-\t\t\tRISE::IKeyframeParameter* p = pCamera->KeyframeFromParameters( \"lookat\", val );\nsrc/3DSMax/RISERenderImage.cpp-145-\t\t\tif( p ) {\nsrc/3DSMax/RISERenderImage.cpp-146-\t\t\t\tpCamera->SetIntermediateValue( *p );\nsrc/3DSMax/RISERenderImage.cpp-147-\t\t\t\tp->release();\nsrc/3DSMax/RISERenderImage.cpp-148-\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-149-\t\t}\nsrc/3DSMax/RISERenderImage.cpp-150-\nsrc/3DSMax/RISERenderImage.cpp-151-\t\t// Up vector\nsrc/3DSMax/RISERenderImage.cpp-152-\t\t{"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 153,
      "context_lines": [],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:153:\t\t\tsprintf( val, \"%lf %lf %lf\", up[0], up[1], up[2] );"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-154-\t\t\tRISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-155-\t\t\tif( p ) {",
        "src/3DSMax/RISERenderImage.cpp-156-\t\t\t\tpCamera->SetIntermediateValue( *p );",
        "src/3DSMax/RISERenderImage.cpp-157-\t\t\t\tp->release();",
        "src/3DSMax/RISERenderImage.cpp-158-\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-159-\t\t}",
        "src/3DSMax/RISERenderImage.cpp-160-",
        "src/3DSMax/RISERenderImage.cpp-161-\t\t// FOV",
        "src/3DSMax/RISERenderImage.cpp-162-\t\t{"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-154-\t\t\tRISE::IKeyframeParameter* p = pCamera->KeyframeFromParameters( \"up\", val );\nsrc/3DSMax/RISERenderImage.cpp-155-\t\t\tif( p ) {\nsrc/3DSMax/RISERenderImage.cpp-156-\t\t\t\tpCamera->SetIntermediateValue( *p );\nsrc/3DSMax/RISERenderImage.cpp-157-\t\t\t\tp->release();\nsrc/3DSMax/RISERenderImage.cpp-158-\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-159-\t\t}\nsrc/3DSMax/RISERenderImage.cpp-160-\nsrc/3DSMax/RISERenderImage.cpp-161-\t\t// FOV\nsrc/3DSMax/RISERenderImage.cpp-162-\t\t{"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 163,
      "context_lines": [],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:163:\t\t\tsprintf( val, \"%lf\", fov* RAD_TO_DEG );"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-164-\t\t\tRISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-165-\t\t\tif( p ) {",
        "src/3DSMax/RISERenderImage.cpp-166-\t\t\t\tpCamera->SetIntermediateValue( *p );",
        "src/3DSMax/RISERenderImage.cpp-167-\t\t\t\tp->release();",
        "src/3DSMax/RISERenderImage.cpp-168-\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-169-\t\t}",
        "src/3DSMax/RISERenderImage.cpp-170-",
        "src/3DSMax/RISERenderImage.cpp-171-\t\t// Width",
        "src/3DSMax/RISERenderImage.cpp-172-\t\t{"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-164-\t\t\tRISE::IKeyframeParameter* p = pCamera->KeyframeFromParameters( \"fov\", val );\nsrc/3DSMax/RISERenderImage.cpp-165-\t\t\tif( p ) {\nsrc/3DSMax/RISERenderImage.cpp-166-\t\t\t\tpCamera->SetIntermediateValue( *p );\nsrc/3DSMax/RISERenderImage.cpp-167-\t\t\t\tp->release();\nsrc/3DSMax/RISERenderImage.cpp-168-\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-169-\t\t}\nsrc/3DSMax/RISERenderImage.cpp-170-\nsrc/3DSMax/RISERenderImage.cpp-171-\t\t// Width\nsrc/3DSMax/RISERenderImage.cpp-172-\t\t{"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 173,
      "context_lines": [],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:173:\t\t\tsprintf( val, \"%u\", width );"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-174-\t\t\tRISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-175-\t\t\tif( p ) {",
        "src/3DSMax/RISERenderImage.cpp-176-\t\t\t\tpCamera->SetIntermediateValue( *p );",
        "src/3DSMax/RISERenderImage.cpp-177-\t\t\t\tp->release();",
        "src/3DSMax/RISERenderImage.cpp-178-\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-179-\t\t}",
        "src/3DSMax/RISERenderImage.cpp-180-",
        "src/3DSMax/RISERenderImage.cpp-181-\t\t// Height",
        "src/3DSMax/RISERenderImage.cpp-182-\t\t{"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-174-\t\t\tRISE::IKeyframeParameter* p = pCamera->KeyframeFromParameters( \"width\", val );\nsrc/3DSMax/RISERenderImage.cpp-175-\t\t\tif( p ) {\nsrc/3DSMax/RISERenderImage.cpp-176-\t\t\t\tpCamera->SetIntermediateValue( *p );\nsrc/3DSMax/RISERenderImage.cpp-177-\t\t\t\tp->release();\nsrc/3DSMax/RISERenderImage.cpp-178-\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-179-\t\t}\nsrc/3DSMax/RISERenderImage.cpp-180-\nsrc/3DSMax/RISERenderImage.cpp-181-\t\t// Height\nsrc/3DSMax/RISERenderImage.cpp-182-\t\t{"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 183,
      "context_lines": [],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:183:\t\t\tsprintf( val, \"%u\", height );"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-184-\t\t\tRISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-185-\t\t\tif( p ) {",
        "src/3DSMax/RISERenderImage.cpp-186-\t\t\t\tpCamera->SetIntermediateValue( *p );",
        "src/3DSMax/RISERenderImage.cpp-187-\t\t\t\tp->release();",
        "src/3DSMax/RISERenderImage.cpp-188-\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-189-\t\t}",
        "src/3DSMax/RISERenderImage.cpp-190-",
        "src/3DSMax/RISERenderImage.cpp-191-\t\t// Tell the camera to get itself ready for rendering",
        "src/3DSMax/RISERenderImage.cpp-192-\t\tpCamera->RegenerateData();",
        "src/3DSMax/RISERenderImage.cpp-193-\t}",
        "src/3DSMax/RISERenderImage.cpp-281-",
        "src/3DSMax/RISERenderImage.cpp-282-\t\tchar geomname[256] = {0};",
        "src/3DSMax/RISERenderImage.cpp-283-",
        "src/3DSMax/RISERenderImage.cpp-284-\t\t// Check to see if the geometry instance already is in our list"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-184-\t\t\tRISE::IKeyframeParameter* p = pCamera->KeyframeFromParameters( \"height\", val );\nsrc/3DSMax/RISERenderImage.cpp-185-\t\t\tif( p ) {\nsrc/3DSMax/RISERenderImage.cpp-186-\t\t\t\tpCamera->SetIntermediateValue( *p );\nsrc/3DSMax/RISERenderImage.cpp-187-\t\t\t\tp->release();\nsrc/3DSMax/RISERenderImage.cpp-188-\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-189-\t\t}\nsrc/3DSMax/RISERenderImage.cpp-190-\nsrc/3DSMax/RISERenderImage.cpp-191-\t\t// Tell the camera to get itself ready for rendering\nsrc/3DSMax/RISERenderImage.cpp-192-\t\tpCamera->RegenerateData();\nsrc/3DSMax/RISERenderImage.cpp-193-\t}\nsrc/3DSMax/RISERenderImage.cpp-281-\nsrc/3DSMax/RISERenderImage.cpp-282-\t\tchar geomname[256] = {0};\nsrc/3DSMax/RISERenderImage.cpp-283-\nsrc/3DSMax/RISERenderImage.cpp-284-\t\t// Check to see if the geometry instance already is in our list"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-285-\t\tMeshMap",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-286-\t\tif( it != geoms.end() ) {",
        "src/3DSMax/RISERenderImage.cpp-287-\t\t\t// Instance of object already exists!",
        "src/3DSMax/RISERenderImage.cpp-288-\t\t\tstrcpy( geomname, it->second.c_str() );",
        "src/3DSMax/RISERenderImage.cpp-289-\t\t} else {",
        "src/3DSMax/RISERenderImage.cpp-290-\t\t\t// Create the geometry instance "
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-285-\t\tMeshMap::iterator it = geoms.find( pInst->GetMesh() );\nsrc/3DSMax/RISERenderImage.cpp-286-\t\tif( it != geoms.end() ) {\nsrc/3DSMax/RISERenderImage.cpp-287-\t\t\t// Instance of object already exists!\nsrc/3DSMax/RISERenderImage.cpp-288-\t\t\tstrcpy( geomname, it->second.c_str() );\nsrc/3DSMax/RISERenderImage.cpp-289-\t\t} else {\nsrc/3DSMax/RISERenderImage.cpp-290-\t\t\t// Create the geometry instance "
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 291,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-292-",
        "src/3DSMax/RISERenderImage.cpp-293-\t\t\tMAXGeometry* pGeometry = new MAXGeometry( pInst );"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:291:\t\t\tsprintf( geomname, \"Geom::%s\", pInst->GetName() );\nsrc/3DSMax/RISERenderImage.cpp-292-\nsrc/3DSMax/RISERenderImage.cpp-293-\t\t\tMAXGeometry* pGeometry = new MAXGeometry( pInst );"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-294-\t\t\tRISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-295-\t\t\tpJob->GetGeometries()->AddItem( pGeometry, geomname );",
        "src/3DSMax/RISERenderImage.cpp-296-\t\t\tpGeometry->release();",
        "src/3DSMax/RISERenderImage.cpp-297-",
        "src/3DSMax/RISERenderImage.cpp-298-\t\t\t// Add to the geometry instance list"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-294-\t\t\tRISE::GlobalLog()->PrintNew( pGeometry, __FILE__, __LINE__, \"MAX geometry\" );\nsrc/3DSMax/RISERenderImage.cpp-295-\t\t\tpJob->GetGeometries()->AddItem( pGeometry, geomname );\nsrc/3DSMax/RISERenderImage.cpp-296-\t\t\tpGeometry->release();\nsrc/3DSMax/RISERenderImage.cpp-297-\nsrc/3DSMax/RISERenderImage.cpp-298-\t\t\t// Add to the geometry instance list"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-299-\t\t\tgeoms[pInst->GetMesh()] = std",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-300-\t\t}",
        "src/3DSMax/RISERenderImage.cpp-301-",
        "src/3DSMax/RISERenderImage.cpp-336-\t\t\t\t\t\tpJob->AddUniformColorPainter( rd, d, \"RGB\" );",
        "src/3DSMax/RISERenderImage.cpp-337-",
        "src/3DSMax/RISERenderImage.cpp-338-\t\t\t\t\t\tif( shininessStrength > 0 && shininess > 0 ) {",
        "src/3DSMax/RISERenderImage.cpp-339-\t\t\t\t\t\t\tchar rs[512] = {0};",
        "src/3DSMax/RISERenderImage.cpp-340-\t\t\t\t\t\t\tstrcpy( rs, material_name );"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-299-\t\t\tgeoms[pInst->GetMesh()] = std::string( geomname );\nsrc/3DSMax/RISERenderImage.cpp-300-\t\t}\nsrc/3DSMax/RISERenderImage.cpp-301-\nsrc/3DSMax/RISERenderImage.cpp-336-\t\t\t\t\t\tpJob->AddUniformColorPainter( rd, d, \"RGB\" );\nsrc/3DSMax/RISERenderImage.cpp-337-\nsrc/3DSMax/RISERenderImage.cpp-338-\t\t\t\t\t\tif( shininessStrength > 0 && shininess > 0 ) {\nsrc/3DSMax/RISERenderImage.cpp-339-\t\t\t\t\t\t\tchar rs[512] = {0};\nsrc/3DSMax/RISERenderImage.cpp-340-\t\t\t\t\t\t\tstrcpy( rs, material_name );"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp-341-\t\t\t\t\t\t\tstrcat( rs, \"",
      "sprintf_line": 0,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-342-\t\t\t\t\t\t\tdouble s[3] = {specular.r*shininessStrength, specular.g*shininessStrength, specular.b*shininessStrength};",
        "src/3DSMax/RISERenderImage.cpp-343-\t\t\t\t\t\t\tpJob->AddUniformColorPainter( rs, s, \"RGB\" );",
        "src/3DSMax/RISERenderImage.cpp-344-\t\t\t\t\t\t\t",
        "src/3DSMax/RISERenderImage.cpp-345-\t\t\t\t\t\t\tchar phong[256] = {0};"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp-341-\t\t\t\t\t\t\tstrcat( rs, \"::specular\" );\nsrc/3DSMax/RISERenderImage.cpp-342-\t\t\t\t\t\t\tdouble s[3] = {specular.r*shininessStrength, specular.g*shininessStrength, specular.b*shininessStrength};\nsrc/3DSMax/RISERenderImage.cpp-343-\t\t\t\t\t\t\tpJob->AddUniformColorPainter( rs, s, \"RGB\" );\nsrc/3DSMax/RISERenderImage.cpp-344-\t\t\t\t\t\t\t\nsrc/3DSMax/RISERenderImage.cpp-345-\t\t\t\t\t\t\tchar phong[256] = {0};"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 346,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-347-",
        "src/3DSMax/RISERenderImage.cpp-348-\t\t\t\t\t\t\tpJob->AddIsotropicPhongMaterial( material_name, rd, rs, phong );",
        "src/3DSMax/RISERenderImage.cpp-349-\t\t\t\t\t\t} else {",
        "src/3DSMax/RISERenderImage.cpp-350-\t\t\t\t\t\t\tpJob->AddLambertianMaterial( material_name, rd );",
        "src/3DSMax/RISERenderImage.cpp-351-\t\t\t\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-352-\t\t\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-353-\t\t\t\t} else  {",
        "src/3DSMax/RISERenderImage.cpp-354-\t\t\t\t\t// This node doesn't even have a basic material, use wireframe color",
        "src/3DSMax/RISERenderImage.cpp-355-\t\t\t\t\tdouble c[3] = {0};",
        "src/3DSMax/RISERenderImage.cpp-356-\t\t\t\t\tDWORD dwCol = pInst->GetINode()->GetWireColor();",
        "src/3DSMax/RISERenderImage.cpp-441-\t\t\t// Gets the transformation matrix ",
        "src/3DSMax/RISERenderImage.cpp-442-\t\t\tMatrix3 tm = light->pDesc->lightToWorld;",
        "src/3DSMax/RISERenderImage.cpp-443-\t\t\tPoint3 p = tm.GetTrans();",
        "src/3DSMax/RISERenderImage.cpp-444-",
        "src/3DSMax/RISERenderImage.cpp-445-\t\t\tColor col = light->pDesc->ls.color;",
        "src/3DSMax/RISERenderImage.cpp-446-\t\t\tconst double intensity = light->pDesc->ls.intens * PI;",
        "src/3DSMax/RISERenderImage.cpp-447-",
        "src/3DSMax/RISERenderImage.cpp-448-\t\t\tdouble srgb[3] = {col.r,col.g,col.b};",
        "src/3DSMax/RISERenderImage.cpp-449-",
        "src/3DSMax/RISERenderImage.cpp-450-\t\t\tchar lightname[256] = {0};"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:346:\t\t\t\t\t\t\tsprintf( phong, \"%f\", shininess*100.0 );\nsrc/3DSMax/RISERenderImage.cpp-347-\nsrc/3DSMax/RISERenderImage.cpp-348-\t\t\t\t\t\t\tpJob->AddIsotropicPhongMaterial( material_name, rd, rs, phong );\nsrc/3DSMax/RISERenderImage.cpp-349-\t\t\t\t\t\t} else {\nsrc/3DSMax/RISERenderImage.cpp-350-\t\t\t\t\t\t\tpJob->AddLambertianMaterial( material_name, rd );\nsrc/3DSMax/RISERenderImage.cpp-351-\t\t\t\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-352-\t\t\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-353-\t\t\t\t} else  {\nsrc/3DSMax/RISERenderImage.cpp-354-\t\t\t\t\t// This node doesn't even have a basic material, use wireframe color\nsrc/3DSMax/RISERenderImage.cpp-355-\t\t\t\t\tdouble c[3] = {0};\nsrc/3DSMax/RISERenderImage.cpp-356-\t\t\t\t\tDWORD dwCol = pInst->GetINode()->GetWireColor();\nsrc/3DSMax/RISERenderImage.cpp-441-\t\t\t// Gets the transformation matrix \nsrc/3DSMax/RISERenderImage.cpp-442-\t\t\tMatrix3 tm = light->pDesc->lightToWorld;\nsrc/3DSMax/RISERenderImage.cpp-443-\t\t\tPoint3 p = tm.GetTrans();\nsrc/3DSMax/RISERenderImage.cpp-444-\nsrc/3DSMax/RISERenderImage.cpp-445-\t\t\tColor col = light->pDesc->ls.color;\nsrc/3DSMax/RISERenderImage.cpp-446-\t\t\tconst double intensity = light->pDesc->ls.intens * PI;\nsrc/3DSMax/RISERenderImage.cpp-447-\nsrc/3DSMax/RISERenderImage.cpp-448-\t\t\tdouble srgb[3] = {col.r,col.g,col.b};\nsrc/3DSMax/RISERenderImage.cpp-449-\nsrc/3DSMax/RISERenderImage.cpp-450-\t\t\tchar lightname[256] = {0};"
    },
    {
      "file_path": "src/3DSMax/RISERenderImage.cpp",
      "sprintf_line": 451,
      "context_lines": [
        "src/3DSMax/RISERenderImage.cpp-452-",
        "src/3DSMax/RISERenderImage.cpp-453-\t\t\tif( light->pDesc->ls.type == OMNI_LGT )",
        "src/3DSMax/RISERenderImage.cpp-454-\t\t\t{",
        "src/3DSMax/RISERenderImage.cpp-455-\t\t\t\t// OMNI Light --------------",
        "src/3DSMax/RISERenderImage.cpp-456-\t\t\t\tdouble pos[3] = {p.x,p.y,p.z};",
        "src/3DSMax/RISERenderImage.cpp-457-\t\t\t\tpJob->AddPointOmniLight( lightname, intensity, srgb, pos, 0.0, 0.0 );",
        "src/3DSMax/RISERenderImage.cpp-458-\t\t\t}",
        "src/3DSMax/RISERenderImage.cpp-459-\t\t\telse if( light->pDesc->ls.type == SPOT_LGT )",
        "src/3DSMax/RISERenderImage.cpp-460-\t\t\t{",
        "src/3DSMax/RISERenderImage.cpp-461-\t\t\t\t// SPOT light ----------",
        "src/DRISE/AnimationTask.cpp-127-\t\t\t\tpRasterizerOutput->OutputIntermediateImage( *pOutputImage, 0 );",
        "src/DRISE/AnimationTask.cpp-128-\t\t\t}",
        "src/DRISE/AnimationTask.cpp-129-",
        "src/DRISE/AnimationTask.cpp-130-",
        "src/DRISE/AnimationTask.cpp-131-\t\t\t// Flush the frame to disk",
        "src/DRISE/AnimationTask.cpp-132-\t\t\t{",
        "src/DRISE/AnimationTask.cpp-133-\t\t\t\tchar fname[1024] = {0};",
        "src/DRISE/AnimationTask.cpp-134-",
        "src/DRISE/AnimationTask.cpp-135-\t\t\t\tIRasterizerOutput* fro = 0;",
        "src/DRISE/AnimationTask.cpp-136-"
      ],
      "raw_content": "src/3DSMax/RISERenderImage.cpp:451:\t\t\tsprintf( lightname, \"light%d\", i );\nsrc/3DSMax/RISERenderImage.cpp-452-\nsrc/3DSMax/RISERenderImage.cpp-453-\t\t\tif( light->pDesc->ls.type == OMNI_LGT )\nsrc/3DSMax/RISERenderImage.cpp-454-\t\t\t{\nsrc/3DSMax/RISERenderImage.cpp-455-\t\t\t\t// OMNI Light --------------\nsrc/3DSMax/RISERenderImage.cpp-456-\t\t\t\tdouble pos[3] = {p.x,p.y,p.z};\nsrc/3DSMax/RISERenderImage.cpp-457-\t\t\t\tpJob->AddPointOmniLight( lightname, intensity, srgb, pos, 0.0, 0.0 );\nsrc/3DSMax/RISERenderImage.cpp-458-\t\t\t}\nsrc/3DSMax/RISERenderImage.cpp-459-\t\t\telse if( light->pDesc->ls.type == SPOT_LGT )\nsrc/3DSMax/RISERenderImage.cpp-460-\t\t\t{\nsrc/3DSMax/RISERenderImage.cpp-461-\t\t\t\t// SPOT light ----------\nsrc/DRISE/AnimationTask.cpp-127-\t\t\t\tpRasterizerOutput->OutputIntermediateImage( *pOutputImage, 0 );\nsrc/DRISE/AnimationTask.cpp-128-\t\t\t}\nsrc/DRISE/AnimationTask.cpp-129-\nsrc/DRISE/AnimationTask.cpp-130-\nsrc/DRISE/AnimationTask.cpp-131-\t\t\t// Flush the frame to disk\nsrc/DRISE/AnimationTask.cpp-132-\t\t\t{\nsrc/DRISE/AnimationTask.cpp-133-\t\t\t\tchar fname[1024] = {0};\nsrc/DRISE/AnimationTask.cpp-134-\nsrc/DRISE/AnimationTask.cpp-135-\t\t\t\tIRasterizerOutput* fro = 0;\nsrc/DRISE/AnimationTask.cpp-136-"
    },
    {
      "file_path": "src/DRISE/AnimationTask.cpp",
      "sprintf_line": 137,
      "context_lines": [
        "src/DRISE/AnimationTask.cpp-138-\t\t\t\tRISE_API_CreateFileRasterizerOutput( &fro, fname, false, 2, 16, eColorSpace_ProPhotoRGB );",
        "src/DRISE/AnimationTask.cpp-139-",
        "src/DRISE/AnimationTask.cpp-140-\t\t\t\tfro->OutputImage( *pOutputImage, 0, 0 );",
        "src/DRISE/AnimationTask.cpp-141-\t\t\t\tfro->release();",
        "src/DRISE/AnimationTask.cpp-142-\t\t\t}",
        "src/DRISE/AnimationTask.cpp-143-",
        "src/DRISE/AnimationTask.cpp-144-\t\t\tnNumActionsComplete++;",
        "src/DRISE/AnimationTask.cpp-145-",
        "src/DRISE/AnimationTask.cpp-146-\t\t\tif( nNumActionsComplete == nTotalActionsSendOut && bFinishedSendingOut ) {",
        "src/DRISE/AnimationTask.cpp-147-\t\t\t\t// Then we are done!, tell the job engine we are done",
        "src/DRISE/AnimationTask.cpp-152-\t\t\t\tunsigned int\t\thours = timeforTask/1000/60/60;",
        "src/DRISE/AnimationTask.cpp-153-\t\t\t\ttimeforTask -= hours*1000*60*60;",
        "src/DRISE/AnimationTask.cpp-154-\t\t\t\tunsigned int\t\tmins = timeforTask/1000/60;",
        "src/DRISE/AnimationTask.cpp-155-\t\t\t\ttimeforTask -= mins*1000*60;",
        "src/DRISE/AnimationTask.cpp-156-\t\t\t\tunsigned int\t\tsecs = timeforTask/1000;",
        "src/DRISE/AnimationTask.cpp-157-\t\t\t\tunsigned int\t\tms = timeforTask % 1000;",
        "src/DRISE/AnimationTask.cpp-158-",
        "src/DRISE/AnimationTask.cpp-159-\t\t\t\tchar buf[1024] = {0};"
      ],
      "raw_content": "src/DRISE/AnimationTask.cpp:137:\t\t\t\tsprintf( fname, \"%s_%.5d\", szOutputFileName, id );\nsrc/DRISE/AnimationTask.cpp-138-\t\t\t\tRISE_API_CreateFileRasterizerOutput( &fro, fname, false, 2, 16, eColorSpace_ProPhotoRGB );\nsrc/DRISE/AnimationTask.cpp-139-\nsrc/DRISE/AnimationTask.cpp-140-\t\t\t\tfro->OutputImage( *pOutputImage, 0, 0 );\nsrc/DRISE/AnimationTask.cpp-141-\t\t\t\tfro->release();\nsrc/DRISE/AnimationTask.cpp-142-\t\t\t}\nsrc/DRISE/AnimationTask.cpp-143-\nsrc/DRISE/AnimationTask.cpp-144-\t\t\tnNumActionsComplete++;\nsrc/DRISE/AnimationTask.cpp-145-\nsrc/DRISE/AnimationTask.cpp-146-\t\t\tif( nNumActionsComplete == nTotalActionsSendOut && bFinishedSendingOut ) {\nsrc/DRISE/AnimationTask.cpp-147-\t\t\t\t// Then we are done!, tell the job engine we are done\nsrc/DRISE/AnimationTask.cpp-152-\t\t\t\tunsigned int\t\thours = timeforTask/1000/60/60;\nsrc/DRISE/AnimationTask.cpp-153-\t\t\t\ttimeforTask -= hours*1000*60*60;\nsrc/DRISE/AnimationTask.cpp-154-\t\t\t\tunsigned int\t\tmins = timeforTask/1000/60;\nsrc/DRISE/AnimationTask.cpp-155-\t\t\t\ttimeforTask -= mins*1000*60;\nsrc/DRISE/AnimationTask.cpp-156-\t\t\t\tunsigned int\t\tsecs = timeforTask/1000;\nsrc/DRISE/AnimationTask.cpp-157-\t\t\t\tunsigned int\t\tms = timeforTask % 1000;\nsrc/DRISE/AnimationTask.cpp-158-\nsrc/DRISE/AnimationTask.cpp-159-\t\t\t\tchar buf[1024] = {0};"
    },
    {
      "file_path": "src/DRISE/AnimationTask.cpp-160-\t\t\t\tstrcat( buf, \"Total Rasterization Time",
      "sprintf_line": 0,
      "context_lines": [
        "src/DRISE/AnimationTask.cpp-161-\t\t\t\tchar daybuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/AnimationTask.cpp-160-\t\t\t\tstrcat( buf, \"Total Rasterization Time: \" );\nsrc/DRISE/AnimationTask.cpp-161-\t\t\t\tchar daybuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/AnimationTask.cpp",
      "sprintf_line": 162,
      "context_lines": [
        "src/DRISE/AnimationTask.cpp-163-\t\t\t\tchar hourbuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/AnimationTask.cpp:162:\t\t\t\tsprintf( daybuf, \"%d days \", days );\nsrc/DRISE/AnimationTask.cpp-163-\t\t\t\tchar hourbuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/AnimationTask.cpp",
      "sprintf_line": 164,
      "context_lines": [
        "src/DRISE/AnimationTask.cpp-165-\t\t\t\tchar minbuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/AnimationTask.cpp:164:\t\t\t\tsprintf( hourbuf, \"%d hours \", hours );\nsrc/DRISE/AnimationTask.cpp-165-\t\t\t\tchar minbuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/AnimationTask.cpp",
      "sprintf_line": 166,
      "context_lines": [
        "src/DRISE/AnimationTask.cpp-167-\t\t\t\tchar secbuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/AnimationTask.cpp:166:\t\t\t\tsprintf( minbuf, \"%d minutes \", mins );\nsrc/DRISE/AnimationTask.cpp-167-\t\t\t\tchar secbuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/AnimationTask.cpp",
      "sprintf_line": 168,
      "context_lines": [
        "src/DRISE/AnimationTask.cpp-169-\t\t\t\tchar msbuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/AnimationTask.cpp:168:\t\t\t\tsprintf( secbuf, \"%d seconds \", secs );\nsrc/DRISE/AnimationTask.cpp-169-\t\t\t\tchar msbuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/AnimationTask.cpp",
      "sprintf_line": 170,
      "context_lines": [
        "src/DRISE/AnimationTask.cpp-171-",
        "src/DRISE/AnimationTask.cpp-172-\t\t\t\tif( days ) {",
        "src/DRISE/AnimationTask.cpp-173-\t\t\t\t\tstrcat( buf, daybuf );",
        "src/DRISE/AnimationTask.cpp-174-\t\t\t\t}",
        "src/DRISE/AnimationTask.cpp-175-",
        "src/DRISE/AnimationTask.cpp-176-\t\t\t\tif( hours ) {",
        "src/DRISE/AnimationTask.cpp-177-\t\t\t\t\tstrcat( buf, hourbuf );",
        "src/DRISE/AnimationTask.cpp-178-\t\t\t\t}",
        "src/DRISE/AnimationTask.cpp-179-",
        "src/DRISE/AnimationTask.cpp-180-\t\t\t\tif( mins ) {",
        "src/DRISE/Task.cpp-196-\t\t\t\tpRasterizerOutput->OutputIntermediateImage( *pOutputImage, &rc );",
        "src/DRISE/Task.cpp-197-\t\t\t}",
        "src/DRISE/Task.cpp-198-",
        "src/DRISE/Task.cpp-199-\t\t\tif( nNumActionsComplete == nTotalActionsSendOut && bFinishedSendingOut ) {",
        "src/DRISE/Task.cpp-200-\t\t\t\t// Then we are done!, flush to disk, then tell the job engine we are done",
        "src/DRISE/Task.cpp-201-\t\t\t\t{",
        "src/DRISE/Task.cpp-202-\t\t\t\t\tchar fname[1024] = {0};",
        "src/DRISE/Task.cpp-203-",
        "src/DRISE/Task.cpp-204-\t\t\t\t\tIRasterizerOutput* fro = 0;",
        "src/DRISE/Task.cpp-205-"
      ],
      "raw_content": "src/DRISE/AnimationTask.cpp:170:\t\t\t\tsprintf( msbuf, \"%d ms\", ms );\nsrc/DRISE/AnimationTask.cpp-171-\nsrc/DRISE/AnimationTask.cpp-172-\t\t\t\tif( days ) {\nsrc/DRISE/AnimationTask.cpp-173-\t\t\t\t\tstrcat( buf, daybuf );\nsrc/DRISE/AnimationTask.cpp-174-\t\t\t\t}\nsrc/DRISE/AnimationTask.cpp-175-\nsrc/DRISE/AnimationTask.cpp-176-\t\t\t\tif( hours ) {\nsrc/DRISE/AnimationTask.cpp-177-\t\t\t\t\tstrcat( buf, hourbuf );\nsrc/DRISE/AnimationTask.cpp-178-\t\t\t\t}\nsrc/DRISE/AnimationTask.cpp-179-\nsrc/DRISE/AnimationTask.cpp-180-\t\t\t\tif( mins ) {\nsrc/DRISE/Task.cpp-196-\t\t\t\tpRasterizerOutput->OutputIntermediateImage( *pOutputImage, &rc );\nsrc/DRISE/Task.cpp-197-\t\t\t}\nsrc/DRISE/Task.cpp-198-\nsrc/DRISE/Task.cpp-199-\t\t\tif( nNumActionsComplete == nTotalActionsSendOut && bFinishedSendingOut ) {\nsrc/DRISE/Task.cpp-200-\t\t\t\t// Then we are done!, flush to disk, then tell the job engine we are done\nsrc/DRISE/Task.cpp-201-\t\t\t\t{\nsrc/DRISE/Task.cpp-202-\t\t\t\t\tchar fname[1024] = {0};\nsrc/DRISE/Task.cpp-203-\nsrc/DRISE/Task.cpp-204-\t\t\t\t\tIRasterizerOutput* fro = 0;\nsrc/DRISE/Task.cpp-205-"
    },
    {
      "file_path": "src/DRISE/Task.cpp",
      "sprintf_line": 206,
      "context_lines": [
        "src/DRISE/Task.cpp-207-\t\t\t\t\tRISE_API_CreateFileRasterizerOutput( &fro, fname, false, 2, 8, eColorSpace_sRGB );",
        "src/DRISE/Task.cpp-208-",
        "src/DRISE/Task.cpp-209-\t\t\t\t\tfro->OutputImage( *pOutputImage, 0, 0 );",
        "src/DRISE/Task.cpp-210-\t\t\t\t\tfro->release();",
        "src/DRISE/Task.cpp-211-"
      ],
      "raw_content": "src/DRISE/Task.cpp:206:\t\t\t\t\tsprintf( fname, \"%s-sRGB\", szOutputFileName );\nsrc/DRISE/Task.cpp-207-\t\t\t\t\tRISE_API_CreateFileRasterizerOutput( &fro, fname, false, 2, 8, eColorSpace_sRGB );\nsrc/DRISE/Task.cpp-208-\nsrc/DRISE/Task.cpp-209-\t\t\t\t\tfro->OutputImage( *pOutputImage, 0, 0 );\nsrc/DRISE/Task.cpp-210-\t\t\t\t\tfro->release();\nsrc/DRISE/Task.cpp-211-"
    },
    {
      "file_path": "src/DRISE/Task.cpp",
      "sprintf_line": 212,
      "context_lines": [
        "src/DRISE/Task.cpp-213-\t\t\t\t\tRISE_API_CreateFileRasterizerOutput( &fro, fname, false, 2, 16, eColorSpace_ProPhotoRGB );",
        "src/DRISE/Task.cpp-214-",
        "src/DRISE/Task.cpp-215-\t\t\t\t\tfro->OutputImage( *pOutputImage, 0, 0 );",
        "src/DRISE/Task.cpp-216-\t\t\t\t\tfro->release();\t\t\t\t",
        "src/DRISE/Task.cpp-217-\t\t\t\t}",
        "src/DRISE/Task.cpp-218-",
        "src/DRISE/Task.cpp-219-\t\t\t\tunsigned int\t\ttimeforTask = GetMilliseconds() - taskLife;",
        "src/DRISE/Task.cpp-220-",
        "src/DRISE/Task.cpp-221-\t\t\t\tunsigned int\t\tdays = timeforTask/1000/60/60/24;",
        "src/DRISE/Task.cpp-222-\t\t\t\ttimeforTask -= days*1000*60*60*24;",
        "src/DRISE/Task.cpp-223-\t\t\t\tunsigned int\t\thours = timeforTask/1000/60/60;",
        "src/DRISE/Task.cpp-224-\t\t\t\ttimeforTask -= hours*1000*60*60;",
        "src/DRISE/Task.cpp-225-\t\t\t\tunsigned int\t\tmins = timeforTask/1000/60;",
        "src/DRISE/Task.cpp-226-\t\t\t\ttimeforTask -= mins*1000*60;",
        "src/DRISE/Task.cpp-227-\t\t\t\tunsigned int\t\tsecs = timeforTask/1000;",
        "src/DRISE/Task.cpp-228-\t\t\t\tunsigned int\t\tms = timeforTask % 1000;",
        "src/DRISE/Task.cpp-229-",
        "src/DRISE/Task.cpp-230-\t\t\t\tchar buf[1024] = {0};"
      ],
      "raw_content": "src/DRISE/Task.cpp:212:\t\t\t\t\tsprintf( fname, \"%s-ProPhoto\", szOutputFileName );\nsrc/DRISE/Task.cpp-213-\t\t\t\t\tRISE_API_CreateFileRasterizerOutput( &fro, fname, false, 2, 16, eColorSpace_ProPhotoRGB );\nsrc/DRISE/Task.cpp-214-\nsrc/DRISE/Task.cpp-215-\t\t\t\t\tfro->OutputImage( *pOutputImage, 0, 0 );\nsrc/DRISE/Task.cpp-216-\t\t\t\t\tfro->release();\t\t\t\t\nsrc/DRISE/Task.cpp-217-\t\t\t\t}\nsrc/DRISE/Task.cpp-218-\nsrc/DRISE/Task.cpp-219-\t\t\t\tunsigned int\t\ttimeforTask = GetMilliseconds() - taskLife;\nsrc/DRISE/Task.cpp-220-\nsrc/DRISE/Task.cpp-221-\t\t\t\tunsigned int\t\tdays = timeforTask/1000/60/60/24;\nsrc/DRISE/Task.cpp-222-\t\t\t\ttimeforTask -= days*1000*60*60*24;\nsrc/DRISE/Task.cpp-223-\t\t\t\tunsigned int\t\thours = timeforTask/1000/60/60;\nsrc/DRISE/Task.cpp-224-\t\t\t\ttimeforTask -= hours*1000*60*60;\nsrc/DRISE/Task.cpp-225-\t\t\t\tunsigned int\t\tmins = timeforTask/1000/60;\nsrc/DRISE/Task.cpp-226-\t\t\t\ttimeforTask -= mins*1000*60;\nsrc/DRISE/Task.cpp-227-\t\t\t\tunsigned int\t\tsecs = timeforTask/1000;\nsrc/DRISE/Task.cpp-228-\t\t\t\tunsigned int\t\tms = timeforTask % 1000;\nsrc/DRISE/Task.cpp-229-\nsrc/DRISE/Task.cpp-230-\t\t\t\tchar buf[1024] = {0};"
    },
    {
      "file_path": "src/DRISE/Task.cpp-231-\t\t\t\tstrcat( buf, \"Total Rasterization Time",
      "sprintf_line": 0,
      "context_lines": [
        "src/DRISE/Task.cpp-232-\t\t\t\tchar daybuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/Task.cpp-231-\t\t\t\tstrcat( buf, \"Total Rasterization Time: \" );\nsrc/DRISE/Task.cpp-232-\t\t\t\tchar daybuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/Task.cpp",
      "sprintf_line": 233,
      "context_lines": [
        "src/DRISE/Task.cpp-234-\t\t\t\tchar hourbuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/Task.cpp:233:\t\t\t\tsprintf( daybuf, \"%d days \", days );\nsrc/DRISE/Task.cpp-234-\t\t\t\tchar hourbuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/Task.cpp",
      "sprintf_line": 235,
      "context_lines": [
        "src/DRISE/Task.cpp-236-\t\t\t\tchar minbuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/Task.cpp:235:\t\t\t\tsprintf( hourbuf, \"%d hours \", hours );\nsrc/DRISE/Task.cpp-236-\t\t\t\tchar minbuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/Task.cpp",
      "sprintf_line": 237,
      "context_lines": [
        "src/DRISE/Task.cpp-238-\t\t\t\tchar secbuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/Task.cpp:237:\t\t\t\tsprintf( minbuf, \"%d minutes \", mins );\nsrc/DRISE/Task.cpp-238-\t\t\t\tchar secbuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/Task.cpp",
      "sprintf_line": 239,
      "context_lines": [
        "src/DRISE/Task.cpp-240-\t\t\t\tchar msbuf[32] = {0};"
      ],
      "raw_content": "src/DRISE/Task.cpp:239:\t\t\t\tsprintf( secbuf, \"%d seconds \", secs );\nsrc/DRISE/Task.cpp-240-\t\t\t\tchar msbuf[32] = {0};"
    },
    {
      "file_path": "src/DRISE/Task.cpp",
      "sprintf_line": 241,
      "context_lines": [
        "src/DRISE/Task.cpp-242-",
        "src/DRISE/Task.cpp-243-\t\t\t\tif( days ) {",
        "src/DRISE/Task.cpp-244-\t\t\t\t\tstrcat( buf, daybuf );",
        "src/DRISE/Task.cpp-245-\t\t\t\t}",
        "src/DRISE/Task.cpp-246-",
        "src/DRISE/Task.cpp-247-\t\t\t\tif( hours ) {",
        "src/DRISE/Task.cpp-248-\t\t\t\t\tstrcat( buf, hourbuf );",
        "src/DRISE/Task.cpp-249-\t\t\t\t}",
        "src/DRISE/Task.cpp-250-",
        "src/DRISE/Task.cpp-251-\t\t\t\tif( mins ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-484-\t\tunsigned int\t\thours = duration/1000/60/60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-485-\t\tduration -= hours*1000*60*60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-486-\t\tunsigned int\t\tmins = duration/1000/60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-487-\t\tduration -= mins*1000*60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-488-\t\tunsigned int\t\tsecs = duration/1000;",
        "src/Library/Parsers/AsciiCommandParser.cpp-489-\t\tunsigned int\t\tms = duration % 1000;",
        "src/Library/Parsers/AsciiCommandParser.cpp-490-",
        "src/Library/Parsers/AsciiCommandParser.cpp-491-\t\tchar buf[1024] = {0};"
      ],
      "raw_content": "src/DRISE/Task.cpp:241:\t\t\t\tsprintf( msbuf, \"%d ms\", ms );\nsrc/DRISE/Task.cpp-242-\nsrc/DRISE/Task.cpp-243-\t\t\t\tif( days ) {\nsrc/DRISE/Task.cpp-244-\t\t\t\t\tstrcat( buf, daybuf );\nsrc/DRISE/Task.cpp-245-\t\t\t\t}\nsrc/DRISE/Task.cpp-246-\nsrc/DRISE/Task.cpp-247-\t\t\t\tif( hours ) {\nsrc/DRISE/Task.cpp-248-\t\t\t\t\tstrcat( buf, hourbuf );\nsrc/DRISE/Task.cpp-249-\t\t\t\t}\nsrc/DRISE/Task.cpp-250-\nsrc/DRISE/Task.cpp-251-\t\t\t\tif( mins ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-484-\t\tunsigned int\t\thours = duration/1000/60/60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-485-\t\tduration -= hours*1000*60*60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-486-\t\tunsigned int\t\tmins = duration/1000/60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-487-\t\tduration -= mins*1000*60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-488-\t\tunsigned int\t\tsecs = duration/1000;\nsrc/Library/Parsers/AsciiCommandParser.cpp-489-\t\tunsigned int\t\tms = duration % 1000;\nsrc/Library/Parsers/AsciiCommandParser.cpp-490-\nsrc/Library/Parsers/AsciiCommandParser.cpp-491-\t\tchar buf[1024] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp-492-\t\tstrcat( buf, \"Predicted Rasterization Time",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-493-\t\tchar daybuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp-492-\t\tstrcat( buf, \"Predicted Rasterization Time: \" );\nsrc/Library/Parsers/AsciiCommandParser.cpp-493-\t\tchar daybuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 494,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-495-\t\tchar hourbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:494:\t\tsprintf( daybuf, \"%d days \", days );\nsrc/Library/Parsers/AsciiCommandParser.cpp-495-\t\tchar hourbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 496,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-497-\t\tchar minbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:496:\t\tsprintf( hourbuf, \"%d hours \", hours );\nsrc/Library/Parsers/AsciiCommandParser.cpp-497-\t\tchar minbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 498,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-499-\t\tchar secbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:498:\t\tsprintf( minbuf, \"%d minutes \", mins );\nsrc/Library/Parsers/AsciiCommandParser.cpp-499-\t\tchar secbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 500,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-501-\t\tchar msbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:500:\t\tsprintf( secbuf, \"%d seconds \", secs );\nsrc/Library/Parsers/AsciiCommandParser.cpp-501-\t\tchar msbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 502,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-503-",
        "src/Library/Parsers/AsciiCommandParser.cpp-504-\t\tif( days ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-505-\t\t\tstrcat( buf, daybuf );",
        "src/Library/Parsers/AsciiCommandParser.cpp-506-\t\t}",
        "src/Library/Parsers/AsciiCommandParser.cpp-507-",
        "src/Library/Parsers/AsciiCommandParser.cpp-508-\t\tif( hours ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-509-\t\t\tstrcat( buf, hourbuf );",
        "src/Library/Parsers/AsciiCommandParser.cpp-510-\t\t}",
        "src/Library/Parsers/AsciiCommandParser.cpp-511-",
        "src/Library/Parsers/AsciiCommandParser.cpp-512-\t\tif( mins ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-563-\tunsigned int\t\thours = duration/1000/60/60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-564-\tduration -= hours*1000*60*60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-565-\tunsigned int\t\tmins = duration/1000/60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-566-\tduration -= mins*1000*60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-567-\tunsigned int\t\tsecs = duration/1000;",
        "src/Library/Parsers/AsciiCommandParser.cpp-568-\tunsigned int\t\tms = duration % 1000;",
        "src/Library/Parsers/AsciiCommandParser.cpp-569-",
        "src/Library/Parsers/AsciiCommandParser.cpp-570-\tchar buf[1024] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:502:\t\tsprintf( msbuf, \"%d ms\", ms );\nsrc/Library/Parsers/AsciiCommandParser.cpp-503-\nsrc/Library/Parsers/AsciiCommandParser.cpp-504-\t\tif( days ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-505-\t\t\tstrcat( buf, daybuf );\nsrc/Library/Parsers/AsciiCommandParser.cpp-506-\t\t}\nsrc/Library/Parsers/AsciiCommandParser.cpp-507-\nsrc/Library/Parsers/AsciiCommandParser.cpp-508-\t\tif( hours ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-509-\t\t\tstrcat( buf, hourbuf );\nsrc/Library/Parsers/AsciiCommandParser.cpp-510-\t\t}\nsrc/Library/Parsers/AsciiCommandParser.cpp-511-\nsrc/Library/Parsers/AsciiCommandParser.cpp-512-\t\tif( mins ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-563-\tunsigned int\t\thours = duration/1000/60/60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-564-\tduration -= hours*1000*60*60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-565-\tunsigned int\t\tmins = duration/1000/60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-566-\tduration -= mins*1000*60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-567-\tunsigned int\t\tsecs = duration/1000;\nsrc/Library/Parsers/AsciiCommandParser.cpp-568-\tunsigned int\t\tms = duration % 1000;\nsrc/Library/Parsers/AsciiCommandParser.cpp-569-\nsrc/Library/Parsers/AsciiCommandParser.cpp-570-\tchar buf[1024] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp-571-\tstrcat( buf, \"Total Rasterization Time",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-572-\tchar daybuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp-571-\tstrcat( buf, \"Total Rasterization Time: \" );\nsrc/Library/Parsers/AsciiCommandParser.cpp-572-\tchar daybuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 573,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-574-\tchar hourbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:573:\tsprintf( daybuf, \"%d days \", days );\nsrc/Library/Parsers/AsciiCommandParser.cpp-574-\tchar hourbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 575,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-576-\tchar minbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:575:\tsprintf( hourbuf, \"%d hours \", hours );\nsrc/Library/Parsers/AsciiCommandParser.cpp-576-\tchar minbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 577,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-578-\tchar secbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:577:\tsprintf( minbuf, \"%d minutes \", mins );\nsrc/Library/Parsers/AsciiCommandParser.cpp-578-\tchar secbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 579,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-580-\tchar msbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:579:\tsprintf( secbuf, \"%d seconds \", secs );\nsrc/Library/Parsers/AsciiCommandParser.cpp-580-\tchar msbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 581,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-582-",
        "src/Library/Parsers/AsciiCommandParser.cpp-583-\tif( days ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-584-\t\tstrcat( buf, daybuf );",
        "src/Library/Parsers/AsciiCommandParser.cpp-585-\t}",
        "src/Library/Parsers/AsciiCommandParser.cpp-586-",
        "src/Library/Parsers/AsciiCommandParser.cpp-587-\tif( hours ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-588-\t\tstrcat( buf, hourbuf );",
        "src/Library/Parsers/AsciiCommandParser.cpp-589-\t}",
        "src/Library/Parsers/AsciiCommandParser.cpp-590-",
        "src/Library/Parsers/AsciiCommandParser.cpp-591-\tif( mins ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-648-\tunsigned int\t\thours = duration/1000/60/60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-649-\tduration -= hours*1000*60*60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-650-\tunsigned int\t\tmins = duration/1000/60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-651-\tduration -= mins*1000*60;",
        "src/Library/Parsers/AsciiCommandParser.cpp-652-\tunsigned int\t\tsecs = duration/1000;",
        "src/Library/Parsers/AsciiCommandParser.cpp-653-\tunsigned int\t\tms = duration % 1000;",
        "src/Library/Parsers/AsciiCommandParser.cpp-654-",
        "src/Library/Parsers/AsciiCommandParser.cpp-655-\tchar buf[1024] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:581:\tsprintf( msbuf, \"%d ms\", ms );\nsrc/Library/Parsers/AsciiCommandParser.cpp-582-\nsrc/Library/Parsers/AsciiCommandParser.cpp-583-\tif( days ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-584-\t\tstrcat( buf, daybuf );\nsrc/Library/Parsers/AsciiCommandParser.cpp-585-\t}\nsrc/Library/Parsers/AsciiCommandParser.cpp-586-\nsrc/Library/Parsers/AsciiCommandParser.cpp-587-\tif( hours ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-588-\t\tstrcat( buf, hourbuf );\nsrc/Library/Parsers/AsciiCommandParser.cpp-589-\t}\nsrc/Library/Parsers/AsciiCommandParser.cpp-590-\nsrc/Library/Parsers/AsciiCommandParser.cpp-591-\tif( mins ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-648-\tunsigned int\t\thours = duration/1000/60/60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-649-\tduration -= hours*1000*60*60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-650-\tunsigned int\t\tmins = duration/1000/60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-651-\tduration -= mins*1000*60;\nsrc/Library/Parsers/AsciiCommandParser.cpp-652-\tunsigned int\t\tsecs = duration/1000;\nsrc/Library/Parsers/AsciiCommandParser.cpp-653-\tunsigned int\t\tms = duration % 1000;\nsrc/Library/Parsers/AsciiCommandParser.cpp-654-\nsrc/Library/Parsers/AsciiCommandParser.cpp-655-\tchar buf[1024] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp-656-\tstrcat( buf, \"Total Rasterization Time",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-657-\tchar daybuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp-656-\tstrcat( buf, \"Total Rasterization Time: \" );\nsrc/Library/Parsers/AsciiCommandParser.cpp-657-\tchar daybuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 658,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-659-\tchar hourbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:658:\tsprintf( daybuf, \"%d days \", days );\nsrc/Library/Parsers/AsciiCommandParser.cpp-659-\tchar hourbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 660,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-661-\tchar minbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:660:\tsprintf( hourbuf, \"%d hours \", hours );\nsrc/Library/Parsers/AsciiCommandParser.cpp-661-\tchar minbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 662,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-663-\tchar secbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:662:\tsprintf( minbuf, \"%d minutes \", mins );\nsrc/Library/Parsers/AsciiCommandParser.cpp-663-\tchar secbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 664,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-665-\tchar msbuf[32] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:664:\tsprintf( secbuf, \"%d seconds \", secs );\nsrc/Library/Parsers/AsciiCommandParser.cpp-665-\tchar msbuf[32] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiCommandParser.cpp",
      "sprintf_line": 666,
      "context_lines": [
        "src/Library/Parsers/AsciiCommandParser.cpp-667-",
        "src/Library/Parsers/AsciiCommandParser.cpp-668-\tif( days ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-669-\t\tstrcat( buf, daybuf );",
        "src/Library/Parsers/AsciiCommandParser.cpp-670-\t}",
        "src/Library/Parsers/AsciiCommandParser.cpp-671-",
        "src/Library/Parsers/AsciiCommandParser.cpp-672-\tif( hours ) {",
        "src/Library/Parsers/AsciiCommandParser.cpp-673-\t\tstrcat( buf, hourbuf );",
        "src/Library/Parsers/AsciiCommandParser.cpp-674-\t}",
        "src/Library/Parsers/AsciiCommandParser.cpp-675-",
        "src/Library/Parsers/AsciiCommandParser.cpp-676-\tif( mins ) {",
        "src/Library/Parsers/AsciiSceneParser.cpp-143-\t\tif( str[1] == 'a' && str[2] == 'l' ) {",
        "src/Library/Parsers/AsciiSceneParser.cpp-144-\t\t\tval = mh.next_halton(int(expr.eval()));",
        "src/Library/Parsers/AsciiSceneParser.cpp-145-\t\t} else {",
        "src/Library/Parsers/AsciiSceneParser.cpp-146-\t\t\treturn 2;",
        "src/Library/Parsers/AsciiSceneParser.cpp-147-\t\t}",
        "src/Library/Parsers/AsciiSceneParser.cpp-148-\t\tbreak;",
        "src/Library/Parsers/AsciiSceneParser.cpp-149-\t}",
        "src/Library/Parsers/AsciiSceneParser.cpp-150-",
        "src/Library/Parsers/AsciiSceneParser.cpp-151-\t// assemble together",
        "src/Library/Parsers/AsciiSceneParser.cpp-152-\tchar evaluated[64] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiCommandParser.cpp:666:\tsprintf( msbuf, \"%d ms\", ms );\nsrc/Library/Parsers/AsciiCommandParser.cpp-667-\nsrc/Library/Parsers/AsciiCommandParser.cpp-668-\tif( days ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-669-\t\tstrcat( buf, daybuf );\nsrc/Library/Parsers/AsciiCommandParser.cpp-670-\t}\nsrc/Library/Parsers/AsciiCommandParser.cpp-671-\nsrc/Library/Parsers/AsciiCommandParser.cpp-672-\tif( hours ) {\nsrc/Library/Parsers/AsciiCommandParser.cpp-673-\t\tstrcat( buf, hourbuf );\nsrc/Library/Parsers/AsciiCommandParser.cpp-674-\t}\nsrc/Library/Parsers/AsciiCommandParser.cpp-675-\nsrc/Library/Parsers/AsciiCommandParser.cpp-676-\tif( mins ) {\nsrc/Library/Parsers/AsciiSceneParser.cpp-143-\t\tif( str[1] == 'a' && str[2] == 'l' ) {\nsrc/Library/Parsers/AsciiSceneParser.cpp-144-\t\t\tval = mh.next_halton(int(expr.eval()));\nsrc/Library/Parsers/AsciiSceneParser.cpp-145-\t\t} else {\nsrc/Library/Parsers/AsciiSceneParser.cpp-146-\t\t\treturn 2;\nsrc/Library/Parsers/AsciiSceneParser.cpp-147-\t\t}\nsrc/Library/Parsers/AsciiSceneParser.cpp-148-\t\tbreak;\nsrc/Library/Parsers/AsciiSceneParser.cpp-149-\t}\nsrc/Library/Parsers/AsciiSceneParser.cpp-150-\nsrc/Library/Parsers/AsciiSceneParser.cpp-151-\t// assemble together\nsrc/Library/Parsers/AsciiSceneParser.cpp-152-\tchar evaluated[64] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiSceneParser.cpp",
      "sprintf_line": 153,
      "context_lines": [
        "src/Library/Parsers/AsciiSceneParser.cpp-154-",
        "src/Library/Parsers/AsciiSceneParser.cpp-155-\tprocessed.append( evaluated );",
        "src/Library/Parsers/AsciiSceneParser.cpp-156-\tprocessed.append( str.substr( y+1, str.length()-1 ) );",
        "src/Library/Parsers/AsciiSceneParser.cpp-157-",
        "src/Library/Parsers/AsciiSceneParser.cpp-158-\ttoken = String(processed.c_str());",
        "src/Library/Parsers/AsciiSceneParser.cpp-159-",
        "src/Library/Parsers/AsciiSceneParser.cpp-160-\treturn 1;",
        "src/Library/Parsers/AsciiSceneParser.cpp-161-}",
        "src/Library/Parsers/AsciiSceneParser.cpp-162-",
        "src/Library/Parsers/AsciiSceneParser.cpp-163-inline bool evaluate_functions_in_expression( String& token )",
        "src/Library/Parsers/AsciiSceneParser.cpp-205-\t// We clamp out string",
        "src/Library/Parsers/AsciiSceneParser.cpp-206-\tconst char * str = token.c_str();",
        "src/Library/Parsers/AsciiSceneParser.cpp-207-\tchar* s = (char*)&str[1];",
        "src/Library/Parsers/AsciiSceneParser.cpp-208-"
      ],
      "raw_content": "src/Library/Parsers/AsciiSceneParser.cpp:153:\tsprintf( evaluated, \"%.12f\", val );\nsrc/Library/Parsers/AsciiSceneParser.cpp-154-\nsrc/Library/Parsers/AsciiSceneParser.cpp-155-\tprocessed.append( evaluated );\nsrc/Library/Parsers/AsciiSceneParser.cpp-156-\tprocessed.append( str.substr( y+1, str.length()-1 ) );\nsrc/Library/Parsers/AsciiSceneParser.cpp-157-\nsrc/Library/Parsers/AsciiSceneParser.cpp-158-\ttoken = String(processed.c_str());\nsrc/Library/Parsers/AsciiSceneParser.cpp-159-\nsrc/Library/Parsers/AsciiSceneParser.cpp-160-\treturn 1;\nsrc/Library/Parsers/AsciiSceneParser.cpp-161-}\nsrc/Library/Parsers/AsciiSceneParser.cpp-162-\nsrc/Library/Parsers/AsciiSceneParser.cpp-163-inline bool evaluate_functions_in_expression( String& token )\nsrc/Library/Parsers/AsciiSceneParser.cpp-205-\t// We clamp out string\nsrc/Library/Parsers/AsciiSceneParser.cpp-206-\tconst char * str = token.c_str();\nsrc/Library/Parsers/AsciiSceneParser.cpp-207-\tchar* s = (char*)&str[1];\nsrc/Library/Parsers/AsciiSceneParser.cpp-208-"
    },
    {
      "file_path": "src/Library/Parsers/AsciiSceneParser.cpp-209-\tMathExpressionEvaluator",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Parsers/AsciiSceneParser.cpp-210-\tif( expr.error() ) {",
        "src/Library/Parsers/AsciiSceneParser.cpp-211-\t\treturn false;",
        "src/Library/Parsers/AsciiSceneParser.cpp-212-\t}",
        "src/Library/Parsers/AsciiSceneParser.cpp-213-",
        "src/Library/Parsers/AsciiSceneParser.cpp-214-\tchar evaluated[64] = {0};"
      ],
      "raw_content": "src/Library/Parsers/AsciiSceneParser.cpp-209-\tMathExpressionEvaluator::Expression expr( s );\nsrc/Library/Parsers/AsciiSceneParser.cpp-210-\tif( expr.error() ) {\nsrc/Library/Parsers/AsciiSceneParser.cpp-211-\t\treturn false;\nsrc/Library/Parsers/AsciiSceneParser.cpp-212-\t}\nsrc/Library/Parsers/AsciiSceneParser.cpp-213-\nsrc/Library/Parsers/AsciiSceneParser.cpp-214-\tchar evaluated[64] = {0};"
    },
    {
      "file_path": "src/Library/Parsers/AsciiSceneParser.cpp",
      "sprintf_line": 215,
      "context_lines": [
        "src/Library/Parsers/AsciiSceneParser.cpp-216-",
        "src/Library/Parsers/AsciiSceneParser.cpp-217-\ttoken = String(evaluated);",
        "src/Library/Parsers/AsciiSceneParser.cpp-218-\treturn true;",
        "src/Library/Parsers/AsciiSceneParser.cpp-219-}",
        "src/Library/Parsers/AsciiSceneParser.cpp-220-",
        "src/Library/Parsers/AsciiSceneParser.cpp-221-inline bool evaluate_expressions_in_tokens( String* tokens, const unsigned int num_tokens )",
        "src/Library/Parsers/AsciiSceneParser.cpp-222-{",
        "src/Library/Parsers/AsciiSceneParser.cpp-223-\tfor( unsigned int i=0; i<num_tokens; i++ ) {",
        "src/Library/Parsers/AsciiSceneParser.cpp-224-\t\t// Check to see if we have an expression",
        "src/Library/Parsers/AsciiSceneParser.cpp-225-\t\tif( tokens[i][0] == '$' ) {",
        "src/Library/Parsers/AsciiSceneParser.cpp-6354-"
      ],
      "raw_content": "src/Library/Parsers/AsciiSceneParser.cpp:215:\tsprintf( evaluated, \"%.12f\", expr.eval() );\nsrc/Library/Parsers/AsciiSceneParser.cpp-216-\nsrc/Library/Parsers/AsciiSceneParser.cpp-217-\ttoken = String(evaluated);\nsrc/Library/Parsers/AsciiSceneParser.cpp-218-\treturn true;\nsrc/Library/Parsers/AsciiSceneParser.cpp-219-}\nsrc/Library/Parsers/AsciiSceneParser.cpp-220-\nsrc/Library/Parsers/AsciiSceneParser.cpp-221-inline bool evaluate_expressions_in_tokens( String* tokens, const unsigned int num_tokens )\nsrc/Library/Parsers/AsciiSceneParser.cpp-222-{\nsrc/Library/Parsers/AsciiSceneParser.cpp-223-\tfor( unsigned int i=0; i<num_tokens; i++ ) {\nsrc/Library/Parsers/AsciiSceneParser.cpp-224-\t\t// Check to see if we have an expression\nsrc/Library/Parsers/AsciiSceneParser.cpp-225-\t\tif( tokens[i][0] == '$' ) {\nsrc/Library/Parsers/AsciiSceneParser.cpp-6354-"
    },
    {
      "file_path": "src/Library/Parsers/AsciiSceneParser.cpp-6355-\t\tMacroTable",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Parsers/AsciiSceneParser.cpp-6356-",
        "src/Library/Parsers/AsciiSceneParser.cpp-6357-\t\tif( it == macros.end() ) {",
        "src/Library/Parsers/AsciiSceneParser.cpp-6358-\t\t\treturn 2;\t// Error",
        "src/Library/Parsers/AsciiSceneParser.cpp-6359-\t\t}",
        "src/Library/Parsers/AsciiSceneParser.cpp-6360-",
        "src/Library/Parsers/AsciiSceneParser.cpp-6361-\t\t// Re-assemble the string",
        "src/Library/Parsers/AsciiSceneParser.cpp-6362-\t\tchar buf[64] = {0};",
        "src/Library/Parsers/AsciiSceneParser.cpp-6363-\t\tif( macro_char == '@' ) {"
      ],
      "raw_content": "src/Library/Parsers/AsciiSceneParser.cpp-6355-\t\tMacroTable::const_iterator it = macros.find( macro.c_str() );\nsrc/Library/Parsers/AsciiSceneParser.cpp-6356-\nsrc/Library/Parsers/AsciiSceneParser.cpp-6357-\t\tif( it == macros.end() ) {\nsrc/Library/Parsers/AsciiSceneParser.cpp-6358-\t\t\treturn 2;\t// Error\nsrc/Library/Parsers/AsciiSceneParser.cpp-6359-\t\t}\nsrc/Library/Parsers/AsciiSceneParser.cpp-6360-\nsrc/Library/Parsers/AsciiSceneParser.cpp-6361-\t\t// Re-assemble the string\nsrc/Library/Parsers/AsciiSceneParser.cpp-6362-\t\tchar buf[64] = {0};\nsrc/Library/Parsers/AsciiSceneParser.cpp-6363-\t\tif( macro_char == '@' ) {"
    },
    {
      "file_path": "src/Library/Parsers/AsciiSceneParser.cpp",
      "sprintf_line": 6364,
      "context_lines": [
        "src/Library/Parsers/AsciiSceneParser.cpp-6365-\t\t} else {"
      ],
      "raw_content": "src/Library/Parsers/AsciiSceneParser.cpp:6364:\t\t\tsprintf( buf, \"%.12f\", it->second );\nsrc/Library/Parsers/AsciiSceneParser.cpp-6365-\t\t} else {"
    },
    {
      "file_path": "src/Library/Parsers/AsciiSceneParser.cpp",
      "sprintf_line": 6366,
      "context_lines": [
        "src/Library/Parsers/AsciiSceneParser.cpp-6367-\t\t}",
        "src/Library/Parsers/AsciiSceneParser.cpp-6368-\t\tprocessed.append( buf );",
        "src/Library/Parsers/AsciiSceneParser.cpp-6369-",
        "src/Library/Parsers/AsciiSceneParser.cpp-6370-\t\tif( x<str.size() ) {",
        "src/Library/Parsers/AsciiSceneParser.cpp-6371-\t\t\tprocessed.append( str.substr( x, str.size() ) );",
        "src/Library/Parsers/AsciiSceneParser.cpp-6372-\t\t}",
        "src/Library/Parsers/AsciiSceneParser.cpp-6373-",
        "src/Library/Parsers/AsciiSceneParser.cpp-6374-\t\ttoken = processed.c_str();",
        "src/Library/Parsers/AsciiSceneParser.cpp-6375-",
        "src/Library/Parsers/AsciiSceneParser.cpp-6376-\t\treturn 1;\t// Successfull subsitution"
      ],
      "raw_content": "src/Library/Parsers/AsciiSceneParser.cpp:6366:\t\t\tsprintf( buf, \"%.4d\", (int)it->second );\nsrc/Library/Parsers/AsciiSceneParser.cpp-6367-\t\t}\nsrc/Library/Parsers/AsciiSceneParser.cpp-6368-\t\tprocessed.append( buf );\nsrc/Library/Parsers/AsciiSceneParser.cpp-6369-\nsrc/Library/Parsers/AsciiSceneParser.cpp-6370-\t\tif( x<str.size() ) {\nsrc/Library/Parsers/AsciiSceneParser.cpp-6371-\t\t\tprocessed.append( str.substr( x, str.size() ) );\nsrc/Library/Parsers/AsciiSceneParser.cpp-6372-\t\t}\nsrc/Library/Parsers/AsciiSceneParser.cpp-6373-\nsrc/Library/Parsers/AsciiSceneParser.cpp-6374-\t\ttoken = processed.c_str();\nsrc/Library/Parsers/AsciiSceneParser.cpp-6375-\nsrc/Library/Parsers/AsciiSceneParser.cpp-6376-\t\treturn 1;\t// Successfull subsitution"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp-5-//  Author",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp-5-//  Author: Aravind Krishnaswamy"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp-6-//  Date of Birth",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp-6-//  Date of Birth: November 17, 2003"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp-7-//  Tabs",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp-7-//  Tabs: 4"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp-8-//  Comments",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/HDRWriter.cpp-9-//"
      ],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp-8-//  Comments:\nsrc/Library/RasterImages/HDRWriter.cpp-9-//"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp-10-//  License Information",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/HDRWriter.cpp-11-//",
        "src/Library/RasterImages/HDRWriter.cpp-12-//////////////////////////////////////////////////////////////////////",
        "src/Library/RasterImages/HDRWriter.cpp-13-",
        "src/Library/RasterImages/HDRWriter.cpp-14-#include \"pch.h\""
      ],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp-10-//  License Information: Please see the attached LICENSE.TXT file\nsrc/Library/RasterImages/HDRWriter.cpp-11-//\nsrc/Library/RasterImages/HDRWriter.cpp-12-//////////////////////////////////////////////////////////////////////\nsrc/Library/RasterImages/HDRWriter.cpp-13-\nsrc/Library/RasterImages/HDRWriter.cpp-14-#include \"pch.h\""
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp",
      "sprintf_line": 15,
      "context_lines": [
        "src/Library/RasterImages/HDRWriter.cpp-16-#include <string.h>\t\t\t\t\t// for strlen and strncmp",
        "src/Library/RasterImages/HDRWriter.cpp-17-#include \"HDRWriter.h\"",
        "src/Library/RasterImages/HDRWriter.cpp-18-#include \"../Interfaces/ILog.h\"",
        "src/Library/RasterImages/HDRWriter.cpp-19-#include \"../Version.h\"",
        "src/Library/RasterImages/HDRWriter.cpp-20-",
        "src/Library/RasterImages/HDRWriter.cpp-21-using namespace RISE;"
      ],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp:15:#include <stdio.h>\t\t\t\t\t// for sprintf\nsrc/Library/RasterImages/HDRWriter.cpp-16-#include <string.h>\t\t\t\t\t// for strlen and strncmp\nsrc/Library/RasterImages/HDRWriter.cpp-17-#include \"HDRWriter.h\"\nsrc/Library/RasterImages/HDRWriter.cpp-18-#include \"../Interfaces/ILog.h\"\nsrc/Library/RasterImages/HDRWriter.cpp-19-#include \"../Version.h\"\nsrc/Library/RasterImages/HDRWriter.cpp-20-\nsrc/Library/RasterImages/HDRWriter.cpp-21-using namespace RISE;"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp-22-using namespace RISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/HDRWriter.cpp-23-"
      ],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp-22-using namespace RISE::Implementation;\nsrc/Library/RasterImages/HDRWriter.cpp-23-"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp-24-HDRWriter",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/HDRWriter.cpp-25-  pWriteBuffer( buffer ),",
        "src/Library/RasterImages/HDRWriter.cpp-40-\t}",
        "src/Library/RasterImages/HDRWriter.cpp-41-}",
        "src/Library/RasterImages/HDRWriter.cpp-42-"
      ],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp-24-HDRWriter::HDRWriter( IWriteBuffer& buffer, const COLOR_SPACE color_space_ ) :\nsrc/Library/RasterImages/HDRWriter.cpp-25-  pWriteBuffer( buffer ),\nsrc/Library/RasterImages/HDRWriter.cpp-40-\t}\nsrc/Library/RasterImages/HDRWriter.cpp-41-}\nsrc/Library/RasterImages/HDRWriter.cpp-42-"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp-43-void HDRWriter",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/HDRWriter.cpp-44-{",
        "src/Library/RasterImages/HDRWriter.cpp-45-\t// Build the header",
        "src/Library/RasterImages/HDRWriter.cpp-46-\tchar szHeader[2048] = {0};",
        "src/Library/RasterImages/HDRWriter.cpp-47-\t{",
        "src/Library/RasterImages/HDRWriter.cpp-48-\t\tstatic const char * szSignature = \"#?RADIANCE\\n\";",
        "src/Library/RasterImages/HDRWriter.cpp-49-\t\tchar szWhoWroteIt[256] = {0};"
      ],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp-43-void HDRWriter::BeginWrite( const unsigned int width, const unsigned int height )\nsrc/Library/RasterImages/HDRWriter.cpp-44-{\nsrc/Library/RasterImages/HDRWriter.cpp-45-\t// Build the header\nsrc/Library/RasterImages/HDRWriter.cpp-46-\tchar szHeader[2048] = {0};\nsrc/Library/RasterImages/HDRWriter.cpp-47-\t{\nsrc/Library/RasterImages/HDRWriter.cpp-48-\t\tstatic const char * szSignature = \"#?RADIANCE\\n\";\nsrc/Library/RasterImages/HDRWriter.cpp-49-\t\tchar szWhoWroteIt[256] = {0};"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp",
      "sprintf_line": 50,
      "context_lines": [
        "src/Library/RasterImages/HDRWriter.cpp-51-\t\tstatic const char * szImageType = \"FORMAT=32-bit_rle_rgbe\\n\\n\";",
        "src/Library/RasterImages/HDRWriter.cpp-52-\t\tchar szImageDimensions[256] = {0};"
      ],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp:50:\t\tsprintf( szWhoWroteIt, \"# Generated by R.I.S.E. v%d.%d.%d build %d\\n\", RISE_VER_MAJOR_VERSION, RISE_VER_MINOR_VERSION, RISE_VER_REVISION_VERSION, RISE_VER_BUILD_VERSION );\nsrc/Library/RasterImages/HDRWriter.cpp-51-\t\tstatic const char * szImageType = \"FORMAT=32-bit_rle_rgbe\\n\\n\";\nsrc/Library/RasterImages/HDRWriter.cpp-52-\t\tchar szImageDimensions[256] = {0};"
    },
    {
      "file_path": "src/Library/RasterImages/HDRWriter.cpp",
      "sprintf_line": 53,
      "context_lines": [
        "src/Library/RasterImages/HDRWriter.cpp-54-",
        "src/Library/RasterImages/HDRWriter.cpp-55-\t\tstrcpy( szHeader, szSignature );",
        "src/Library/RasterImages/HDRWriter.cpp-56-\t\tstrcat( szHeader, szWhoWroteIt );",
        "src/Library/RasterImages/HDRWriter.cpp-57-\t\tstrcat( szHeader, szImageType );",
        "src/Library/RasterImages/HDRWriter.cpp-58-\t\tstrcat( szHeader, szImageDimensions );",
        "src/Library/RasterImages/HDRWriter.cpp-59-\t}",
        "src/Library/RasterImages/HDRWriter.cpp-60-",
        "src/Library/RasterImages/HDRWriter.cpp-61-\t// Write the header",
        "src/Library/RasterImages/HDRWriter.cpp-62-\t// Make sure there's enough room in the buffer first",
        "src/Library/RasterImages/HDRWriter.cpp-63-\tpWriteBuffer.Resize( width*height*4 + strlen(szHeader) );",
        "src/Library/RasterImages/PPMWriter.cpp-40-\t\tdelete [] pBuffer;",
        "src/Library/RasterImages/PPMWriter.cpp-41-\t\tpBuffer = 0;",
        "src/Library/RasterImages/PPMWriter.cpp-42-\t}",
        "src/Library/RasterImages/PPMWriter.cpp-43-}",
        "src/Library/RasterImages/PPMWriter.cpp-44-"
      ],
      "raw_content": "src/Library/RasterImages/HDRWriter.cpp:53:\t\tsprintf( szImageDimensions,\"-Y %d +X %d\\n\", height, width );\nsrc/Library/RasterImages/HDRWriter.cpp-54-\nsrc/Library/RasterImages/HDRWriter.cpp-55-\t\tstrcpy( szHeader, szSignature );\nsrc/Library/RasterImages/HDRWriter.cpp-56-\t\tstrcat( szHeader, szWhoWroteIt );\nsrc/Library/RasterImages/HDRWriter.cpp-57-\t\tstrcat( szHeader, szImageType );\nsrc/Library/RasterImages/HDRWriter.cpp-58-\t\tstrcat( szHeader, szImageDimensions );\nsrc/Library/RasterImages/HDRWriter.cpp-59-\t}\nsrc/Library/RasterImages/HDRWriter.cpp-60-\nsrc/Library/RasterImages/HDRWriter.cpp-61-\t// Write the header\nsrc/Library/RasterImages/HDRWriter.cpp-62-\t// Make sure there's enough room in the buffer first\nsrc/Library/RasterImages/HDRWriter.cpp-63-\tpWriteBuffer.Resize( width*height*4 + strlen(szHeader) );\nsrc/Library/RasterImages/PPMWriter.cpp-40-\t\tdelete [] pBuffer;\nsrc/Library/RasterImages/PPMWriter.cpp-41-\t\tpBuffer = 0;\nsrc/Library/RasterImages/PPMWriter.cpp-42-\t}\nsrc/Library/RasterImages/PPMWriter.cpp-43-}\nsrc/Library/RasterImages/PPMWriter.cpp-44-"
    },
    {
      "file_path": "src/Library/RasterImages/PPMWriter.cpp-45-void PPMWriter",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/PPMWriter.cpp-46-{",
        "src/Library/RasterImages/PPMWriter.cpp-47-\t// Write the header",
        "src/Library/RasterImages/PPMWriter.cpp-48-\t// Get a string with the header",
        "src/Library/RasterImages/PPMWriter.cpp-49-\tchar\theader[256] = {0};"
      ],
      "raw_content": "src/Library/RasterImages/PPMWriter.cpp-45-void PPMWriter::BeginWrite( const unsigned int width, const unsigned int height )\nsrc/Library/RasterImages/PPMWriter.cpp-46-{\nsrc/Library/RasterImages/PPMWriter.cpp-47-\t// Write the header\nsrc/Library/RasterImages/PPMWriter.cpp-48-\t// Get a string with the header\nsrc/Library/RasterImages/PPMWriter.cpp-49-\tchar\theader[256] = {0};"
    },
    {
      "file_path": "src/Library/RasterImages/PPMWriter.cpp",
      "sprintf_line": 50,
      "context_lines": [
        "src/Library/RasterImages/PPMWriter.cpp-51-",
        "src/Library/RasterImages/PPMWriter.cpp-52-\t// Make sure the buffer is the correct size",
        "src/Library/RasterImages/PPMWriter.cpp-53-\tpWriteBuffer.Resize( strlen( header ) + width*height*3 );",
        "src/Library/RasterImages/PPMWriter.cpp-54-",
        "src/Library/RasterImages/PPMWriter.cpp-55-\t// Copy the header",
        "src/Library/RasterImages/PPMWriter.cpp-56-\tpWriteBuffer.setBytes( header, strlen( header ) );",
        "src/Library/RasterImages/PPMWriter.cpp-57-\t",
        "src/Library/RasterImages/PPMWriter.cpp-58-\tbufW = width;",
        "src/Library/RasterImages/PPMWriter.cpp-59-\tbufH = height;",
        "src/Library/RasterImages/PPMWriter.cpp-60-\tpBuffer = new unsigned char[width*height*3];"
      ],
      "raw_content": "src/Library/RasterImages/PPMWriter.cpp:50:\tsprintf( header, \"P6\\n%d %d\\n255\\n\", width, height );\nsrc/Library/RasterImages/PPMWriter.cpp-51-\nsrc/Library/RasterImages/PPMWriter.cpp-52-\t// Make sure the buffer is the correct size\nsrc/Library/RasterImages/PPMWriter.cpp-53-\tpWriteBuffer.Resize( strlen( header ) + width*height*3 );\nsrc/Library/RasterImages/PPMWriter.cpp-54-\nsrc/Library/RasterImages/PPMWriter.cpp-55-\t// Copy the header\nsrc/Library/RasterImages/PPMWriter.cpp-56-\tpWriteBuffer.setBytes( header, strlen( header ) );\nsrc/Library/RasterImages/PPMWriter.cpp-57-\t\nsrc/Library/RasterImages/PPMWriter.cpp-58-\tbufW = width;\nsrc/Library/RasterImages/PPMWriter.cpp-59-\tbufH = height;\nsrc/Library/RasterImages/PPMWriter.cpp-60-\tpBuffer = new unsigned char[width*height*3];"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp-5-//  Author",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp-5-//  Author: Aravind Krishnaswamy"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp-6-//  Date of Birth",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp-6-//  Date of Birth: February 4, 2004"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp-7-//  Tabs",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp-7-//  Tabs: 4"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp-8-//  Comments",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/RGBEAWriter.cpp-9-//"
      ],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp-8-//  Comments:\nsrc/Library/RasterImages/RGBEAWriter.cpp-9-//"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp-10-//  License Information",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/RGBEAWriter.cpp-11-//",
        "src/Library/RasterImages/RGBEAWriter.cpp-12-//////////////////////////////////////////////////////////////////////",
        "src/Library/RasterImages/RGBEAWriter.cpp-13-",
        "src/Library/RasterImages/RGBEAWriter.cpp-14-#include \"pch.h\""
      ],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp-10-//  License Information: Please see the attached LICENSE.TXT file\nsrc/Library/RasterImages/RGBEAWriter.cpp-11-//\nsrc/Library/RasterImages/RGBEAWriter.cpp-12-//////////////////////////////////////////////////////////////////////\nsrc/Library/RasterImages/RGBEAWriter.cpp-13-\nsrc/Library/RasterImages/RGBEAWriter.cpp-14-#include \"pch.h\""
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp",
      "sprintf_line": 15,
      "context_lines": [
        "src/Library/RasterImages/RGBEAWriter.cpp-16-#include <string.h>\t\t\t\t\t// for strlen and strncmp",
        "src/Library/RasterImages/RGBEAWriter.cpp-17-#include \"RGBEAWriter.h\"",
        "src/Library/RasterImages/RGBEAWriter.cpp-18-#include \"../Interfaces/ILog.h\"",
        "src/Library/RasterImages/RGBEAWriter.cpp-19-#include \"../Version.h\"",
        "src/Library/RasterImages/RGBEAWriter.cpp-20-",
        "src/Library/RasterImages/RGBEAWriter.cpp-21-using namespace RISE;"
      ],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp:15:#include <stdio.h>\t\t\t\t\t// for sprintf\nsrc/Library/RasterImages/RGBEAWriter.cpp-16-#include <string.h>\t\t\t\t\t// for strlen and strncmp\nsrc/Library/RasterImages/RGBEAWriter.cpp-17-#include \"RGBEAWriter.h\"\nsrc/Library/RasterImages/RGBEAWriter.cpp-18-#include \"../Interfaces/ILog.h\"\nsrc/Library/RasterImages/RGBEAWriter.cpp-19-#include \"../Version.h\"\nsrc/Library/RasterImages/RGBEAWriter.cpp-20-\nsrc/Library/RasterImages/RGBEAWriter.cpp-21-using namespace RISE;"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp-22-using namespace RISE",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/RGBEAWriter.cpp-23-"
      ],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp-22-using namespace RISE::Implementation;\nsrc/Library/RasterImages/RGBEAWriter.cpp-23-"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp-24-RGBEAWriter",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/RGBEAWriter.cpp-25-  pWriteBuffer( buffer ),",
        "src/Library/RasterImages/RGBEAWriter.cpp-39-\t}",
        "src/Library/RasterImages/RGBEAWriter.cpp-40-}",
        "src/Library/RasterImages/RGBEAWriter.cpp-41-"
      ],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp-24-RGBEAWriter::RGBEAWriter( IWriteBuffer& buffer ) :\nsrc/Library/RasterImages/RGBEAWriter.cpp-25-  pWriteBuffer( buffer ),\nsrc/Library/RasterImages/RGBEAWriter.cpp-39-\t}\nsrc/Library/RasterImages/RGBEAWriter.cpp-40-}\nsrc/Library/RasterImages/RGBEAWriter.cpp-41-"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp-42-void RGBEAWriter",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/RasterImages/RGBEAWriter.cpp-43-{",
        "src/Library/RasterImages/RGBEAWriter.cpp-44-\t// Build the header",
        "src/Library/RasterImages/RGBEAWriter.cpp-45-\tchar szHeader[2048] = {0};",
        "src/Library/RasterImages/RGBEAWriter.cpp-46-\t{",
        "src/Library/RasterImages/RGBEAWriter.cpp-47-\t\tstatic const char * szSignature = \"#?RGBEA\\n\";",
        "src/Library/RasterImages/RGBEAWriter.cpp-48-\t\tchar szWhoWroteIt[256] = {0};"
      ],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp-42-void RGBEAWriter::BeginWrite( const unsigned int width, const unsigned int height )\nsrc/Library/RasterImages/RGBEAWriter.cpp-43-{\nsrc/Library/RasterImages/RGBEAWriter.cpp-44-\t// Build the header\nsrc/Library/RasterImages/RGBEAWriter.cpp-45-\tchar szHeader[2048] = {0};\nsrc/Library/RasterImages/RGBEAWriter.cpp-46-\t{\nsrc/Library/RasterImages/RGBEAWriter.cpp-47-\t\tstatic const char * szSignature = \"#?RGBEA\\n\";\nsrc/Library/RasterImages/RGBEAWriter.cpp-48-\t\tchar szWhoWroteIt[256] = {0};"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp",
      "sprintf_line": 49,
      "context_lines": [
        "src/Library/RasterImages/RGBEAWriter.cpp-50-\t\tstatic const char * szImageType = \"FORMAT=64-bit_rle_rgbea\\n\\n\";",
        "src/Library/RasterImages/RGBEAWriter.cpp-51-\t\tchar szImageDimensions[256] = {0};"
      ],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp:49:\t\tsprintf( szWhoWroteIt, \"# Generated by R.I.S.E. v%d.%d.%d build %d\\n\", RISE_VER_MAJOR_VERSION, RISE_VER_MINOR_VERSION, RISE_VER_REVISION_VERSION, RISE_VER_BUILD_VERSION );\nsrc/Library/RasterImages/RGBEAWriter.cpp-50-\t\tstatic const char * szImageType = \"FORMAT=64-bit_rle_rgbea\\n\\n\";\nsrc/Library/RasterImages/RGBEAWriter.cpp-51-\t\tchar szImageDimensions[256] = {0};"
    },
    {
      "file_path": "src/Library/RasterImages/RGBEAWriter.cpp",
      "sprintf_line": 52,
      "context_lines": [
        "src/Library/RasterImages/RGBEAWriter.cpp-53-",
        "src/Library/RasterImages/RGBEAWriter.cpp-54-\t\tstrcpy( szHeader, szSignature );",
        "src/Library/RasterImages/RGBEAWriter.cpp-55-\t\tstrcat( szHeader, szWhoWroteIt );",
        "src/Library/RasterImages/RGBEAWriter.cpp-56-\t\tstrcat( szHeader, szImageType );",
        "src/Library/RasterImages/RGBEAWriter.cpp-57-\t\tstrcat( szHeader, szImageDimensions );",
        "src/Library/RasterImages/RGBEAWriter.cpp-58-\t}\t",
        "src/Library/RasterImages/RGBEAWriter.cpp-59-",
        "src/Library/RasterImages/RGBEAWriter.cpp-60-\t// Write the header",
        "src/Library/RasterImages/RGBEAWriter.cpp-61-\t// Make sure there's enough room in the buffer first",
        "src/Library/RasterImages/RGBEAWriter.cpp-62-\tpWriteBuffer.Resize( width*height*8 + strlen(szHeader) );",
        "src/Library/Rendering/FileRasterizerOutput.cpp-90-\treturn (unsigned int)*((unsigned int*)(&v));",
        "src/Library/Rendering/FileRasterizerOutput.cpp-91-}",
        "src/Library/Rendering/FileRasterizerOutput.cpp-92-"
      ],
      "raw_content": "src/Library/RasterImages/RGBEAWriter.cpp:52:\t\tsprintf( szImageDimensions,\"-Y %d +X %d\\n\", height, width );\nsrc/Library/RasterImages/RGBEAWriter.cpp-53-\nsrc/Library/RasterImages/RGBEAWriter.cpp-54-\t\tstrcpy( szHeader, szSignature );\nsrc/Library/RasterImages/RGBEAWriter.cpp-55-\t\tstrcat( szHeader, szWhoWroteIt );\nsrc/Library/RasterImages/RGBEAWriter.cpp-56-\t\tstrcat( szHeader, szImageType );\nsrc/Library/RasterImages/RGBEAWriter.cpp-57-\t\tstrcat( szHeader, szImageDimensions );\nsrc/Library/RasterImages/RGBEAWriter.cpp-58-\t}\t\nsrc/Library/RasterImages/RGBEAWriter.cpp-59-\nsrc/Library/RasterImages/RGBEAWriter.cpp-60-\t// Write the header\nsrc/Library/RasterImages/RGBEAWriter.cpp-61-\t// Make sure there's enough room in the buffer first\nsrc/Library/RasterImages/RGBEAWriter.cpp-62-\tpWriteBuffer.Resize( width*height*8 + strlen(szHeader) );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-90-\treturn (unsigned int)*((unsigned int*)(&v));\nsrc/Library/Rendering/FileRasterizerOutput.cpp-91-}\nsrc/Library/Rendering/FileRasterizerOutput.cpp-92-"
    },
    {
      "file_path": "src/Library/Rendering/FileRasterizerOutput.cpp-93-void FileRasterizerOutput",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Rendering/FileRasterizerOutput.cpp-94-{",
        "src/Library/Rendering/FileRasterizerOutput.cpp-95-\tIRasterImageWriter*\t\tpWriter = 0;",
        "src/Library/Rendering/FileRasterizerOutput.cpp-96-",
        "src/Library/Rendering/FileRasterizerOutput.cpp-97-\tchar\tbuf[2048];",
        "src/Library/Rendering/FileRasterizerOutput.cpp-98-",
        "src/Library/Rendering/FileRasterizerOutput.cpp-99-\tif( bMultiple ) {"
      ],
      "raw_content": "src/Library/Rendering/FileRasterizerOutput.cpp-93-void FileRasterizerOutput::OutputImage( const IRasterImage& pImage, const Rect* /*pRegion*/, const unsigned int frame )\nsrc/Library/Rendering/FileRasterizerOutput.cpp-94-{\nsrc/Library/Rendering/FileRasterizerOutput.cpp-95-\tIRasterImageWriter*\t\tpWriter = 0;\nsrc/Library/Rendering/FileRasterizerOutput.cpp-96-\nsrc/Library/Rendering/FileRasterizerOutput.cpp-97-\tchar\tbuf[2048];\nsrc/Library/Rendering/FileRasterizerOutput.cpp-98-\nsrc/Library/Rendering/FileRasterizerOutput.cpp-99-\tif( bMultiple ) {"
    },
    {
      "file_path": "src/Library/Rendering/FileRasterizerOutput.cpp",
      "sprintf_line": 100,
      "context_lines": [
        "src/Library/Rendering/FileRasterizerOutput.cpp-101-\t} else {"
      ],
      "raw_content": "src/Library/Rendering/FileRasterizerOutput.cpp:100:\t\tsprintf( buf, \"%s%.4d.%s\", szPattern, frame, extensions[type] );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-101-\t} else {"
    },
    {
      "file_path": "src/Library/Rendering/FileRasterizerOutput.cpp",
      "sprintf_line": 102,
      "context_lines": [
        "src/Library/Rendering/FileRasterizerOutput.cpp-103-\t}",
        "src/Library/Rendering/FileRasterizerOutput.cpp-104-",
        "src/Library/Rendering/FileRasterizerOutput.cpp-105-\tDiskFileWriteBuffer*\t\tmb = new DiskFileWriteBuffer( buf );",
        "src/Library/Rendering/FileRasterizerOutput.cpp-106-\t",
        "src/Library/Rendering/FileRasterizerOutput.cpp-107-\tif( !mb->ReadyToWrite() ) {",
        "src/Library/Rendering/FileRasterizerOutput.cpp-108-\t\t// Some tragic error happened trying to open the required file for writing",
        "src/Library/Rendering/FileRasterizerOutput.cpp-109-\t\t// Note the error and write the results to a temp file so that the user doesn't",
        "src/Library/Rendering/FileRasterizerOutput.cpp-110-\t\t// lose the data",
        "src/Library/Rendering/FileRasterizerOutput.cpp-111-",
        "src/Library/Rendering/FileRasterizerOutput.cpp-112-\t\tsafe_release( mb );",
        "src/Library/Rendering/FileRasterizerOutput.cpp-113-",
        "src/Library/Rendering/FileRasterizerOutput.cpp-114-\t\tconst FileRasterizerOutput* pMe = this;",
        "src/Library/Rendering/FileRasterizerOutput.cpp-115-\t\tif( bMultiple ) {"
      ],
      "raw_content": "src/Library/Rendering/FileRasterizerOutput.cpp:102:\t\tsprintf( buf, \"%s.%s\", szPattern, extensions[type] );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-103-\t}\nsrc/Library/Rendering/FileRasterizerOutput.cpp-104-\nsrc/Library/Rendering/FileRasterizerOutput.cpp-105-\tDiskFileWriteBuffer*\t\tmb = new DiskFileWriteBuffer( buf );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-106-\t\nsrc/Library/Rendering/FileRasterizerOutput.cpp-107-\tif( !mb->ReadyToWrite() ) {\nsrc/Library/Rendering/FileRasterizerOutput.cpp-108-\t\t// Some tragic error happened trying to open the required file for writing\nsrc/Library/Rendering/FileRasterizerOutput.cpp-109-\t\t// Note the error and write the results to a temp file so that the user doesn't\nsrc/Library/Rendering/FileRasterizerOutput.cpp-110-\t\t// lose the data\nsrc/Library/Rendering/FileRasterizerOutput.cpp-111-\nsrc/Library/Rendering/FileRasterizerOutput.cpp-112-\t\tsafe_release( mb );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-113-\nsrc/Library/Rendering/FileRasterizerOutput.cpp-114-\t\tconst FileRasterizerOutput* pMe = this;\nsrc/Library/Rendering/FileRasterizerOutput.cpp-115-\t\tif( bMultiple ) {"
    },
    {
      "file_path": "src/Library/Rendering/FileRasterizerOutput.cpp",
      "sprintf_line": 116,
      "context_lines": [
        "src/Library/Rendering/FileRasterizerOutput.cpp-117-\t\t} else {"
      ],
      "raw_content": "src/Library/Rendering/FileRasterizerOutput.cpp:116:\t\t\tsprintf( buf, \"fro_temp_%d_%.4d.%s\", VoidPtrToUInt((void*)pMe), frame, extensions[type] );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-117-\t\t} else {"
    },
    {
      "file_path": "src/Library/Rendering/FileRasterizerOutput.cpp",
      "sprintf_line": 118,
      "context_lines": [
        "src/Library/Rendering/FileRasterizerOutput.cpp-119-\t\t}",
        "src/Library/Rendering/FileRasterizerOutput.cpp-120-",
        "src/Library/Rendering/FileRasterizerOutput.cpp-121-\t\tmb = new DiskFileWriteBuffer( buf );",
        "src/Library/Rendering/FileRasterizerOutput.cpp-122-",
        "src/Library/Rendering/FileRasterizerOutput.cpp-123-\t\t// If that doesn't work either we are just screwed",
        "src/Library/Rendering/FileRasterizerOutput.cpp-124-\t\tif( !mb->ReadyToWrite() ){",
        "src/Library/Rendering/FileRasterizerOutput.cpp-125-\t\t\tGlobalLog()->PrintEasyError( \"Fatal error in trying to write image, couldn't even write the emergency file!\" );",
        "src/Library/Rendering/FileRasterizerOutput.cpp-126-\t\t\treturn;",
        "src/Library/Rendering/FileRasterizerOutput.cpp-127-\t\t} else {",
        "src/Library/Rendering/FileRasterizerOutput.cpp-128-\t\t\tGlobalLog()->PrintEx( eLog_Warning, \"Failed to open specified file, rendered scene written to emergency file '%s' instead!\", buf );",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-131-",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-132-\tfor( unsigned int y=0;y<height; y++ ) {",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-133-\t\tfor( unsigned int x=0; x<width; x++ ) {",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-134-\t\t\tmemset( &pBits[y*width*4+x*4], 0x80, 1 );",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-135-\t\t\tmemset( &pBits[y*width*4+x*4+1], 0, 1 );",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-136-\t\t\tmemset( &pBits[y*width*4+x*4+2], 0, 1 );",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-137-\t\t}",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-138-\t}",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-139-\t",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-140-\tchar buf[_MAX_PATH] = {0};"
      ],
      "raw_content": "src/Library/Rendering/FileRasterizerOutput.cpp:118:\t\t\tsprintf( buf, \"fro_temp_%d.%s\", VoidPtrToUInt((void*)pMe), extensions[type] );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-119-\t\t}\nsrc/Library/Rendering/FileRasterizerOutput.cpp-120-\nsrc/Library/Rendering/FileRasterizerOutput.cpp-121-\t\tmb = new DiskFileWriteBuffer( buf );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-122-\nsrc/Library/Rendering/FileRasterizerOutput.cpp-123-\t\t// If that doesn't work either we are just screwed\nsrc/Library/Rendering/FileRasterizerOutput.cpp-124-\t\tif( !mb->ReadyToWrite() ){\nsrc/Library/Rendering/FileRasterizerOutput.cpp-125-\t\t\tGlobalLog()->PrintEasyError( \"Fatal error in trying to write image, couldn't even write the emergency file!\" );\nsrc/Library/Rendering/FileRasterizerOutput.cpp-126-\t\t\treturn;\nsrc/Library/Rendering/FileRasterizerOutput.cpp-127-\t\t} else {\nsrc/Library/Rendering/FileRasterizerOutput.cpp-128-\t\t\tGlobalLog()->PrintEx( eLog_Warning, \"Failed to open specified file, rendered scene written to emergency file '%s' instead!\", buf );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-131-\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-132-\tfor( unsigned int y=0;y<height; y++ ) {\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-133-\t\tfor( unsigned int x=0; x<width; x++ ) {\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-134-\t\t\tmemset( &pBits[y*width*4+x*4], 0x80, 1 );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-135-\t\t\tmemset( &pBits[y*width*4+x*4+1], 0, 1 );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-136-\t\t\tmemset( &pBits[y*width*4+x*4+2], 0, 1 );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-137-\t\t}\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-138-\t}\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-139-\t\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-140-\tchar buf[_MAX_PATH] = {0};"
    },
    {
      "file_path": "src/Library/Rendering/Win32WindowRasterizerOutput.cpp",
      "sprintf_line": 141,
      "context_lines": [
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-142-\thStop = CreateEvent( 0, FALSE, FALSE, buf );",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-143-",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-144-\t// We need to create a message pump so that this window can keep processing messages",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-145-\thThread = CreateThread( 0, 0, WindowMessagePump, (LPVOID)this, 0, 0 );",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-146-}",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-147-"
      ],
      "raw_content": "src/Library/Rendering/Win32WindowRasterizerOutput.cpp:141:\tsprintf( buf, \"RISE_Neverset_Thread_Handle_%d_%d\", GetTickCount(), rand() );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-142-\thStop = CreateEvent( 0, FALSE, FALSE, buf );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-143-\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-144-\t// We need to create a message pump so that this window can keep processing messages\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-145-\thThread = CreateThread( 0, 0, WindowMessagePump, (LPVOID)this, 0, 0 );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-146-}\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-147-"
    },
    {
      "file_path": "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-148-Win32WindowRasterizerOutput",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-149-{",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-150-\tif( hBitmap ) {",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-151-\t\tDeleteObject( hBitmap );",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-303-}",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-304-"
      ],
      "raw_content": "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-148-Win32WindowRasterizerOutput::~Win32WindowRasterizerOutput()\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-149-{\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-150-\tif( hBitmap ) {\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-151-\t\tDeleteObject( hBitmap );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-303-}\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-304-"
    },
    {
      "file_path": "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-305-void Win32WindowRasterizerOutput",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-306-{",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-307-\t// Before creating the hwnd, we have to register the class",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-308-\t// that requires a unique name for this particular context... <sigh>",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-309-",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-310-\thInstance = GetModuleHandle( NULL );",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-311-",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-312-\tszClassName[0] = 0;"
      ],
      "raw_content": "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-305-void Win32WindowRasterizerOutput::CreateStuff()\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-306-{\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-307-\t// Before creating the hwnd, we have to register the class\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-308-\t// that requires a unique name for this particular context... <sigh>\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-309-\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-310-\thInstance = GetModuleHandle( NULL );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-311-\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-312-\tszClassName[0] = 0;"
    },
    {
      "file_path": "src/Library/Rendering/Win32WindowRasterizerOutput.cpp",
      "sprintf_line": 313,
      "context_lines": [
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-314-",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-315-\tWNDCLASSEX\t\twc = {\tsizeof(WNDCLASSEX),",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-316-\t\t\t\t\t\t\tCS_CLASSDC,",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-317-\t\t\t\t\t\t\tMsgProc,",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-318-\t\t\t\t\t\t\t0L, 0L, ",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-319-\t\t\t\t\t\t\thInstance,",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-320-\t\t\t\t\t\t\tNULL, NULL,",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-321-\t\t\t\t\t\t\tNULL, NULL,",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-322-\t\t\t\t\t\t\tszClassName,",
        "src/Library/Rendering/Win32WindowRasterizerOutput.cpp-323-\t\t\t\t\t\t\tNULL };",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-35-",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-36-\tchar buffer[128];",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-37-\tint error;",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-38-",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-39-\td_winsockVersion = MAKEWORD( WINSOCK_MAJOR_VERSION, WINSOCK_MINOR_VERSION );",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-40-",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-41-\terror = WSAStartup( d_winsockVersion, &d_winsockData );",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-42-\tif( error == SOCKET_ERROR )",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-43-\t{",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-44-\t\tif( error == WSAVERNOTSUPPORTED ) {"
      ],
      "raw_content": "src/Library/Rendering/Win32WindowRasterizerOutput.cpp:313:\tsprintf( szClassName, \"RISE::Win32Context::%d::%d\", GetTickCount(), rand() );\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-314-\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-315-\tWNDCLASSEX\t\twc = {\tsizeof(WNDCLASSEX),\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-316-\t\t\t\t\t\t\tCS_CLASSDC,\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-317-\t\t\t\t\t\t\tMsgProc,\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-318-\t\t\t\t\t\t\t0L, 0L, \nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-319-\t\t\t\t\t\t\thInstance,\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-320-\t\t\t\t\t\t\tNULL, NULL,\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-321-\t\t\t\t\t\t\tNULL, NULL,\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-322-\t\t\t\t\t\t\tszClassName,\nsrc/Library/Rendering/Win32WindowRasterizerOutput.cpp-323-\t\t\t\t\t\t\tNULL };\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-35-\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-36-\tchar buffer[128];\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-37-\tint error;\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-38-\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-39-\td_winsockVersion = MAKEWORD( WINSOCK_MAJOR_VERSION, WINSOCK_MINOR_VERSION );\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-40-\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-41-\terror = WSAStartup( d_winsockVersion, &d_winsockData );\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-42-\tif( error == SOCKET_ERROR )\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-43-\t{\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-44-\t\tif( error == WSAVERNOTSUPPORTED ) {"
    },
    {
      "file_path": "src/Library/Utilities/Communications/SocketCommunications.cpp",
      "sprintf_line": 45,
      "context_lines": [
        "src/Library/Utilities/Communications/SocketCommunications.cpp-46-\t\t\tWINSOCK_MAJOR_VERSION, WINSOCK_MINOR_VERSION,",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-47-\t\t\tLOBYTE( d_winsockData.wVersion ), HIBYTE( d_winsockData.wVersion ) );",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-48-\t\t\tWSACleanup();",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-49-\t\t} else {"
      ],
      "raw_content": "src/Library/Utilities/Communications/SocketCommunications.cpp:45:\t\t\tsprintf( buffer, \"WSAStartup error.\\nRequested Winsock v%d.%d, found v%d.%d.\",\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-46-\t\t\tWINSOCK_MAJOR_VERSION, WINSOCK_MINOR_VERSION,\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-47-\t\t\tLOBYTE( d_winsockData.wVersion ), HIBYTE( d_winsockData.wVersion ) );\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-48-\t\t\tWSACleanup();\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-49-\t\t} else {"
    },
    {
      "file_path": "src/Library/Utilities/Communications/SocketCommunications.cpp",
      "sprintf_line": 50,
      "context_lines": [
        "src/Library/Utilities/Communications/SocketCommunications.cpp-51-\t\t}",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-52-",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-53-\t\tGlobalLog()->PrintSourceError( buffer, __FILE__, __LINE__ );",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-54-\t\treturn false;",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-55-\t}",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-56-",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-57-\treturn true;  // no problems!",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-58-}",
        "src/Library/Utilities/Communications/SocketCommunications.cpp-59-"
      ],
      "raw_content": "src/Library/Utilities/Communications/SocketCommunications.cpp:50:\t\t\tsprintf( buffer, \"WSAStartup error (%d)\", WSAGetLastError() );\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-51-\t\t}\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-52-\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-53-\t\tGlobalLog()->PrintSourceError( buffer, __FILE__, __LINE__ );\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-54-\t\treturn false;\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-55-\t}\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-56-\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-57-\treturn true;  // no problems!\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-58-}\nsrc/Library/Utilities/Communications/SocketCommunications.cpp-59-"
    },
    {
      "file_path": "src/Library/Utilities/Communications/SocketCommunications.cpp-60-void SocketComm",
      "sprintf_line": 0,
      "context_lines": [
        "src/Library/Volume/Volume.h-73-\t\tm_nSliceSize( width*height )",
        "src/Library/Volume/Volume.h-74-\t\t{",
        "src/Library/Volume/Volume.h-75-\t\t\tm_OVMaxValue = 1.0 / ( Scalar( 1 << (sizeof( T )*8) ) - 1.0 );",
        "src/Library/Volume/Volume.h-76-",
        "src/Library/Volume/Volume.h-77-\t\t\tm_pData = new T[m_nDepth*m_nHeight*m_nWidth];",
        "src/Library/Volume/Volume.h-78-",
        "src/Library/Volume/Volume.h-79-\t\t\tfor( unsigned int i=zstart, cnt=0; i<=zend; i++, cnt++ )",
        "src/Library/Volume/Volume.h-80-\t\t\t{",
        "src/Library/Volume/Volume.h-81-\t\t\t\tchar buffer[1024] = {0};",
        "src/Library/Volume/Volume.h-82-"
      ],
      "raw_content": "src/Library/Utilities/Communications/SocketCommunications.cpp-60-void SocketComm::CloseSocketCommunications( )\nsrc/Library/Volume/Volume.h-73-\t\tm_nSliceSize( width*height )\nsrc/Library/Volume/Volume.h-74-\t\t{\nsrc/Library/Volume/Volume.h-75-\t\t\tm_OVMaxValue = 1.0 / ( Scalar( 1 << (sizeof( T )*8) ) - 1.0 );\nsrc/Library/Volume/Volume.h-76-\nsrc/Library/Volume/Volume.h-77-\t\t\tm_pData = new T[m_nDepth*m_nHeight*m_nWidth];\nsrc/Library/Volume/Volume.h-78-\nsrc/Library/Volume/Volume.h-79-\t\t\tfor( unsigned int i=zstart, cnt=0; i<=zend; i++, cnt++ )\nsrc/Library/Volume/Volume.h-80-\t\t\t{\nsrc/Library/Volume/Volume.h-81-\t\t\t\tchar buffer[1024] = {0};\nsrc/Library/Volume/Volume.h-82-"
    },
    {
      "file_path": "src/Library/Volume/Volume.h",
      "sprintf_line": 83,
      "context_lines": [
        "src/Library/Volume/Volume.h-84-\t\t\t\tFILE* f = fopen( GlobalMediaPathLocator().Find(buffer).c_str(), \"rb\" );",
        "src/Library/Volume/Volume.h-85-",
        "src/Library/Volume/Volume.h-86-\t\t\t\tif( f ) {",
        "src/Library/Volume/Volume.h-87-\t\t\t\t\tfread( &m_pData[cnt*width*height], sizeof( T ), m_nWidth*m_nHeight, f );",
        "src/Library/Volume/Volume.h-88-\t\t\t\t\tfclose( f );",
        "src/Library/Volume/Volume.h-89-\t\t\t\t}",
        "src/Library/Volume/Volume.h-90-\t\t\t}",
        "src/Library/Volume/Volume.h-91-",
        "src/Library/Volume/Volume.h-92-\t\t\tm_nWidthOV2 = m_nWidth>>1;",
        "src/Library/Volume/Volume.h-93-\t\t\tm_nHeightOV2 = m_nHeight>>1;",
        "src/PRISE/SchedulerEngine.cpp-150-\t// This is where all the action happens!",
        "src/PRISE/SchedulerEngine.cpp-151-\t//",
        "src/PRISE/SchedulerEngine.cpp-152-",
        "src/PRISE/SchedulerEngine.cpp-153-\t// First load the mesh, but don't load the 2nd level octree, we will need this",
        "src/PRISE/SchedulerEngine.cpp-154-\t// information to figure out where unresolved rays go",
        "src/PRISE/SchedulerEngine.cpp-155-\t{",
        "src/PRISE/SchedulerEngine.cpp-156-\t\tpMesh = new PRISEMeshGeometry(0,0,0,0);",
        "src/PRISE/SchedulerEngine.cpp-157-\t\tGlobalLog()->PrintNew( pMesh, __FILE__, __LINE__, \"geometry\" );",
        "src/PRISE/SchedulerEngine.cpp-158-",
        "src/PRISE/SchedulerEngine.cpp-159-\t\tchar szModelFileName[1024] = {0};"
      ],
      "raw_content": "src/Library/Volume/Volume.h:83:\t\t\t\tsprintf( buffer, szFilePattern, i );\nsrc/Library/Volume/Volume.h-84-\t\t\t\tFILE* f = fopen( GlobalMediaPathLocator().Find(buffer).c_str(), \"rb\" );\nsrc/Library/Volume/Volume.h-85-\nsrc/Library/Volume/Volume.h-86-\t\t\t\tif( f ) {\nsrc/Library/Volume/Volume.h-87-\t\t\t\t\tfread( &m_pData[cnt*width*height], sizeof( T ), m_nWidth*m_nHeight, f );\nsrc/Library/Volume/Volume.h-88-\t\t\t\t\tfclose( f );\nsrc/Library/Volume/Volume.h-89-\t\t\t\t}\nsrc/Library/Volume/Volume.h-90-\t\t\t}\nsrc/Library/Volume/Volume.h-91-\nsrc/Library/Volume/Volume.h-92-\t\t\tm_nWidthOV2 = m_nWidth>>1;\nsrc/Library/Volume/Volume.h-93-\t\t\tm_nHeightOV2 = m_nHeight>>1;\nsrc/PRISE/SchedulerEngine.cpp-150-\t// This is where all the action happens!\nsrc/PRISE/SchedulerEngine.cpp-151-\t//\nsrc/PRISE/SchedulerEngine.cpp-152-\nsrc/PRISE/SchedulerEngine.cpp-153-\t// First load the mesh, but don't load the 2nd level octree, we will need this\nsrc/PRISE/SchedulerEngine.cpp-154-\t// information to figure out where unresolved rays go\nsrc/PRISE/SchedulerEngine.cpp-155-\t{\nsrc/PRISE/SchedulerEngine.cpp-156-\t\tpMesh = new PRISEMeshGeometry(0,0,0,0);\nsrc/PRISE/SchedulerEngine.cpp-157-\t\tGlobalLog()->PrintNew( pMesh, __FILE__, __LINE__, \"geometry\" );\nsrc/PRISE/SchedulerEngine.cpp-158-\nsrc/PRISE/SchedulerEngine.cpp-159-\t\tchar szModelFileName[1024] = {0};"
    },
    {
      "file_path": "src/PRISE/SchedulerEngine.cpp",
      "sprintf_line": 160,
      "context_lines": [
        "src/PRISE/SchedulerEngine.cpp-161-"
      ],
      "raw_content": "src/PRISE/SchedulerEngine.cpp:160:\t\tsprintf( szModelFileName, \"%s_%d.prisemesh\", sceneModels.front().szFilename.c_str(), -1 );\nsrc/PRISE/SchedulerEngine.cpp-161-"
    },
    {
      "file_path": "src/PRISE/SchedulerEngine.cpp-162-\t\tImplementation",
      "sprintf_line": 0,
      "context_lines": [
        "src/PRISE/SchedulerEngine.cpp-163-\t\tGlobalLog()->PrintNew( pBuffer, __FILE__, __LINE__, \"buffer\" );",
        "src/PRISE/SchedulerEngine.cpp-164-",
        "src/PRISE/SchedulerEngine.cpp-165-\t\tpMesh->Deserialize( *pBuffer );",
        "src/PRISE/SchedulerEngine.cpp-166-\t\tpBuffer->RemoveRef();",
        "src/PRISE/SchedulerEngine.cpp-167-\t}",
        "src/PRISE/SchedulerEngine.cpp-168-",
        "src/PRISE/SchedulerEngine.cpp-169-\t// First send the scene file to all the workers"
      ],
      "raw_content": "src/PRISE/SchedulerEngine.cpp-162-\t\tImplementation::MemoryBuffer*\t\t\tpBuffer = new Implementation::MemoryBuffer( szModelFileName );\nsrc/PRISE/SchedulerEngine.cpp-163-\t\tGlobalLog()->PrintNew( pBuffer, __FILE__, __LINE__, \"buffer\" );\nsrc/PRISE/SchedulerEngine.cpp-164-\nsrc/PRISE/SchedulerEngine.cpp-165-\t\tpMesh->Deserialize( *pBuffer );\nsrc/PRISE/SchedulerEngine.cpp-166-\t\tpBuffer->RemoveRef();\nsrc/PRISE/SchedulerEngine.cpp-167-\t}\nsrc/PRISE/SchedulerEngine.cpp-168-\nsrc/PRISE/SchedulerEngine.cpp-169-\t// First send the scene file to all the workers"
    },
    {
      "file_path": "src/PRISE/SchedulerEngine.cpp-170-\tWorkerListType",
      "sprintf_line": 0,
      "context_lines": [],
      "raw_content": "src/PRISE/SchedulerEngine.cpp-170-\tWorkerListType::iterator i;"
    },
    {
      "file_path": "src/PRISE/WorkerConnection.cpp-58-\t\tpSendBuffer->seek( IBuffer",
      "sprintf_line": 0,
      "context_lines": [
        "src/PRISE/WorkerConnection.cpp-59-",
        "src/PRISE/WorkerConnection.cpp-60-\t\tunsigned int model_count = szModels.size();",
        "src/PRISE/WorkerConnection.cpp-61-\t\tpSendBuffer->setUInt( model_count );",
        "src/PRISE/WorkerConnection.cpp-62-",
        "src/PRISE/WorkerConnection.cpp-63-\t\tret = TrySendMessage( eMessage_ModelCount, true );",
        "src/PRISE/WorkerConnection.cpp-64-"
      ],
      "raw_content": "src/PRISE/WorkerConnection.cpp-58-\t\tpSendBuffer->seek( IBuffer::START, 0 );\nsrc/PRISE/WorkerConnection.cpp-59-\nsrc/PRISE/WorkerConnection.cpp-60-\t\tunsigned int model_count = szModels.size();\nsrc/PRISE/WorkerConnection.cpp-61-\t\tpSendBuffer->setUInt( model_count );\nsrc/PRISE/WorkerConnection.cpp-62-\nsrc/PRISE/WorkerConnection.cpp-63-\t\tret = TrySendMessage( eMessage_ModelCount, true );\nsrc/PRISE/WorkerConnection.cpp-64-"
    },
    {
      "file_path": "src/PRISE/WorkerConnection.cpp-65-\t\tstd",
      "sprintf_line": 0,
      "context_lines": [
        "src/PRISE/WorkerConnection.cpp-66-\t\tfor( it=szModels.begin(); it!=szModels.end(); it++ ) {",
        "src/PRISE/WorkerConnection.cpp-67-\t\t\tchar szModelFileName[1024] = {0};"
      ],
      "raw_content": "src/PRISE/WorkerConnection.cpp-65-\t\tstd::deque<MODEL_INFO>::const_iterator\tit;\nsrc/PRISE/WorkerConnection.cpp-66-\t\tfor( it=szModels.begin(); it!=szModels.end(); it++ ) {\nsrc/PRISE/WorkerConnection.cpp-67-\t\t\tchar szModelFileName[1024] = {0};"
    },
    {
      "file_path": "src/PRISE/WorkerConnection.cpp",
      "sprintf_line": 68,
      "context_lines": [
        "src/PRISE/WorkerConnection.cpp-69-",
        "src/PRISE/WorkerConnection.cpp-70-\t\t\tunsigned int length = strlen(szModelFileName); ",
        "src/PRISE/WorkerConnection.cpp-71-\t\t\tunsigned int matlength = strlen(it->material.c_str());",
        "src/PRISE/WorkerConnection.cpp-72-\t\t\tpSendBuffer->Resize( sizeof( Point3D ) + sizeof( Vector3D ) + length + matlength + 2, true );"
      ],
      "raw_content": "src/PRISE/WorkerConnection.cpp:68:\t\t\tsprintf( szModelFileName, \"%s_%d.prisemesh\", it->szFilename.c_str(), nWorkerID );\nsrc/PRISE/WorkerConnection.cpp-69-\nsrc/PRISE/WorkerConnection.cpp-70-\t\t\tunsigned int length = strlen(szModelFileName); \nsrc/PRISE/WorkerConnection.cpp-71-\t\t\tunsigned int matlength = strlen(it->material.c_str());\nsrc/PRISE/WorkerConnection.cpp-72-\t\t\tpSendBuffer->Resize( sizeof( Point3D ) + sizeof( Vector3D ) + length + matlength + 2, true );"
    },
    {
      "file_path": "src/PRISE/WorkerConnection.cpp-73-\t\t\tpSendBuffer->seek( IBuffer",
      "sprintf_line": 0,
      "context_lines": [
        "src/PRISE/WorkerConnection.cpp-74-",
        "src/PRISE/WorkerConnection.cpp-75-\t\t\tpSendBuffer->setDouble( it->ptPosition.x );",
        "src/PRISE/WorkerConnection.cpp-76-\t\t\tpSendBuffer->setDouble( it->ptPosition.y );",
        "src/PRISE/WorkerConnection.cpp-77-\t\t\tpSendBuffer->setDouble( it->ptPosition.z );",
        "src/PRISE/WorkerConnection.cpp-78-\t\t\tpSendBuffer->setDouble( it->vOrientation.x );",
        "src/PRISE/prise_mpi_worker.cpp-139-\tint rank,size;",
        "src/PRISE/prise_mpi_worker.cpp-140-",
        "src/PRISE/prise_mpi_worker.cpp-141-\tMPI_Init( &argc, &argv );",
        "src/PRISE/prise_mpi_worker.cpp-142-\tMPI_Comm_rank( MPI_COMM_WORLD, &rank );",
        "src/PRISE/prise_mpi_worker.cpp-143-\tMPI_Comm_size( MPI_COMM_WORLD, &size );",
        "src/PRISE/prise_mpi_worker.cpp-144-",
        "src/PRISE/prise_mpi_worker.cpp-145-\t// Disable aspects of the logger, so that different processes don't conflict on the same log file",
        "src/PRISE/prise_mpi_worker.cpp-146-\tGlobalLogPriv()->RemoveAllPrinters();",
        "src/PRISE/prise_mpi_worker.cpp-147-",
        "src/PRISE/prise_mpi_worker.cpp-148-\tchar buf[1024];"
      ],
      "raw_content": "src/PRISE/WorkerConnection.cpp-73-\t\t\tpSendBuffer->seek( IBuffer::START, 0 );\nsrc/PRISE/WorkerConnection.cpp-74-\nsrc/PRISE/WorkerConnection.cpp-75-\t\t\tpSendBuffer->setDouble( it->ptPosition.x );\nsrc/PRISE/WorkerConnection.cpp-76-\t\t\tpSendBuffer->setDouble( it->ptPosition.y );\nsrc/PRISE/WorkerConnection.cpp-77-\t\t\tpSendBuffer->setDouble( it->ptPosition.z );\nsrc/PRISE/WorkerConnection.cpp-78-\t\t\tpSendBuffer->setDouble( it->vOrientation.x );\nsrc/PRISE/prise_mpi_worker.cpp-139-\tint rank,size;\nsrc/PRISE/prise_mpi_worker.cpp-140-\nsrc/PRISE/prise_mpi_worker.cpp-141-\tMPI_Init( &argc, &argv );\nsrc/PRISE/prise_mpi_worker.cpp-142-\tMPI_Comm_rank( MPI_COMM_WORLD, &rank );\nsrc/PRISE/prise_mpi_worker.cpp-143-\tMPI_Comm_size( MPI_COMM_WORLD, &size );\nsrc/PRISE/prise_mpi_worker.cpp-144-\nsrc/PRISE/prise_mpi_worker.cpp-145-\t// Disable aspects of the logger, so that different processes don't conflict on the same log file\nsrc/PRISE/prise_mpi_worker.cpp-146-\tGlobalLogPriv()->RemoveAllPrinters();\nsrc/PRISE/prise_mpi_worker.cpp-147-\nsrc/PRISE/prise_mpi_worker.cpp-148-\tchar buf[1024];"
    },
    {
      "file_path": "src/PRISE/prise_mpi_worker.cpp",
      "sprintf_line": 149,
      "context_lines": [],
      "raw_content": "src/PRISE/prise_mpi_worker.cpp:149:\tsprintf( buf, \"PRISE_Worker_Log_Proc%d.txt\", rank );"
    },
    {
      "file_path": "src/PRISE/prise_mpi_worker.cpp-150-\tstd",
      "sprintf_line": 0,
      "context_lines": [
        "src/PRISE/prise_mpi_worker.cpp-151-\tStreamPrinter*\t\tpB = new StreamPrinter( fs, true );",
        "src/PRISE/prise_mpi_worker.cpp-152-\tGlobalLog()->PrintNew( pB, __FILE__, __LINE__, \"file stream printer\" );",
        "src/PRISE/prise_mpi_worker.cpp-153-\tGlobalLogPriv()->AddPrinter( pB );",
        "src/PRISE/prise_mpi_worker.cpp-154-\tpB->RemoveRef();",
        "src/PRISE/prise_mpi_worker.cpp-155-",
        "src/PRISE/prise_mpi_worker.cpp-156-\t// If we are processor 0, then add a standard out printer",
        "src/PRISE/prise_mpi_worker.cpp-157-\tif( rank == 0 ) {"
      ],
      "raw_content": "src/PRISE/prise_mpi_worker.cpp-150-\tstd::ofstream*\t\tfs = new std::ofstream( buf );\nsrc/PRISE/prise_mpi_worker.cpp-151-\tStreamPrinter*\t\tpB = new StreamPrinter( fs, true );\nsrc/PRISE/prise_mpi_worker.cpp-152-\tGlobalLog()->PrintNew( pB, __FILE__, __LINE__, \"file stream printer\" );\nsrc/PRISE/prise_mpi_worker.cpp-153-\tGlobalLogPriv()->AddPrinter( pB );\nsrc/PRISE/prise_mpi_worker.cpp-154-\tpB->RemoveRef();\nsrc/PRISE/prise_mpi_worker.cpp-155-\nsrc/PRISE/prise_mpi_worker.cpp-156-\t// If we are processor 0, then add a standard out printer\nsrc/PRISE/prise_mpi_worker.cpp-157-\tif( rank == 0 ) {"
    },
    {
      "file_path": "src/PRISE/prise_mpi_worker.cpp-158-\t\tStreamPrinter*\tpA = new StreamPrinter( &std",
      "sprintf_line": 0,
      "context_lines": [
        "src/PRISE/prise_mpi_worker.cpp-159-\t\tGlobalLog()->PrintNew( pA, __FILE__, __LINE__, \"cout stream printer\" );",
        "src/PRISE/prise_scheduler.cpp-148-                     HINSTANCE /*hPrevInstance*/,",
        "src/PRISE/prise_scheduler.cpp-149-                     LPSTR     lpCmdLine,",
        "src/PRISE/prise_scheduler.cpp-150-                     int       /*nCmdShow*/)",
        "src/PRISE/prise_scheduler.cpp-151-{",
        "src/PRISE/prise_scheduler.cpp-152-\tSetGlobalLogFileName( \"PRISE_Scheduler_Log.txt\" );",
        "src/PRISE/prise_scheduler.cpp-153-",
        "src/PRISE/prise_scheduler.cpp-154-\tConsoleWin32* pA = new ConsoleWin32( eLog_Win32Console, TYPICAL_PRIORITY, HIGHEST_PRIORITY );",
        "src/PRISE/prise_scheduler.cpp-155-\tGlobalLog()->PrintNew( pA, __FILE__, __LINE__, \"Win32 Console printer\" );",
        "src/PRISE/prise_scheduler.cpp-156-\tconst char *szWndTitle = \"Parallel Realistic Image Synthesis Engine (P.R.I.S.E) Scheduler Console\";",
        "src/PRISE/prise_scheduler.cpp-157-\tchar szWindowName[1024];"
      ],
      "raw_content": "src/PRISE/prise_mpi_worker.cpp-158-\t\tStreamPrinter*\tpA = new StreamPrinter( &std::cout, true, eLog_Win32Console, TYPICAL_PRIORITY, HIGHEST_PRIORITY );\nsrc/PRISE/prise_mpi_worker.cpp-159-\t\tGlobalLog()->PrintNew( pA, __FILE__, __LINE__, \"cout stream printer\" );\nsrc/PRISE/prise_scheduler.cpp-148-                     HINSTANCE /*hPrevInstance*/,\nsrc/PRISE/prise_scheduler.cpp-149-                     LPSTR     lpCmdLine,\nsrc/PRISE/prise_scheduler.cpp-150-                     int       /*nCmdShow*/)\nsrc/PRISE/prise_scheduler.cpp-151-{\nsrc/PRISE/prise_scheduler.cpp-152-\tSetGlobalLogFileName( \"PRISE_Scheduler_Log.txt\" );\nsrc/PRISE/prise_scheduler.cpp-153-\nsrc/PRISE/prise_scheduler.cpp-154-\tConsoleWin32* pA = new ConsoleWin32( eLog_Win32Console, TYPICAL_PRIORITY, HIGHEST_PRIORITY );\nsrc/PRISE/prise_scheduler.cpp-155-\tGlobalLog()->PrintNew( pA, __FILE__, __LINE__, \"Win32 Console printer\" );\nsrc/PRISE/prise_scheduler.cpp-156-\tconst char *szWndTitle = \"Parallel Realistic Image Synthesis Engine (P.R.I.S.E) Scheduler Console\";\nsrc/PRISE/prise_scheduler.cpp-157-\tchar szWindowName[1024];"
    },
    {
      "file_path": "src/PRISE/prise_scheduler.cpp",
      "sprintf_line": 158,
      "context_lines": [
        "src/PRISE/prise_scheduler.cpp-159-\tpA->Init( szWindowName, hInstance );",
        "src/PRISE/prise_scheduler.cpp-160-\tGlobalLogPriv()->AddPrinter( pA );",
        "src/PRISE/prise_scheduler.cpp-161-\tpA->RemoveRef();",
        "src/PRISE/prise_scheduler.cpp-162-",
        "src/PRISE/prise_scheduler.cpp-163-\tGlobalLog()->PrintEasyEvent( \"============================================================\" );",
        "src/PRISE/prise_scheduler.cpp-164-\tGlobalLog()->PrintEasyEvent( \"                                                            \" );",
        "src/PRISE/prise_scheduler.cpp-165-\tGlobalLog()->PrintEasyEvent( \"    P.R.I.S.E - Parallel Realistic Image Synthesis Engine   \" );",
        "src/PRISE/prise_scheduler.cpp-166-#ifdef _DEBUG",
        "src/PRISE/prise_scheduler.cpp-167-\tGlobalLog()->PrintEasyEvent( \"                  SCHEDULER -- DEBUG BUILD                  \" );",
        "src/PRISE/prise_scheduler.cpp-168-#else",
        "src/PRISE/prise_worker.cpp-195-                     HINSTANCE /*hPrevInstance*/,",
        "src/PRISE/prise_worker.cpp-196-                     LPSTR     lpCmdLine,",
        "src/PRISE/prise_worker.cpp-197-                     int       /*nCmdShow*/)",
        "src/PRISE/prise_worker.cpp-198-{",
        "src/PRISE/prise_worker.cpp-199-\tSetGlobalLogFileName( \"PRISE_Worker_Log.txt\" );",
        "src/PRISE/prise_worker.cpp-200-",
        "src/PRISE/prise_worker.cpp-201-\tConsoleWin32* pA = new ConsoleWin32( eLog_Win32Console, TYPICAL_PRIORITY, HIGHEST_PRIORITY );",
        "src/PRISE/prise_worker.cpp-202-\tGlobalLog()->PrintNew( pA, __FILE__, __LINE__, \"Win32 Console printer\" );",
        "src/PRISE/prise_worker.cpp-203-\tconst char *szWndTitle = \"Parallel Realistic Image Synthesis Engine (P.R.I.S.E) Worker Console\";",
        "src/PRISE/prise_worker.cpp-204-\tchar szWindowName[1024];"
      ],
      "raw_content": "src/PRISE/prise_scheduler.cpp:158:\tsprintf( szWindowName, \"%s v. %d.%d.%d build %d\", szWndTitle, RISE_VER_MAJOR_VERSION, RISE_VER_MINOR_VERSION, RISE_VER_REVISION_VERSION, RISE_VER_BUILD_VERSION );\nsrc/PRISE/prise_scheduler.cpp-159-\tpA->Init( szWindowName, hInstance );\nsrc/PRISE/prise_scheduler.cpp-160-\tGlobalLogPriv()->AddPrinter( pA );\nsrc/PRISE/prise_scheduler.cpp-161-\tpA->RemoveRef();\nsrc/PRISE/prise_scheduler.cpp-162-\nsrc/PRISE/prise_scheduler.cpp-163-\tGlobalLog()->PrintEasyEvent( \"============================================================\" );\nsrc/PRISE/prise_scheduler.cpp-164-\tGlobalLog()->PrintEasyEvent( \"                                                            \" );\nsrc/PRISE/prise_scheduler.cpp-165-\tGlobalLog()->PrintEasyEvent( \"    P.R.I.S.E - Parallel Realistic Image Synthesis Engine   \" );\nsrc/PRISE/prise_scheduler.cpp-166-#ifdef _DEBUG\nsrc/PRISE/prise_scheduler.cpp-167-\tGlobalLog()->PrintEasyEvent( \"                  SCHEDULER -- DEBUG BUILD                  \" );\nsrc/PRISE/prise_scheduler.cpp-168-#else\nsrc/PRISE/prise_worker.cpp-195-                     HINSTANCE /*hPrevInstance*/,\nsrc/PRISE/prise_worker.cpp-196-                     LPSTR     lpCmdLine,\nsrc/PRISE/prise_worker.cpp-197-                     int       /*nCmdShow*/)\nsrc/PRISE/prise_worker.cpp-198-{\nsrc/PRISE/prise_worker.cpp-199-\tSetGlobalLogFileName( \"PRISE_Worker_Log.txt\" );\nsrc/PRISE/prise_worker.cpp-200-\nsrc/PRISE/prise_worker.cpp-201-\tConsoleWin32* pA = new ConsoleWin32( eLog_Win32Console, TYPICAL_PRIORITY, HIGHEST_PRIORITY );\nsrc/PRISE/prise_worker.cpp-202-\tGlobalLog()->PrintNew( pA, __FILE__, __LINE__, \"Win32 Console printer\" );\nsrc/PRISE/prise_worker.cpp-203-\tconst char *szWndTitle = \"Parallel Realistic Image Synthesis Engine (P.R.I.S.E) Worker Console\";\nsrc/PRISE/prise_worker.cpp-204-\tchar szWindowName[1024];"
    },
    {
      "file_path": "src/PRISE/prise_worker.cpp",
      "sprintf_line": 205,
      "context_lines": [
        "src/PRISE/prise_worker.cpp-206-\tpA->Init( szWindowName, hInstance );",
        "src/PRISE/prise_worker.cpp-207-\tGlobalLogPriv()->AddPrinter( pA );",
        "src/PRISE/prise_worker.cpp-208-\tpA->RemoveRef();",
        "src/PRISE/prise_worker.cpp-209-",
        "src/PRISE/prise_worker.cpp-210-\tGlobalLog()->PrintEasyEvent( \"============================================================\" );",
        "src/PRISE/prise_worker.cpp-211-\tGlobalLog()->PrintEasyEvent( \"                                                            \" );",
        "src/PRISE/prise_worker.cpp-212-\tGlobalLog()->PrintEasyEvent( \"    P.R.I.S.E - Parallel Realistic Image Synthesis Engine   \" );",
        "src/PRISE/prise_worker.cpp-213-#ifdef _DEBUG",
        "src/PRISE/prise_worker.cpp-214-\tGlobalLog()->PrintEasyEvent( \"                   WORKER -- DEBUG BUILD                    \" );",
        "src/PRISE/prise_worker.cpp-215-#else",
        "src/PRISE/prisemeshmaker.cpp-195-",
        "src/PRISE/prisemeshmaker.cpp-196-\tint numcpus = atoi(argv[5]);",
        "src/PRISE/prisemeshmaker.cpp-197-\tgeom->SegmentOctreeForCPUS( numcpus );",
        "src/PRISE/prisemeshmaker.cpp-198-",
        "src/PRISE/prisemeshmaker.cpp-199-\tfor( int i=-1; i<numcpus; i++ ) {",
        "src/PRISE/prisemeshmaker.cpp-200-\t\tMemoryBuffer*\tmb = new MemoryBuffer();",
        "src/PRISE/prisemeshmaker.cpp-201-\t\tmb->Resize( 0x10000000 );",
        "src/PRISE/prisemeshmaker.cpp-202-\t\tgeom->SerializeForCPU( *mb, i );",
        "src/PRISE/prisemeshmaker.cpp-203-",
        "src/PRISE/prisemeshmaker.cpp-204-\t\tchar\tfilename[1024];"
      ],
      "raw_content": "src/PRISE/prise_worker.cpp:205:\tsprintf( szWindowName, \"%s v. %d.%d.%d build %d\", szWndTitle, RISE_VER_MAJOR_VERSION, RISE_VER_MINOR_VERSION, RISE_VER_REVISION_VERSION, RISE_VER_BUILD_VERSION );\nsrc/PRISE/prise_worker.cpp-206-\tpA->Init( szWindowName, hInstance );\nsrc/PRISE/prise_worker.cpp-207-\tGlobalLogPriv()->AddPrinter( pA );\nsrc/PRISE/prise_worker.cpp-208-\tpA->RemoveRef();\nsrc/PRISE/prise_worker.cpp-209-\nsrc/PRISE/prise_worker.cpp-210-\tGlobalLog()->PrintEasyEvent( \"============================================================\" );\nsrc/PRISE/prise_worker.cpp-211-\tGlobalLog()->PrintEasyEvent( \"                                                            \" );\nsrc/PRISE/prise_worker.cpp-212-\tGlobalLog()->PrintEasyEvent( \"    P.R.I.S.E - Parallel Realistic Image Synthesis Engine   \" );\nsrc/PRISE/prise_worker.cpp-213-#ifdef _DEBUG\nsrc/PRISE/prise_worker.cpp-214-\tGlobalLog()->PrintEasyEvent( \"                   WORKER -- DEBUG BUILD                    \" );\nsrc/PRISE/prise_worker.cpp-215-#else\nsrc/PRISE/prisemeshmaker.cpp-195-\nsrc/PRISE/prisemeshmaker.cpp-196-\tint numcpus = atoi(argv[5]);\nsrc/PRISE/prisemeshmaker.cpp-197-\tgeom->SegmentOctreeForCPUS( numcpus );\nsrc/PRISE/prisemeshmaker.cpp-198-\nsrc/PRISE/prisemeshmaker.cpp-199-\tfor( int i=-1; i<numcpus; i++ ) {\nsrc/PRISE/prisemeshmaker.cpp-200-\t\tMemoryBuffer*\tmb = new MemoryBuffer();\nsrc/PRISE/prisemeshmaker.cpp-201-\t\tmb->Resize( 0x10000000 );\nsrc/PRISE/prisemeshmaker.cpp-202-\t\tgeom->SerializeForCPU( *mb, i );\nsrc/PRISE/prisemeshmaker.cpp-203-\nsrc/PRISE/prisemeshmaker.cpp-204-\t\tchar\tfilename[1024];"
    },
    {
      "file_path": "src/PRISE/prisemeshmaker.cpp",
      "sprintf_line": 205,
      "context_lines": [
        "src/PRISE/prisemeshmaker.cpp-206-",
        "src/PRISE/prisemeshmaker.cpp-207-\t\tmb->DumpToFileToCursor( filename );",
        "src/PRISE/prisemeshmaker.cpp-208-\t\tmb->RemoveRef();",
        "src/PRISE/prisemeshmaker.cpp-209-\t}",
        "src/PRISE/prisemeshmaker.cpp-210-",
        "src/PRISE/prisemeshmaker.cpp-211-\tgeom->RemoveRef();",
        "src/PRISE/prisemeshmaker.cpp-212-",
        "src/PRISE/prisemeshmaker.cpp-213-\treturn 1;",
        "src/PRISE/prisemeshmaker.cpp-214-}",
        "src/RISE/biospecbsdfmaker.cpp-111-\tRISE_API_CreateDiskFileWriteBuffer( &pBuffer, outfile );",
        "src/RISE/biospecbsdfmaker.cpp-112-",
        "src/RISE/biospecbsdfmaker.cpp-113-\t// Marker for a data driven BSDF file",
        "src/RISE/biospecbsdfmaker.cpp-114-\tpBuffer->setInt( 0xBDF );",
        "src/RISE/biospecbsdfmaker.cpp-115-\tpBuffer->setInt( 1 );\t\t\t\t\t// Version of the file",
        "src/RISE/biospecbsdfmaker.cpp-116-\tpBuffer->setInt( numPositions );\t\t// Number of emitter positions",
        "src/RISE/biospecbsdfmaker.cpp-117-\tpBuffer->setInt( numPatches );\t\t\t// Number of patches",
        "src/RISE/biospecbsdfmaker.cpp-118-\t",
        "src/RISE/biospecbsdfmaker.cpp-119-\tfor( unsigned int i=0; i<numPositions; i++ ) {",
        "src/RISE/biospecbsdfmaker.cpp-120-\t\tchar buf[256] = {0};"
      ],
      "raw_content": "src/PRISE/prisemeshmaker.cpp:205:\t\tsprintf( filename, \"%s_%d.prisemesh\", argv[2], i );\nsrc/PRISE/prisemeshmaker.cpp-206-\nsrc/PRISE/prisemeshmaker.cpp-207-\t\tmb->DumpToFileToCursor( filename );\nsrc/PRISE/prisemeshmaker.cpp-208-\t\tmb->RemoveRef();\nsrc/PRISE/prisemeshmaker.cpp-209-\t}\nsrc/PRISE/prisemeshmaker.cpp-210-\nsrc/PRISE/prisemeshmaker.cpp-211-\tgeom->RemoveRef();\nsrc/PRISE/prisemeshmaker.cpp-212-\nsrc/PRISE/prisemeshmaker.cpp-213-\treturn 1;\nsrc/PRISE/prisemeshmaker.cpp-214-}\nsrc/RISE/biospecbsdfmaker.cpp-111-\tRISE_API_CreateDiskFileWriteBuffer( &pBuffer, outfile );\nsrc/RISE/biospecbsdfmaker.cpp-112-\nsrc/RISE/biospecbsdfmaker.cpp-113-\t// Marker for a data driven BSDF file\nsrc/RISE/biospecbsdfmaker.cpp-114-\tpBuffer->setInt( 0xBDF );\nsrc/RISE/biospecbsdfmaker.cpp-115-\tpBuffer->setInt( 1 );\t\t\t\t\t// Version of the file\nsrc/RISE/biospecbsdfmaker.cpp-116-\tpBuffer->setInt( numPositions );\t\t// Number of emitter positions\nsrc/RISE/biospecbsdfmaker.cpp-117-\tpBuffer->setInt( numPatches );\t\t\t// Number of patches\nsrc/RISE/biospecbsdfmaker.cpp-118-\t\nsrc/RISE/biospecbsdfmaker.cpp-119-\tfor( unsigned int i=0; i<numPositions; i++ ) {\nsrc/RISE/biospecbsdfmaker.cpp-120-\t\tchar buf[256] = {0};"
    },
    {
      "file_path": "src/RISE/biospecbsdfmaker.cpp",
      "sprintf_line": 121,
      "context_lines": [
        "src/RISE/biospecbsdfmaker.cpp-122-\t\tStdOutProgress\tprogress( buf );",
        "src/RISE/biospecbsdfmaker.cpp-123-",
        "src/RISE/biospecbsdfmaker.cpp-124-\t\tconst Scalar dEmitterTheta = (PI_OV_TWO/(numPositions-1))*(i);",
        "src/RISE/biospecbsdfmaker.cpp-125-",
        "src/RISE/biospecbsdfmaker.cpp-126-\t\tpDetector->PerformMeasurement(",
        "src/RISE/biospecbsdfmaker.cpp-127-\t\t\tdEmitterTheta,",
        "src/RISE/biospecbsdfmaker.cpp-128-\t\t\t1,",
        "src/RISE/biospecbsdfmaker.cpp-129-\t\t\t*pMaterial,",
        "src/RISE/biospecbsdfmaker.cpp-130-\t\t\tnum_samples,",
        "src/RISE/biospecbsdfmaker.cpp-131-\t\t\t1,",
        "src/RISE/risempi.cpp-269-//\tif( GlobalLogPriv()->memTracker ) {",
        "src/RISE/risempi.cpp-270-//\t\tdelete GlobalLogPriv()->memTracker;",
        "src/RISE/risempi.cpp-271-//\t\tGlobalLogPriv()->memTracker = 0;",
        "src/RISE/risempi.cpp-272-//\t}",
        "src/RISE/risempi.cpp-273-",
        "src/RISE/risempi.cpp-274-\t// Disable aspects of the logger, so that different processes don't conflict on the same log file",
        "src/RISE/risempi.cpp-275-\tGlobalLogPriv()->RemoveAllPrinters();",
        "src/RISE/risempi.cpp-276-",
        "src/RISE/risempi.cpp-277-\t// Now add back the file printer",
        "src/RISE/risempi.cpp-278-\tchar buf[1024];"
      ],
      "raw_content": "src/RISE/biospecbsdfmaker.cpp:121:\t\tsprintf( buf, \"Performing measurement %.2d of %.2d: \", i+1, numPositions );\nsrc/RISE/biospecbsdfmaker.cpp-122-\t\tStdOutProgress\tprogress( buf );\nsrc/RISE/biospecbsdfmaker.cpp-123-\nsrc/RISE/biospecbsdfmaker.cpp-124-\t\tconst Scalar dEmitterTheta = (PI_OV_TWO/(numPositions-1))*(i);\nsrc/RISE/biospecbsdfmaker.cpp-125-\nsrc/RISE/biospecbsdfmaker.cpp-126-\t\tpDetector->PerformMeasurement(\nsrc/RISE/biospecbsdfmaker.cpp-127-\t\t\tdEmitterTheta,\nsrc/RISE/biospecbsdfmaker.cpp-128-\t\t\t1,\nsrc/RISE/biospecbsdfmaker.cpp-129-\t\t\t*pMaterial,\nsrc/RISE/biospecbsdfmaker.cpp-130-\t\t\tnum_samples,\nsrc/RISE/biospecbsdfmaker.cpp-131-\t\t\t1,\nsrc/RISE/risempi.cpp-269-//\tif( GlobalLogPriv()->memTracker ) {\nsrc/RISE/risempi.cpp-270-//\t\tdelete GlobalLogPriv()->memTracker;\nsrc/RISE/risempi.cpp-271-//\t\tGlobalLogPriv()->memTracker = 0;\nsrc/RISE/risempi.cpp-272-//\t}\nsrc/RISE/risempi.cpp-273-\nsrc/RISE/risempi.cpp-274-\t// Disable aspects of the logger, so that different processes don't conflict on the same log file\nsrc/RISE/risempi.cpp-275-\tGlobalLogPriv()->RemoveAllPrinters();\nsrc/RISE/risempi.cpp-276-\nsrc/RISE/risempi.cpp-277-\t// Now add back the file printer\nsrc/RISE/risempi.cpp-278-\tchar buf[1024];"
    },
    {
      "file_path": "src/RISE/risempi.cpp",
      "sprintf_line": 279,
      "context_lines": [],
      "raw_content": "src/RISE/risempi.cpp:279:\tsprintf( buf, \"RISELog_Proc%d.txt\", rank );"
    },
    {
      "file_path": "src/RISE/risempi.cpp-280-\tstd",
      "sprintf_line": 0,
      "context_lines": [
        "src/RISE/risempi.cpp-281-\tStreamPrinter*\t\tpB = new StreamPrinter( fs, true );",
        "src/RISE/risempi.cpp-282-\tGlobalLog()->PrintNew( pB, __FILE__, __LINE__, \"file stream printer\" );",
        "src/RISE/risempi.cpp-283-\tGlobalLogPriv()->AddPrinter( pB );",
        "src/RISE/risempi.cpp-284-\tpB->release();",
        "src/RISE/risempi.cpp-285-",
        "src/RISE/risempi.cpp-286-\t// If we are processor 0, then add a standard out printer",
        "src/RISE/risempi.cpp-287-\tif( rank == 0 ) {"
      ],
      "raw_content": "src/RISE/risempi.cpp-280-\tstd::ofstream*\t\tfs = new std::ofstream( buf );\nsrc/RISE/risempi.cpp-281-\tStreamPrinter*\t\tpB = new StreamPrinter( fs, true );\nsrc/RISE/risempi.cpp-282-\tGlobalLog()->PrintNew( pB, __FILE__, __LINE__, \"file stream printer\" );\nsrc/RISE/risempi.cpp-283-\tGlobalLogPriv()->AddPrinter( pB );\nsrc/RISE/risempi.cpp-284-\tpB->release();\nsrc/RISE/risempi.cpp-285-\nsrc/RISE/risempi.cpp-286-\t// If we are processor 0, then add a standard out printer\nsrc/RISE/risempi.cpp-287-\tif( rank == 0 ) {"
    },
    {
      "file_path": "src/RISE/risempi.cpp-288-\t\tStreamPrinter*\tpA = new StreamPrinter( &std",
      "sprintf_line": 0,
      "context_lines": [
        "src/RISE/risempi.cpp-289-\t\tGlobalLog()->PrintNew( pA, __FILE__, __LINE__, \"cout stream printer\" );"
      ],
      "raw_content": "src/RISE/risempi.cpp-288-\t\tStreamPrinter*\tpA = new StreamPrinter( &std::cout, true, eLog_Console );\nsrc/RISE/risempi.cpp-289-\t\tGlobalLog()->PrintNew( pA, __FILE__, __LINE__, \"cout stream printer\" );"
    }
  ]
}